<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>XSLT pour les nuls</title>
	<title><lb/>Esquisse d'une initiation aux normes de transformation
	XML</title>
	<author>Lou Burnard</author>
	
      </titleStmt>
      <editionStmt>
        <edition>
          <date>mai 2011</date>
        </edition>
      </editionStmt>
      <publicationStmt>
        <publisher>Lou Burnard Consulting</publisher>
        <availability>
          <p>Freely available for use and derivative works under a Creative Commons Attribution
	      license.</p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Translated and adapted from Rahtz 2009-07-23;  previous talks, TEI Gudeidelines, etc.</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change>
        <date>$LastChangedDate: $.</date>
        <name>$LastChangedBy:  $</name>
        <note>$LastChangedRevision:  $</note>
      </change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>

<div><head>Objectifs</head>
<p rend="box">Ceci n'est pas une formation complète! son objectif est
de ... </p>
<list>
<item>vous donner un avant-gout des possibilités affordés par les
normes XSLT et XPath</item>
<item>surtout dans le domaine de traitement des documents
<q>XML-TEI</q>, principalement donc sortis des sciences
humaines</item>
<item>aborder les concepts fondamentaux et les usages les plus
répandus du norme XSLT</item>
<item>vous préparer pour une formation plus approfondie </item>
</list>
</div>

      <div>
	<head>XSL: un ensemble de normes complémentaires</head>
	<p>
	  <list type="unordered">
	    <item>XPath: un syntaxe normalisé pour définir et accéder aux
	    sous-parties d'une arborescence XML </item>
	    <item>XSLT: un norme informatique pour la transformation
	    des arborescences XML </item>
	    <item>XSL FO: un vocabulaire XML pour la description
	    d'affichage des pages </item>
	  </list>
	</p>
<p>Tous les trois dévelopés et maintenus par le W3C, comme le norme XML.</p>
      </div>


<div><head>A quoi sert le XSL ?</head>
<list>
<item>Un document XML n'est qu'une chaîne de caractères Unicode avec
des balises: pourquoi pas le traîter en tant que tel?</item>
<item>Parce que les balises representent quelque chose de plus
signifiant : l'arborescence.</item>
<item>Parce que le syntax XML permet des variations ...
<egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[
<foo       bar= "x" baz = "z"></foo>
<foo
baz= "z" bar = 
"x"/>]]>
</egXML>
</item>
<item>Parce que la <emph>structuration</emph> d'un document XML fait partie de sa
signification</item>
 </list>
</div>

<div><head>C'est quoi une arborescence ?</head>
  <p><graphic height="50%" url="../Graphics/arborescence.png"/></p>
<list>
<item>un ensemble de <term>noeuds</term>, organisé de manière hiérarchique</item>
<item>chaque noeud porte un <term>identifiant générique</term> (son "type")</item>
<item>il y a un seul <term>noeud racine</term> qui contient (ou domine) tous les
autres</item>
<item>chaque noeud peut contenir (ou dominer)
<list>
<item>un sous-arborescence</item>
<item>ou un morceau de texte</item>
<!--item>facultativement un ensemble d'<term>attributs</term></item-->
</list></item>
<!--item>chaque attribut comporte un <term>nom</term> et un <term>valeur</term> </item-->
</list>
</div>

<div><head>Arborescence XML</head>
  <list>
    <item>chaque noeud correspond à un élément identifié</item><item>les attributs d'un élément constitue une sous-arborescence associée au noeud</item><item>chaque attribut comporte un <term>nom</term> et un <term>valeur</term> 
    </item>
  </list>
</div>

      <div>
        <head>Exemple texte XML ... </head>
<egXML xmlns="http://www.tei-c.org/ns/Examples">
<body type="anthology">
  <div type="poem">
    <head>The SICK ROSE </head> 
    <lg type= "stanza"> 
      <l n="1">O Rose thou art sick.</l> 
      <l n="2">The invisible worm,</l> 
      <l n="3">That flies in the night </l> 
      <l n="4">In the howling storm:</l> 
    </lg> 
    <lg type= "stanza">
      <l n="5">Has found out thy bed </l> 
      <l n="6">Of crimson joy:</l> 
      <l n="7">And his dark secret love </l> 
      <l n="8">Does thy life destroy.</l> 
    </lg>
  </div>

<div type="shortpoem">
        <head>Queen Anne's tipple</head>
        <lg type="couplet">
            <l n="1">Here thou Great Anna whom three realms obey</l>
            <l n="2">Doth sometimes council take, and sometimes tea.</l>
        </lg>
    </div>
</body>
</egXML>
<!--figure><graphic url="xpath-eg-0.png"/></figure-->
</div>
<div><head>.. ou, en forme d'arborescence: </head>
<figure><graphic url="../Graphics/xpath-eg-1.png"/></figure>
</div>



<div><head>XPath : une feuille de route</head>
<p>Pour accéder aux composants d'un document XML, on spécifie un
<term>chemin</term>, spécifiant les  noeuds qu'il faut
traverser pour arriver à la partie souhaité</p>
<p>Par exemple, pour arriver aux <gi>head</gi>s dans cet exemple, on
 commence au <gi>body</gi>, puis passe à un <gi>div</gi> fils, et ensuite
 on arrive à un <gi>head</gi> </p>
<p>En XPath, on dit : <code>/body/div/head</code></p>
</div>

<div><head/>
<figure><graphic url="xpath-eg-06.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-07.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-08.png"/></figure>
</div>

<div><head>Les étapes</head>
<list>
<item>Chaque étape sur ce chemin n'est pas forcément un élément XML...</item>
<item>on peut aussi regarder les attributs</item>
<item>ou des morceaux de texte</item>
</list>
</div>

<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-09.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-10.png"/></figure>
</div>
<!-- text() example needed -->

<div><head>Les sélections</head>
<list>
<item>On peut séléctionner parmi les noeuds resultants, en forme de
restriction entre parenthèses [ et ] </item>
<item>Une restriction peut tenir en compte la valeur d'un attribut</item>
<item>ou la position ordinale du noeud dans l'arbre</item>
<item>ou l'existence d' un élément du type indiqué</item>
</list>
</div>

<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-12.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath-eg-13.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-14.png"/></figure>
</div>

<div><head>Le point de depart</head>
<p>On peut partir de n'importe quel point dans l'arborescence: 
<list>
<item><code>//</code> signifie <q>n'importe où</q></item>
<item><code>..</code> signifie <q>mon parent</q></item>
</list>
</p>
<p>On peut aussi naviguer l'hierarchie, en se servant des
<term>axes</term> tels que <code>ancestor::</code>, 
<code>following-sibling::</code>, <code>descendant::</code> ... </p>
</div>

<div><head/>
<figure><graphic url="../Graphics/xpath-eg-17.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-18.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-19.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-20.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath-eg-21.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-22.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath-eg-23.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-24.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath-eg-25.png"/></figure>
</div>
<div><head/>
<figure><graphic url="../Graphics/xpath/xpath-eg-26.png"/></figure>
</div>

<div><head>Fonctions XPath</head>
<p>XPath fournit également une librarie extensive de fonctions 
utiles. On signale ici seulement quelques-unes :
<list>
<item><code>count(x)</code> fournit le nombre des noeuds dans
l'arbre x</item>
<item><code>position()</code> fournit le nombre ordinal du noeud courant
par rapport à son contexte</item>
<item><code>last()</code> fournit fournit le nombre ordinal du dernier
noeud courant
par rapport à son contexte</item>
<item><code>contains(x,y)</code> test l'existence de la chaine
<code>y</code> dans le morceau de texte <code>x</code> </item>
</list>
</p></div>

<div><head>Premier exercice</head>
<p>Tester votre compréhension de XPath avec la première partie de
l'exercice...</p>
</div>
       
      <div>
	<head>Comment se servir d' XSLT ?</head>
	<p><figure>
	  <graphic url="../Graphics/xslt-use.png" height="80%"/>
</figure></p>
<p rend="box">XSLT est un langage de transformation</p>
</div>


<div>
<head>Une transformation typique</head>
<p>A partir de ceci :
<egXML xmlns="http://www.tei-c.org/ns/Examples" >
  <div type="recette" n="34">
    <head>Pasta pour les debutants</head>
    <list>
      <item>pates</item>
      <item>fromage râpé</item>
    </list>
    <p>Faire bouiller les pates, et melanger avec le fromage.</p>
  </div>
</egXML>
on veut produire :
<egXML xmlns="http://www.tei-c.org/ns/Examples"> 
  <html xmlns="http://www.w3.org/1999/xhtml">
    <h1>34: Pasta pour les novices</h1>
    <p>Ingrédients: pates  fromage râpé</p>
    <p>Faire bouiller les pates, et melanger avec le fromage.</p>
  </html>
</egXML>
</p>
</div>

<div>
  <head>Comment exprimer cela en XSL?</head>
  <p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
      <xsl:stylesheet 
	  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	  xpath-default-namespace="http://www.tei-c.org/ns/1.0"
	  version="2.0">
	<xsl:template match="div">
	  <html> 
	    <h1>
	      <xsl:value-of select="@n"/>:
	      <xsl:value-of select="head"/>
	    </h1>
	    <p>Ingrédients:    
	    <xsl:apply-templates  
		select = "list/item"/> 
	    </p> 
	    <p>
	      <xsl:value-of select="p"/>
	    </p>
	  </html> 
  </xsl:template>
</xsl:stylesheet>
</egXML>
</p>
</div>



<div>
<head>Une feuille de style XSLT</head>
<list>
<item>est un document XML, contenant des éléments de l'espace de noms
<code>http://www.w3.org/1999/XSL/Transform</code>
</item>
<item><gi>xsl:stylesheet</gi> (élément racine de tout stylesheet)
permet de spécifier tous les noms d'espace utilisés, un nom d'espace
par defaut, et la version
du norme XSLT employé (1 ou 2)</item>
<item><gi>xsl:output</gi> : spécifie quelques options pour l'arbre de
sortie, par exemple son format (HTML, XML, TEXT...), encodage
(ISO-8859-1, UTF-8 ...) etc.</item>
</list>
 <egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:stylesheet
    xpath-default-namespace="http://www.tei-c.org/ns/1.0"
    version="2.0">
<xsl:output method="html" encoding="ISO-8859-1"/>
<xsl:template match="/">
<xsl:apply-templates/>
</xsl:template>
</xsl:stylesheet>
</egXML>
      </div>



<div><head>Dix éléments XSLT essentiels</head>
<list>
<item><gi>xsl:template</gi> spécifie un modèle de transformation</item>
<item><gi>xsl:apply-templates/</gi> applique des templates</item>
<item><gi>xsl:value-of</gi> sort une valeur</item>
<item><gi>xsl:text</gi> sort un morceau de texte</item>
<item><gi>xsl:élément</gi>, <gi>xsl:attribute</gi> et
<gi>xsl:comment</gi> sortent un élément, attribut, ou commentaire </item>
<item><gi>xsl:if</gi> et <gi>xsl:choose</gi> actions conditionnels</item>
<item><gi>xsl:for-each</gi> bouclage des actions </item>
<item><gi>xsl:variable</gi> définition de variable</item>
<item><gi>xsl:number</gi> effectue une numerotation </item>
<item><gi>xsl:sort</gi> effectue un tri </item>
</list>
</div>


<div><head><gi>xml:template</gi></head>

<p>Cet élément  spécifie un modele (des actions) à appliquer à l'
arborescence spécifiée par son attribut <att>match</att></p>
<p>Il peut contenir d'autres éléments XSL, des éléments d'autres noms
d'espace (qui seront copiés), ou rien de tout.</p>
<egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:stylesheet
    xpath-default-namespace="http://www.tei-c.org/ns/1.0"
    version="2.0">

<xsl:template match="div">
&lt;!--  .... actions pour les éléments div....-->
</xsl:template>

<xsl:template match="head">
&lt;!--  .... actions pour tous les éléments head....-->
</xsl:template>

<xsl:template match="div/head">
&lt;!--  .... actions pour les éléments head contenus par un div....-->
</xsl:template>

<xsl:template match="teiHeader"/>

</xsl:stylesheet>
</egXML>
</div>

<div>
<head>Wild cards</head>
<p>A part des éléments et des attributs, l'attribut <ident>match</ident> sur  <gi>xsl:template</gi>
peut indiquer... 
<table>
  <row><cell><code>/</code></cell><cell>la racine du document </cell></row>
  <row><cell><code>*</code></cell><cell>tout élément</cell></row>
  <row><cell><code>@*</code></cell><cell>tout attribut</cell></row>
  <row><cell><code>text()</code></cell><cell>tout morceau de texte</cell></row>
</table>

<egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="*">
&lt;!-- actions par defaut pour tout élément -->
</xsl:template>

<xsl:template match="@*">
&lt;!-- actions par defaut pour tout attribut -->
</xsl:template>
</egXML>

<egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="text()"/>
</egXML>


</p>

</div>
<div><head>Les règles d'or de XSLT</head>
<p>Par defaut, le document est a traiter élément par élément...
<list type="ordered">
<item>Si aucun template ne correspond à un élément, traiter les
éléments qu'il contient </item>
<item>Si aucun élément reste à traiter par regle 1, sortir les
morceaux de texte contenus par l' élément</item>
<item>Un élément n'est traite que si un template lui correspond</item>
<item>L'ordre des templates dans le stylesheet est sans significance</item>
<item>Tout partie du document est traitable part tout template,
eventuellement plusieurs fois</item>
<item>Un stylesheet ne peut contenir que de XML bien-forme</item>
</list>
</p></div>

<div><head>Contenu d'un template</head>
<p>Les éléments XML d'un nom d'espaces autre que le XSL se trouvant dans un
template sont sortis sans changement. </p>
<p>Les fragments textuels (plus ou moins) pareils.</p>
<p>Un template vide requiert la sortie de ... rien, donc (s'il est
invoqué) il supprime les noeuds concernes.</p>
</div>


<div>
<head>Plusieures templates peuvent etre spécifies pour un meme élément en
des contextes divers</head>
<p>Comparer
<egXML xmlns="http://www.tei-c.org/ns/Examples" >
<xsl:template match="head">
  ....
</xsl:template>
</egXML>
avec
<egXML xmlns="http://www.tei-c.org/ns/Examples" >
<xsl:template match="div/head">
 ...
</xsl:template>
<xsl:template match="figure/head">
 ....
</xsl:template>
</egXML>
</p>
<p>En cas de conflit, c'est  le template le plus spécifique qui
gagne.</p>
</div>


<div>
<head><gi>xsl:apply-templates</gi></head>

<p>Cet élément rend disponible dans le contexte courant les regles
contenus par les templates indiques dans son attribut
<att>select</att>. Si aucun template n'est indiqué, tous les templates
sont disponibles. </p>

 <egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="/">
 <html>
   <xsl:apply-templates/>
  </html>
</xsl:template>
</egXML>

  <egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="TEI"   >
 <xsl:apply-templates select="text"/>
</xsl:template>
</egXML>
<p>Il est tres utile pour varier l'ordre des sorties:
  <egXML xmlns="http://www.tei-c.org/ns/Examples"   >
    <xsl:template match="text">
      <h1>Corps du texte</h1>
      <xsl:apply-templates select="body"/>
      <h1>Pièces liminaires</h1>
      <xsl:apply-templates select="front"/>
      <xsl:apply-templates select="back"/>
</xsl:template>
</egXML>
</p></div>

<div ><head><gi>xsl:value-of</gi></head>
<p>Cet élément fait sortir la valeur d'un élément ou d'un attribut :

  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:value-of
	select="/TEI/teiHeader/fileDesc/titleStmt/title"/>
  </egXML>
</p>

<p>Attention aux doublons potentiels!

<egXML xmlns="http://www.tei-c.org/ns/Examples">
<xsl:template match="div">
 <h2> <xsl:value-of select="@n"/>
 <xsl:value-of select="head"/></h2>
 <xsl:apply-templates/>
</xsl:template>

<xsl:template match="div/head" />
</egXML>
</p>
   </div>


<div><head>Attention: à ne pas confondre...</head>
<list>
<item><gi>xsl:value-of select="XX"</gi> fait sortir le contenu des
noeuds indiques par le XPath "XX".</item>
 <item><gi>xsl:apply-templates select="XX"</gi> fait traiter les
templates disponibles pour les noeuds indiques par le XPath "XX"</item>
<item><gi>xsl:template match="XX"</gi> n'a aucun effet : il definit
un correspondence entre un template et un élément</item>
</list>
</div>

<div>
  <head>Evaluation des valeurs d'attribut</head>
  <p>On a : 
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <ref target="http://www.gallica.bnf.fr">site Gallica</ref>
  </egXML>
On veut :
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <a  xmlns="http://www.w3.org/1999/xhtml" href="http://www.gallica.bnf.fr"/>
  </egXML>
</p><p>Ceci ne sera <emph>pas</emph> efficace :
  <egXML xmlns="http://www.tei-c.org/ns/Examples" >
    <xsl:template match="ref">
      <a href="@target">
	<xsl:apply-templates/>
      </a>
    </xsl:template>
  </egXML>
  </p>
<p>parce qu'il donnera à l'attribut <att>href</att> la valeur  <q>@target</q>!</p>

</div>

<div>
<head>Une astuce syntaxique...</head>
<p>On utilise  <code>{}</code> pour indiquer qu'une expression
doit être  <hi>evaluée</hi>:
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="ref" >
      <a href="{@target}">
	<xsl:apply-templates/>
      </a>
    </xsl:template>
  </egXML>
  </p>
<p>Ceci donnera à l'attribut <att>href</att>  la valeur de l' attribut
<att>target</att> quelle que soit la valeur de ce dernier</p>
</div>

<div><head><gi>xsl:élément</gi>, <gi>xsl:attribute</gi>, <gi>xsl:comment</gi></head>
<p>Ces éléments font apparaitre des éléments XML dans l'arbre de
sortie. Ils sont un peu plus verbose que les abbréviations
presentées jusqu'à là, mais peut-être plus élégant...

  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="ref" >
      <xsl:élément name="a">
	<xsl:attribute name="href">
	  <xsl:value-of select="@target"/>
</xsl:attribute>
	<xsl:apply-templates/>
      </xsl:élément>
    </xsl:template>
  </egXML>
 est l'equivalent de
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="ref" >
      <a href="{@target}">
	<xsl:apply-templates/>
      </a>
    </xsl:template>
  </egXML>
</p>
</div>

<div><head><gi>xsl:text</gi> : faire sortir un morceau de texte</head>
<p>Cet élément est utile pour englober un morceau de texte
explicitement (au lieu de le donner directement dans le corps du
template). 
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="item" >
<xsl:élément name="p">
<xsl:text>
 ITEM </xsl:text><xsl:apply-templates/>
</xsl:élément>
    </xsl:template>
  </egXML>
</p>
</div>

<div>
  <head> <gi>xsl:if</gi> : faire une épreuve</head>
  <p>Cet élément permet des actions conditionelles :
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="person">
      <xsl:if test="@sex='1'">
	<li>
	  <xsl:value-of select="persName"/>
	</li>
      </xsl:if>
    </xsl:template>
</egXML>
cf.
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="person[@sex='1']">
	<li>
	  <xsl:value-of select="persName"/>
	</li>
    </xsl:template>
    <xsl:template match="person"/>
  </egXML>
  </p>
</div>

<div>
  <head><gi>xsl:choose</gi>: faire un choix</head>
  <p>Cet élément permet des actions conditionelles un peu plus
  complexes :
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="person">
      <xsl:apply-templates/>
      <xsl:choose>
	<xsl:when test="@sex='1'">
	  (mâle)
	</xsl:when>
	<xsl:when test="@sex='2'">
	  (femelle)
	</xsl:when>
	<xsl:when test="not(@sex)">
	  (sexe non spécifié)
	</xsl:when>
	<xsl:otherwise>
	  (code de sexe inconnu: <xsl:value-of select="@sex"/>)
	</xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </egXML>
  </p>
</div>


<div>
  <head><gi>xsl:for-each</gi> : faire une iteration</head>
  <p>Cet élément permet un bouclage des actions :
  <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="small">
    <xsl:template match="listPerson" >
      <ul>
	<xsl:for-each select="person">
	  <li>
	    <xsl:value-of select="persName"/>
	  </li>
	</xsl:for-each>
      </ul>
    </xsl:template>
  </egXML>
cf.
  <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="small">
    <xsl:template match="listPerson" >
      <ul>
	<xsl:apply-templates select="person"/>
      </ul>
    </xsl:template>
    <xsl:template match="person" >
      <li>
	<xsl:value-of select="persName"/>
      </li>
    </xsl:template>
  </egXML>
  </p>
</div>

<div><head><gi>xsl:variable</gi> : creation de variable</head>
<p>Cet élément permet d'associer un nom avec un ensemble de noeuds, ou
avec une chaine de caracteres, par exemple pour faciliter sa ré-utilisation
plusieurs fois dans un même stylesheet.
  <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="small">
<xsl:variable name="modernise">
oui
</xsl:variable>
<xsl:if test='$modernise = "oui"'>
 ....
</xsl:if>
</egXML>
</p>
</div>

<div>
  <head> <gi>xsl:number</gi> : numerotation </head>
  <p>On peut generer une numérotation derivée de la séquence des
  éléments dans l'arborescence XML...
  <list type="ordered">
    <item>par rapport a l'élément parent:
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="p">
      <xsl:number/>
    </xsl:template>
  </egXML>
    </item>
    <item>par rapport au document entier :
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="p">
      <xsl:number level="any"/>
    </xsl:template>
  </egXML>
    </item>
    <item>par rapport a un élément ancêtre spécifique:
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <xsl:template match="l">
      <xsl:number level="any" from="lg"/>
    </xsl:template>
  </egXML>
    </item>
  </list>
  </p>
</div>

<div><head><gi>xsl:sort</gi> : faire un tri</head>
<p>Cet élément permet de trier un ensemble de noeuds resultant d'un
élément <gi>xsl:apply-templates</gi> ou <gi>xsl:for-each</gi>.
<egXML xmlns="http://www.tei-c.org/ns/Examples">
                     <xsl:template match="text">
                        <ul>
                           <xsl:for-each select="//persName">
                              <xsl:sort select="normalize-space(.)" data-type="text"
                                 order="ascending"/>
                              <li>
                                 <xsl:value-of select="."/>
                              </li>
                           </xsl:for-each>
                        </ul>
                     </xsl:template>
                  </egXML>
</p>

</div>

<div>
  <head>Sommaire</head>
  <p>Maintenant vous savez comment
  <list type="ordered">
    <item>créer des templates </item>
    <item>séléctionner des morceaux de texte</item>
    <item>ajouter des éléments </item>
    <item>définir des actions conditionnelles</item>
    <item>numéroter et trier les objets de sortie</item>
  </list>
  </p>
<p>On va expérimenter cela dans la deuxieme partie de l'exercice....</p>
</div>

<div><head>Pour en savoir plus</head>
<list>

<item>A <ref
target="http://www.gchagnon.fr/cours/xml/">http://www.gchagnon.fr/cours/xml/
</ref> vous trouverez deux cours complets et très clairs</item>
<item>Un texte classique: Philippe Rigaux et Bernd Amann <title>Comprendre
XSLT</title>. O'Reilly, 2002.</item>
<item>Beaucoup, beaucoup, d'autres ressources anglophones...</item>
</list>
</div> 

</body></text></TEI>