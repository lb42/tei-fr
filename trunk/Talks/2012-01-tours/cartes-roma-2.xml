<?xml version="1.0" encoding="UTF-8"?>
<?oxygen NVDLSchema="../teitalks.nvdl"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI à la carte (2)</title>
        <author>Lou Burnard, MEET</author>
      </titleStmt>
      <editionStmt>
        <edition>
          <date>2012-01</date>
        </edition>
      </editionStmt>
      <publicationStmt>
        <publisher>MEET</publisher>
        <availability>
          <p>Freely available for use and derivative works under a Creative Commons Attribution
	      license.</p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Various previous talks, TEI Guidelines, etc.</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change>
        <date>$ $.</date>
        <name>$LastChangedBy: rahtz $</name>
        <note>$LastChangedRevision: 10215 $</note>
      </change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>

       <div>
	 <head>Roma: un petit tour</head>
	
	  <list type="ordered" rend="tiny">
	  	<item>Sur l'écran <code>New</code>, choisir <ident>Open existing customization</ident>
	  	et retrouver le fichier <ident type="file">tei_cartes.odd</ident> dans le dossier Travaux. Cliquer le bouton rouge <label>Start</label>.</item>
	  	<item>Sur l'écran <code>Customize</code>, selectionner le bouton <label>Francais</label>
	  		et cliquer encore le bouton rouge <label>Start</label>.</item>
	 <item>Sur l'écran <code>Personnaliser</code> selectionner l'onglet <ident>Langage</ident></item>
	  	<item>Sur l'écran <code>Choisissons...</code> selectionner de nouveau le Francais et cliquer sur le bouton rouge <label>Start</label></item>
	  	<item>Cliquer l'onglet <ident>Schema</ident> pour ouvrir l'écran <code>Creation du schema</code>: prendre le format par defaut. Cliquer sur le bouton rouge <label>Generate</label>. Enregistrer le fichier <ident type="file">tei_cartes.rnc</ident> dans votre dossier Travaux.</item>
	  	<item>Cliquer l'onglet <ident>Documentation</ident> pour ouvrir l'écran <code>Documentation</code>: prendre le format par defaut. Cliquer sur le bouton rouge <label>Generate</label>. Ouvrir le fichier <ident>tei_cartes_doc.html</ident> avec votre browser</item></list>
       </div>
  
       <div>
	 <head>Qu'est-ce qu'on vient de faire?</head>
	 <p>On a traité un fichier ODD déja existant pour en generer un schema RELAXNG et sa documentation HTML. </p>
       	
       	

       </div>

<div><head>Testons le schema</head>
<list type="ordered">
<item>Dans Oxygen, créez un nouveau fichier XML</item>
<item>En bas de l'écran il y a un bouton
<label>Personnaliser</label>. Cliquez-le. </item>
<item>A droite du champs <ident>URL du Schéma</ident>, il y a un petit
icone de dossier: cliquez-le. Selectionner <ident>Parcourir les
fichiers locaux</ident>. Naviguer jusqu'au fichier
	<ident>tei_cartes.rnc</ident> que vous venez de créer avec Roma</item>
	<item>Cliquer sur le bouton <label>Créer</label> en bas pour créer un nouveau document TEI conforme au schema tei_cartes.</item>
</list>
</div><div><head>En route!</head>
	<p>Oxygen vous propose un gabarit comme ceci:</p>
<p><graphic url="../Graphics/oxy-nouveau-text.png"/></p>	
<list>
	<item>A vous de le completer (et de corriger les erreurs)! </item><item>Tapez un &lt; n'importe ou dans la fenêtre d'édition d'Oxygen pour voir quelles 
balises sont disponibles a cet endroit.  Laissez-vous etre guidé(e) par le
logiciel!</item>
<item>En vous servant de cette schéma, essayez de compléter le balisage
des fichiers <ident>carte-1.xml</ident>, <ident>carte-2.xml</ident>,
et <ident>carte-3.xml</ident> disponibles dans votre dossier
<ident>Travaux</ident>; vous y trouverez aussi des fichiers images des
rectos et versos des cartes concernées. </item>
</list></div>
<!-- -->

<div><head>Exploration de TEI par Roma</head>
<p>Roma est également un outil apte à l'exploration des
possibilités du système TEI.</p>
	 <list>
	   <item>Selectionner l'onglet [Modules] pour voir les
	   modules disponibles ou déjà pris</item>
	   <item>Selectionner le nom d'un module pour  voir les
	   éléments qu'il contient, et pour en faire le choix.</item>
 <item>(On peut par défaut supprimer  tous les  éléments d'un module, ou
 bien en selectionner tous) </item>
<item>Selectionner le nom d'un element pour voir sa documentation
complète</item>
	 </list>
       </div>
      
       <div>
	 <head>Autre possibilités de personalisations</head>
<p>Par exemple, dans notre schema...
 <list><item>on veut contraindre les valeurs légaux de l'attribut  <att>type</att> sur
 <gi>div</gi>
 </item>
 <item>on veut ajouter un nouveau élément <gi>saintName</gi> pour encoder les noms
  des saints (pourquoi pas?) </item>
 <item>on veut insister que chaque <gi>text</gi> contienne
 un  <gi>div type="recto"</gi> suivi d'un <gi>div type="verso"</gi></item>
 </list>
 </p>
       </div>
     
   <div><head>Modification des valeurs legales pour un attribut</head>
     <list type="ordered">
     	<item>En Roma, selectionner l'onglet Modules pour voir les modules present dans votre schema. Cliquer sur <ident>textstructure</ident></item>
     	<item>Une liste des elements disponible dans ce module s'affiche. Retrouver la ligne concernant l'element <gi>div</gi> et cliquer sur le lien <code>Changer les attributs</code> a droite </item>
     	<item>Une liste des attributs disponibles sur cet element s'affiche. Retrouver l'attribut <att>type</att> et cliquer sur son nom, a gauche.</item>
     	<item>Dans la formulaire qui s'ouvre, faire les modifications suivante:
     		<list><item>selectionner <val>no</val> pour la mention <label>Facultatif</label></item>
     			<item>selectionner <val>yes</val> pour la mention <label>Liste fermee</label></item><item>Dans le champs <label>Liste des valeurs</label> taper <code>recto,verso,obliteration,message,destinataire</code></item><item>Cliquer sur le bouton rouge Save </item></list></item>
     		<item>Selectionner l'onglet <ident>Schema</ident> et regenerez votre schema</item>
     </list>
   </div>    
       <div>
	 <head>Qu'est ce qu'on vient de faire?</head>
	 <p>Notre fichier ODD contient maintenant  :
	   <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="full"><elementSpec ident="div" module="textstructure" mode="change"><attList><attDef ident="type" mode="change" usage="req"><valList type="closed" mode="replace"><valItem ident="recto"/><valItem ident="verso"/><valItem ident="obliteration"/><valItem ident="message"/><valItem ident="destinataire"/><!-- ... --></valList></attDef></attList></elementSpec></egXML>
 </p>
	 <p>Nota: on peut ajouter de documentation directement dans l'ODD:
       <egXML xmlns="http://www.tei-c.org/ns/Examples"
	      rend="full"><valItem ident="obliteration"><desc>contient
       le texte d'une obliteration quelconque sur une carte postale</desc></valItem></egXML>
 </p>
<p>Recréer le schema, et voir l'effet de ces changements avec Oxygen...</p>
       </div>
<!--
       <div>
	 <head>Ajout d'un élément</head>
	 <p>Pour ajouter un élément il faut considérer:
 <list><item>son nom, sa description</item><item>ses
 attributs</item><item>son contenu</item><item>sa contexte (i.e. dans
 quels autres éléments il peut apparaitre</item></list>
 </p>
	 <p>La systeme de classes TEI peut nous aider a répondre a toutes
	 ces questions (sauf la premiere).</p>
       </div>
       <div>
	 <head> La systeme de classes TEI</head>
	 <list>
	   <item>La TEI distingue plus que 500 éléments, </item>
	   <item>Une organisation en classes facilite la comprehension,
	   la modularité, et la modification.</item>
	   <item><term>classes "Attribute"</term>: chaque membre de la
	   classe porte des attributs en commun </item>
	   <item><term>classes "Model"</term>: chaque membre de la
	   classe peut apparaitre dans les memes locations hierarchiques</item>
	   <item>les classes sont aussi classables en classe</item>
	   <item>un élément peut etre membre de plusieures classes,
	   sans distinction de module d'origine.</item>
	 </list>
       </div>
       <div>
	 <head> Attribute Classes</head>
	 <list>
	   <item>Les classes attributs portent un nom commencant en  <hi>att.</hi>; ex. <term>att.naming</term>,
	   <term>att.typed</term></item>
	   <item>chaque membre de la classe <code>att.naming</code>
	   en hérite les attributs <att>key</att> et <att>ref</att>;
	   chaque membre de la classes
 <code>att.typed</code> en hérite  <att>type</att> et
 <att>subtype</att></item>
	   <item>Si on veut qu'un élément porte l'attribut
	   <att>type</att> on n'a pas besoin de redéfinir cet attribut;
	   on n'a qu'a ajouter l'élément a la classe.</item>
	 </list>
       </div>
       <div>
	 <head>Une classe importante: att.global </head>
	 <p> Tout élément est membre de la classe <hi>att.global</hi>
	 par defaut;
 cette class fournit, entre autre: <list
 type="gloss"><label><att>xml:id</att></label><item>identifiant
 unique</item><label><att>xml:lang</att></label><item>langage du
 contenu de l' élément</item><label><att>n</att></label><item>chiffre
 ou nom pour l' élément</item><label><att>rend</att></label><item>code
 pour la rendition original de l' élément.</item></list> 
	 </p>
       </div>
       <div>
	 <head> Model Classes</head>
	 <list>
	   <item>Les classes dites "Model" portent un nom commencant en
	   <hi>model.</hi>; et terminant en <code>part</code> ou
	   <code>like</code>.  ex. <term>model.pPart</term>,
	   <term>model.pLike</term> </item>
 <item>Les suffixes explicite un peu la maniere de se servir de la
 classe: ex. membres de la classe <hi>model.pLike</hi> sont des objets
 qui  <q>ressemblent aux</q> paragraphs, en particulier qui sont permis aux memes
 lieux dans un document que les  paragraphes
		 </item>
 <item>par contre, les membres de
		 <hi>model.pPart</hi> sont des éléments qui peuvent
		 apparaitre  <emph>dans</emph> un paragraphe. </item>
 <item>En effet cette classe rassemble des sous classes:
		 <list><item><hi>model.pPart.edit</hi>  éléments pour
		 interventions editoriales ex. <gi>corr</gi>,
		 <gi>del</gi>
		 etc. </item>
 <item><hi>model.pPart.data</hi>éléments
		 qui ressemblent aux données classiques, tels que
 <gi>name</gi>, <gi>num</gi>, <gi>date</gi> etc.</item><item>
 <hi>model.pPart.msdesc</hi> éléments specifique a la description des
 manuscrits tel que <gi>seal</gi> , <gi>origPlace</gi>... </item></list>
 </item></list>
       </div>
-->
 <!--      <div>
	 <head>Basic Model Class Structure</head>
	 <p>Simplifying wildly, one may say that the TEI recognises
	   three kinds of élément:
	   <list type="gloss"><label>divisions</label><item>high level major divisions of texts</item><label>chunks</label><item>éléments such as paragraphs appearing within texts
	       or divisions, but not other chunks</item><label>phrase-level éléments</label><item>éléments such as highlighted phrases which can
	       occur only within chunks</item></list>
	   </p>
	 <p>There are <q>base model classes</q> corresponding with
	   each of these, and also with the following groupings:
	   three: 
	   <list type="gloss"><label>inter-level éléments</label><item>éléments such as lists which can appear either in
	       or between chunks</item><label>components</label><item>éléments which can appear directly within texts or text
	       divisions</item></list>
	   </p>
	 <p>And yes, there is a class <hi>model.global</hi> for
	   éléments that can appear <emph>anywhere</emph> — at any
	   hierarchic level.</p>
       </div>
 -->      <div>
	 <head>Ajout d'un élément nouveau <gi>saintName</gi></head>
	 <list type="gloss">
	   <label>Il ressemble a quels autres éléments?</label>
	   <item>C'est une espece de nom, evidemment</item>
	   <label>Il peut contenir quoi?</label>
	   <item>Il peut contenir que de texte.</item>
	   <label>Ou est-ce qu'il peut apparaitre?</label>
	   <item>A l'interieur des titres, des phrases, des paragraphes, etc. mais 
	   pas entre les deux.</item>
	 </list>
	 <p>Conclusion:
 <list><item>on le fait membre de la classe
 <hi>model.nameLike</hi></item>
 	<item>son contenu est definie par
 macro.xText</item>
 </list></p>
       </div>
       <div>
	 <head>Roma: Definition d'un nouveau élément</head>
	 <p>
	   <graphic url="../Graphics/Roma-saintname1.png"/>
	 </p>
       </div>
       <div>
	 <head>Definition de modele de contenu</head>
	 <list>
	   <item>Le contenu d'un élément TEI est défini en langage
	   RELAXNG</item>
	   <item>La plupart des éléments  TEI définissent leur contenu
	   par référence aux 
 <emph>classes</emph> d'élément plutot que par reference à des éléments
 specifiques.</item>
	   <item>Il existe des modeles prédéfinis tres utiles, par exemple:
 <list type="gloss"><label>macro.paraContent</label><item>le contenu
 des éléments qui ressemblent aux  paragraphes</item>
 <label>macro.phraseSeq</label><item>séquence de caracteres melangé
 d'éléments de la classe model.phraseLike </item>
 <label>macro.xText</label><item>sequence de caracteres melangé avec
 l'élément <gi>g</gi> (qui sert a encoder les caracteres
 non-Unicode)</item>
</list>
 </item>
	 </list>
       </div>
       <div>
       	<head>Définition d'un nouveau élément 2</head>
	 <p>
	   <graphic url="../Graphics/Roma-saintname3.png"/>
	 </p>
       </div>
       <div>
	 <head>Qu'est-ce qu'on vient de faire?</head>
	 <p>On a ajouté une specification pour notre nouvel élément:
	 <egXML xmlns="http://www.tei-c.org/ns/Examples"
	 rend="full"><elementSpec ident="saintName"
	 ns="http://www.example.org/ns/nonTEI" mode="add"><desc>
	 contains the name of a saint.</desc><classes><memberOf key="model.nameLike"/><memberOf
	 key="att.typed"/></classes><content><rng:ref
	 name="macro.xtext"/></content></elementSpec></egXML>
 </p>
	 <p>Nota: ce nouveau  élément n'est <emph>pas</emph> un élément
	  TEI! Il appartient donc à une autre espace de noms.
 </p>
       </div>
       <div>
	 <head>Autre contraintes</head>
	 <list>
	   <item>On peut contraindre le contenu d'un élément, ou la
	   valeur d'un attribut en se servant des <term>datatype</term>
	   (par exemple, pour insister que le contenu de l'élément
	   <gi>date</gi> soit vraiment une date)</item>
	   <item>La TEI prédéfinit plusieurs
 <term>macros</term> pour répondre à cette possibilité. Par exemple
 <list type="gloss"><label>data.word</label><item>a single word or token</item><label>data.name</label><item>an XML Name</item><label>data.enumerated</label><item>a single XML name taken from a documented list</item><label>data.temporal.w3c</label><item>a W3C date</item><label>data.truthValue</label><item>a truth value (true/false)</item><label>data.language</label><item>a human language</item><label>data.sex</label><item>human or animal sex</item></list>
 </item>
	   <item>Ou on peut créer ses propres contraintes avec le
	   langage Schematron</item>
	 </list>
       </div>

       <div>
	 <head>Contraintes Schematron</head>
	 <list>
	   <item>Une spécification d' élément peut contenir un élément
	   <gi>constraintSpec</gi> contenant des règles exprimés en
	   langage ISO Schematron </item>
	 </list>
	 <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="full">
	   <elementSpec xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="body" module="teistructure" mode="change">
	     <constraintSpec mode="add" ident="bodyLim" scheme="isoschematron">
	       <constraint>
		 <s:assert test="tei:div/@type='recto' and 
				 tei:div/@type='verso' and
				 count(tei:div)=2">
le body doit contenir un recto et un verso et rien de plus
	 </s:assert>
	       </constraint>
	     </constraintSpec>
	   </elementSpec>
	 </egXML>
	 <p>A noter...
	 <list>
	   <item>Pour ajouter de telles règles, il faut éditer le fichier
	   ODD. Roma ne vous aide pas.</item>
	 <item>L'implantation de telles règles n'est pas forcément
	 disponible avec tout processeur XML.</item>
	 </list>
	 </p>
       </div>


    </body>
  </text>
</TEI>
