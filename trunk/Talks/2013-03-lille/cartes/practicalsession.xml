<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI à la carte: an exercise in tagging</title>
        <author>Lou Burnard</author>
      </titleStmt>
      <publicationStmt>
        <publisher>MEET</publisher>
        <availability>
          <p>Freely available for use and derivative works under a Creative Commons Attribution
            license.</p>
        </availability>
        <date>July 2012</date>
      </publicationStmt>
      <sourceDesc>
        <p>Expanded version of material prepared for previous workshops at Aussois, Tours, Lyon and
          elsewhere</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change when="2012-07-03">LB finalising version for DHOXSS</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>


      <head>Before you begin...</head>
      <p>In this exercise you will be using a few of the many tools available for creating and
        processing TEI XML files. We'll mostly be using the XML editor Oxygen, which should be
        installed on your work stations already: you can start it up by just clicking on the Oxygen
        XML Editor icon on the desktop, or selecting it from the Programs menu in the usual way.
        <!-- graphic of XML Editor icon needed -->
      </p>
      <p>You'll also need some sample files to work with. We've provided all of these in a zip file,
        which you can download from <ref target="http://bit.ly/Nj0yce">http://bit.ly/Nj0yce</ref>.
        Before you begin, please download this zip file to your desktop, and click on it to unpack.
        This should give you a folder called <ident>Practical</ident> containing everything you will
        need, notably a copy of this tutorial. </p>

      <p>In two hours we can't do more than sketch some of the things that markup makes possible.
        But we hope to give you some idea about the following topics: <list>
          <item>creating a TEI XML document from scratch : the born digital document</item>
          <item>using a customised TEI schema to mark up plain text and Word files</item>
          <item>the range of markup possible</item>
          <item>using markup to retrieve and display from a set of documents</item>
        </list></p>
      <div>
        <head>The born-digital document</head>
        <p>Oxygen makes it easy to <list>
            <item>create a born digital XML document</item>
            <item>add XML tags to a document</item>
            <item>continously validate the document against a simple schema</item>
            <item>display the document in various ways</item>
          </list>
        </p>
        <p>Oxygen can be configured for use in several languages, including English, French, German,
          and Italian. If you'd prefer to work in some language other than English, use the
          Preferences command, the first option on the Options menu (fifth from left on the menu
          bar), to change it. This tutorial mostly assumes you are using the English version, though
          some of the illustrations are taken from the French version, and so may not match exactly
          what you see on the screen.</p>
        <!--
<p>Si Oxygen n'est pas encore installé sur votre poste, vous pouvez
l'installer facilement:
<list>
<item>copiez sur votre bureau les fichiers
<ident>oxygen-licence.txt</ident> et <ident>oxygen.exe</ident> (pour
Windows) ou <ident>oxygen.zip</ident> (pour MAC). Si ces derniers ne
sont pas disponibles, vous pouvez les télécharger du site Oxygen à
<ptr
target="http://www.oxygenxml.com/download_oxygenxml_editor.html"/>
</item>
<item>Cliquez sur l'icone du fichier approprié à votre machine et
suivez la procedure d'installation indiquée.</item>
<item>La première fois que vous lancerez le
logiciel, il vous demandera de copier-coller le contenu du licence,
qui est contenu dans le fichier <ident>oxygen-licence.txt</ident>. Ce
licence est temporaire: vous pouvez en telecharger une autre du site
ci dessus.</item>
</list></p>
    -->
        <div>
          <head>The born-digital document</head>
          <p>The TEI is not just for encoding ancient documents from their paper or stone originals.
            It's also useful for the creation of new documents, starting <foreign>ex
              nihilo</foreign>....</p>
        </div>
        <div>
          <head>Creating a document</head>
          <list>
            <item>Start Oxygen. </item>
            <item>Click on the New icon top left (or choose New from the File menu, or type CTRL-N)
              to open the New dialog box )</item>
            <item>Oxygen offers you a choice of various pre-defined templates for your new document,
              grouped under four headings ("Recently used", "New Document", "Global templates", or
              "Framework templates" in English). These groups are organised hierarchically : you can
              open or close subgroups by clicking the blue key icon to the left of the folder icon. </item>
            <item>Open the last group <ident>Framework templates</ident>, then within it <ident>TEI
                P5</ident>, then <ident>Bare</ident>, to choose a very simple TEI schema. </item>
            <item><graphic height="5cm" url="newbare.png"/></item>
            <item> Click the <ident>Create</ident> button at the bottom. Oxygen displays a minimal
              TEI document, which we will now complete.</item>
          </list>
          <p>By default, Oxygen shows you a number of windows. In the centre is the main workspace,
            containing your document. At lower left, you can see the <ident>Summary</ident> window
            which gives you a view of the hierarchic structure of your document. </p>
          <p><graphic height="2cm" url="outline-1.png"/></p>
          <p>As you see, a TEI document is divided in two : the upper part, tagged
              <gi>teiHeader</gi> contains metadata ; the lower part, tagged <gi>text</gi> contains
            the data. </p>
          <p><graphic height="5cm" url="baresummary.png"/></p>
          <p>As before, you can open or close parts of the Outline display by clicking the blue key
            icon. If you click on a tag name in the Outline view, the corresponding part of the
            document itself is selected in the Editor window.</p>
          <p>At the bottom of the Editor window you can see three buttons labelled Text Grid and
            Author. These change the way the document is displayed : for the moment, since we are
            not afraid of tags, we will stay in the default Text mode, but you may like to click on
            the others to see what they do. </p>
          <p>Let's begin by giving our document the three pieces of essential metadata needed for
            every TEI document : a title, a note on its publication, and another note on its
            sources. Oxygen has proposed some default text for each which needs to be completed or
            corrected ... <list>
              <item>Replace the word <q>Title</q> (between the tags <code>&lt;title></code> and
                  <code>&lt;/title></code>) by a title for your document. It's up to you to find a
                good title! Something like <q>Experimenting with Oxygen</q> will do, but you may
                want to be more specific. </item>
              <item>Replace the two other bits of text by some appropriate phrases. For example, you
                might put something like <q>Unpublished draft</q> or <q>Distributed on my blog</q>
                in the publication statement, depending on your ambitions for this text. For the
                  <gi>sourceDesc</gi>, even though there is no pre-existing source, you are required
                to put something: we suggest <q>An original work, produced as part of a DH Oxford
                  Summer School Workshop in 2012</q>. </item>
            </list>
          </p>
          <p>Oxygen always tries to keep your document valid. What happens if you mess things up? <list>
              <item>Delete a few letters within any tag : for example, change
                  <gi>publicationStmt</gi> to <gi>publicat</gi>. </item>
              <item>Oxygen does its best. First, it changes the corresponding end-tag to match (so
                it becomes <code>&lt;/publicat></code>): the document is thus still well formed. But
                it's no longer valid -- there is no such element as <gi>publicat</gi> in the schema.
                Consequently the faulty tags are underligned in red, there's an error message at the
                foot of the screen, and on the right there are some red marks indicating visually
                where the error occurs. .</item>
              <item>Click on one of the red marks and see if you can follow the logic by which one
                error leads to another.</item>
              <item>Click CTRL-Z (or choose <ident>Undo</ident> from the <ident>Edit</ident> menu)
                to return to a state of grace ... you will see that the little red square at top
                right becomes green when all errors have been corrected.</item>
            </list>
          </p>
          <p>Oxygen also encourages you to keep your document valid. It can offer you a choice of
            tags to enter, but it will offer only those which are valid at the current point in the
            document. <list>
              <item>Put the cursor at the end of the 7th line, or the start of the 8th, between
                  <code>/title</code> and <code>/titleSmt</code>;</item>
              <item>type <code>&lt;</code> and pause ;</item>
              <item>the green square becomes red because you have not yet entered the name of an
                element.</item>
              <item>Oxygen suggests a list of the tags which can legally appear at this place in the
                document : at this point, you can add an <gi>author</gi> element, or another
                  <gi>title</gi>, close the <gi>titleStmt</gi>, or insert an XML comment. </item>
              <item>Let's take the first suggestion : select <gi>author</gi> and hit RETURN. Oxygen
                will insert both start and end-tags for the new element.</item>
              <item>Note that the cursor stays inside the opening tag <gi>author</gi> just in case
                you now want to enter some attributes for it (type a space if you are curious to see
                what attributes are available). Move the cursor one character to the right and type
                your name, since you are the author of the file.</item>
              <item>You may like to experiment to see what other elements are available at other
                points in the document : as you will see, this is a really simple schema with very
                few elements.</item>
            </list>
          </p>
        </div>
        <div>
          <head>Adding text to the document</head>
          <p>Now let's start adding some real content to our document. It's up to you what you write
            and (within limits) how you tag it. </p>
          <p>To start with, how will your document be organized? A document containing just one
            paragraph, though possible, seems unlikely. The schema we are using allows you to mark
            up : <list>
              <item>sections or subsections or subsubsections or ... (we will call them all
                divisions). Tag these with <gi>div</gi>
              </item>
              <item>headings for the divisions. Tag these with <gi>head</gi></item>
              <item>lists, also containing headings, labels and items. Tag these with <gi>list</gi>,
                  <gi>head</gi>, <gi>label</gi>, or <gi>item</gi> as appropriate</item>
              <item>paragraphs. Tag these with <gi>p</gi></item>
            </list> Let's go !</p>
          <p>In the rest of this part of the tutorial we will start showing you some of the tricks
            and short cuts provided by the Oxygen program. . </p>
          <p>Firstly, a big question. Obviously, the program can't generate the actual content of
            the document we're writing, but do we really have to type in all the tags as well ? Not
            at all : Oxygen is there to help. You've already seen how it can suggest a list of
            possible elements to be inserted at a given point in the text. It can also propose tags
            to wrap around any part of the document. </p>
          <list>
            <item>With your mouse, select <emph>the whole content</emph> of the <gi>body</gi>
              element, i.e. the start and end tags for the <gi>p</gi> and the three words it
              contains <code>&lt;p>Some text here&lt;/p></code>. </item>
            <item>Type CTRL-E or choose <ident>XML Refactoring - Surround with Tags </ident> from
              the <ident>Document</ident> menu.</item>
            <item>Oxygen offers you a choice of all the elements it knows about. Choose the one that
              makes sense here : <gi>div</gi>. Then click on <ident>Accept</ident></item>
            <item>This <gi>div</gi> element will contain the first section of your document. You
              might like to give it a title, by inserting a <gi>head</gi> element before its first
              paragraph. </item>
            <item>It would also be useful to number your divisions explicitly : for that you can use
              the attribute <att>n</att> which is available on every TEI element, including
                <gi>div</gi>. </item>
            <item>Put the cursor <emph>inside</emph> the <gi>div</gi> tag, just before the &gt; and
              type a space. Oxygen offers a list of available attributes. </item>
            <item>Choose <att>n</att> and hit RETURN. Oxygen warns you that you must supply a legal
              value for this attribute, and the cursor remains inside the quote marks.</item>
            <item>Type (for example) <code>1</code>, and your document becomes valid once more.
            </item>
          </list>
          <p>Your document should now look something like this :</p>
          <p><graphic height="3cm" url="../../../Graphics/Oxy12/body-shot.png"/></p>
          <p>Now you need to add some text to the paragraph : hopefully a bit more interesting than
              <q>some text here</q> . Describe your first reactions to Oxygen ; give us your views
            on the current economic crisis ; write about your childhood -- it's up to you! The point
            of the exercise is to get you used to the idea of writing in an XML editor as easily as
            you would write in a word processor.</p>
          <p>No doubt you will soon feel the need for a new paragraph, or for a bulleted list. How
            do you close the current paragraph and start a new one? Just hitting RETURN a couple of
            times doesn't seem to work. Is there a better way of doing this without having to type
            the tags <code>&lt;/p>&lt;p></code> ? Of course there is. </p>
        </div>
        <div>
          <head>Divide and conquer</head>
          <p>Let's assume you have several hundred words in one paragraph, which you now want to
            split up into several paragraphs. </p>
          <list>
            <item>Put the cursor at each point where you want to split the paragraph </item>
            <item>Type ALT-SHIFT-D or choose <ident>XML Refactoring - Split element</ident> from the
                <ident>Document</ident> menu.</item>
          </list>
          <p>You can of course do exactly the same thing to split up your one <gi>div</gi> element.
            Take care that you choose the right place to do the splitting though. You must put the
            cursor <emph>between</emph> two <gi>p</gi> elements, not within one of them.</p>
        </div>
        <div>
          <head>Making tagged text readable</head>
          <p>Are you beginning to worry about the amount of tagging in your document ? </p>
          <p>You can tidy up the tagging you've inserted by clicking on the "Format and Indent"
            button, typing CTRL+SHIFT+P, or choosing <ident>Source->Format and Indent</ident> from
            the Document menu. But maybe you'd rather just get rid of all the tags ?</p>
          <list>
            <item>At the bottom of the screen there are three tabs : Text Grid and Author. Choose
              the last of these. The way your document is displayed now looks quite different, and
              there is also a new menu TEI P5. Choose <ident>Tags Display Mode</ident> and look at
              the various possibilities it offers</item>
            <item>You can display the tags as little icons, large icons, or not at all</item>
            <item> Note also that your document is now formatted -- different elements have
              different colours, and the layout is more like that of a word processor. </item>
            <item>In Author mode, you <emph>can</emph> split an element just by hitting RETURN
              twice. Try it!
              <!-- Attention : en mode auteur
Oxygen vous propose plusieurs éléments possibles qui ne sont pas
disponibles dans le schéma Bare : il faut s'en méfier.--></item>
          </list>
          <p>Later on, we will see how you can control the formatting of your document using a
              <term>stylesheet</term>.</p>
          <p>After all this work, don't forget to save your document ! </p>
        </div>
      </div>


      <div>
        <head>TEI a la carte : customization</head>
        <p>In the rest of this session, we'll see how TEI markup might be used in an imaginary (but
          quite plausible) research project. We'll discuss what markup scheme the project will need,
          create a TEI schema to support it, and do some experimental markup using it.</p>
        <p>As you probably don't know, the late Marcel Virgolos has long been recognised as an
          expert on the history and evolution of the 20th century postcard. Following his untimely
          demise, we have received permission from his executors to create a digital research
          archive of some parts of his unique personal collection of 100,000 mostly used postcards
          of all kinds in order to further the progress of serious cartophilological studies. We've
          put digital images of a tiny sample from the collection in the folder <ident>Cards</ident>
          inside your <ident>Practical</ident> folder.</p>

        <div>
          <head>Sample text</head>
          <p>In this part of the exercise we will markup one postcard, respecting its organization
            into recto and verso, and the components of its address, etc. To make your life easier,
            we have prepared a transcription already for you, so you don't need to do quite so much
            typing as in the previous exercise... </p>
          <p>Here's the recto of the card : <figure>
              <graphic url="Cards/19701026_0004r.jpg" width="70%"/>
            </figure></p>
          <p>And here's the verso : <figure>
              <graphic url="Cards/19701026_0004v.jpg" width="70%"/>
            </figure></p>
          <p>Of course the first part of our research project was spent arguing about how to markup
            these documents, and if we had more time we'd rerun some of that discussion now. We used
            a TEI tool called Roma to create an appropriate subset of our needs, expressed as a
            schema called <ident>virgolos</ident> in honour of our <foreign>cher maître</foreign>.
          </p>
        </div>

        <div>
          <head>Create a new document</head>

          <p>As before, open Oxygen and click on the New icon at top left to open the New document
            dialogue. This time, when asked to choose which document type to use, select <ident>XML
              Document</ident> from the <ident>New Document</ident> section. Then click on the
            Customize button at the bottom of the dialog box, to open the Customize Editor dialog
            box. At the far right of the box labelled <ident>Schema URL</ident> there is a small
            triangle which you can click to open a drop down menu. Select <ident>Browse for local
              file</ident>, and navigate to the file <ident>virgolos.rnc</ident> in the
              <ident>Practical</ident> folder. Press the <ident>Create</ident> button at the bottom.
            We will use this schema, which is rather less minimalist than the one we used in the
            first exercise.</p>
          <list>
            <item>As before, Oxygen gives you the basic TEI structure, with a few extra components. </item>
            <item>Complete the TEI header just as you did before. We suggest the following as title
                <q>The Bathing Beach, Brighton, 1846 : digital edition of card 19701026_0004 from
                the Virgolos collection</q>. For the publication statement, something like
                <q>Unpublished sample, produced as part of the DH Summer School Oxford 2012</q>
              would be fine.</item>
            <item> For the source description, if you like, you could include all the bibliographic
              information from the verso of the card, like this: </item>
          </list>
          <p><graphic url="sourcedesc.png" width="60%"/></p>

        </div>

        <div>
          <head>Adding text to the document</head>
          <p>You can, of course, make your own transcription But this time we propose the following
            method: <list>
              <item>Check that your cursor is <emph>between</emph> the <code>&lt;body&gt;</code> and
                  <code>&lt;/body&gt;</code> tags in your empty document </item>
              <item>Choose <ident>Document -> File -> Insert File</ident> from the menu bar
                  (<emph>Not the File Menu on the menu bar, but the one on the Document
                Menu</emph>)</item>
              <item>Navigate to the file <ident>card-0004.txt</ident> which you will find in the
                  <ident>Cards</ident> folder , select it, and click Open.</item>
              <item>Your document is full of red lines but don't panic! we will sort that out in a
                moment. Look at the error message at the foot of the screen and see if you
                understand it.</item>
            </list>
          </p>
        </div>

        <div>
          <head>Adding structure to the body of a document</head>
          <p>The structure of a document is important. As we discussed earlier, every card,
            including this one, has<list>
              <item>two divisions ... to be tagged with <tag>&lt;div type="recto"></tag> and
                  <tag>&lt;div type="verso"></tag> respectively </item>
              <item>inside the verso (in this case) there is a further division : one part contains
                the message, and the other contains an address and other information about the
                destination of the card, such as the postmark, postage stamp etc. </item>
              <item>Our markup should distinguish all these things. Note that we think this approach
                will be more useful than simply mimicking the physical layout of the card -- we have
                a picture of it, after all.</item>
            </list> Let's go !</p>


          <list>
            <item>Select all the text you just added </item>
            <item>Type CTRL-E and choose <code>div</code> from the list of available tags ; our
              schema requires you also to specify what kind of division this, using the
                <att>type</att> attribute. Choose "recto" from the drop down list and then click
                <ident>Accept</ident></item>

            <item>Put the cursor after the word <q>1846</q> and use SHIFT-ALT-D or some other way of
              splitting the division as you did in the previous exercise.</item>
            <item>The bit of text "Beach view...and mats" describes the graphic. The tag for this is
                <gi>figDesc</gi>. Select that stretch of texts, type CTRL-E and wrap a figDesc round
              it. </item>
            <item>The bit of text "The Bathing ... 1846" is the caption of a graphic. The tag for
              this is <gi>head</gi>. Select that stretch of texts, type CTRL-E and wrap a head round
              it. </item>
            <item>The three elements you've now marked up (<gi>graphic</gi>
              <gi>figDesc</gi>
              <gi>head</gi>) together form a <gi>figure</gi>. Select all three of them and wrap a
              <gi>figure</gi> round them. The red lines at the start of your text should now all have gone.
              Onward!</item>
          </list>
          <p>Now for the verso ... The plain text mixes up transcription of things written on the
            card and brief notes describing various kinds of stamp added to it, in a rather
            confusing way. Our markup will sort that out. Our aim is to separate the division
            containing the verso into two subdivisions : one (of type <code>message</code>)
            containing the transcribed message, and the other (of type
            <code>destination</code>containing all the information about the sending of it -- the
            address, the stamps, etc. We will use the <gi>p</gi> element for paragraphs of
            transcribed text, and within that <gi>stamp</gi> for the various kinds of stamp. We will
            also mark up the various components of the address. </p>
          <p>Before we begin, however, we have to decide what to do with the graphic. We hope you
            agree that there is a difference between the status of the graphic for the recto and
            that for the verso. We treated the recto as a figure within our digital version, but the
            verso is something parallel to the transcription, not part of it, in the way that (if we
            had them) digital images of the stamps might be. Hence our suggestion below. But you
            should feel free to experiment with other approaches or argue about the topic. <list>
              <item>Change the value <code>recto</code> inside the the div tag at the start of the
                verso into <code>verso</code>. Type a space. A list of other available attributes
                appears.</item>
              <item>Choose <ident>facs</ident> from the list. Its value should be the string
                  <code>197001026_004v.jpg</code>, which is currently the value for the
                  <att>url</att> attribute on the existing <gi>graphic </gi>element. Cut and paste
                this string into the right place, and then delete the rest of the <gi>graphic</gi>
                element : we don't need it.</item>
              <item>Now select the whole of the text (i.e. from "You" to "OXFORD") and type CTRL-E
                to surround it with a single <gi>p</gi>. </item>
              <item>While you're there, wrap another <gi>div </gi> element round the whole thing
                too. Inside the start-tag for <gi>div</gi>type a space, and select <att>type</att> from the list of attributes available. Press return and you will see what values are predefined for this attribute:  choose  <code>message</code>.</item>
              <item>Almost all the red lines disappear : can you see why we still have a couple
                associated with those ampersands? The error message at the bottom of the screen may
                help.</item>
              <item>That's right : there are just a couple of characters which are magic inside an
                XML document, and hence need to be treated specially. The pointy bracket is one (for
                obvious reasons) and the ampersand is another. Just replace the ampersands with the
                sequence <code>&amp;amp;</code>, so that it now reads <code>Brighton &amp;amp;
                  Hove</code>
              </item>
              <item>The little green square reappears ! Have we finished? Sorry, no : a document can
                be valid while still containing many lies ... and lies can also be dangerous : to
                see why, hit the Indentation button on the toolbar (or type CTRL-SHIFT-P). </item>
            </list>
          </p>
          <p>Since the line endings are not explicit in the markup, Oxygen is not obliged to respect
            them when formatting the display. To be both honest and explicit, we need to separate
            the paragraphs in the message from each other and the signature, and we also need to
            separate the descriptive text about the stamps from the transcribed text. </p>
          <list>
            <item>Bring back the original display by typing CTRL-Z. </item>
            <item>Split the one paragraph into several, by pressing SHIFT-ALT-D with the cursor
              positioned after the words <q>is</q>, <q>Fitzherbert</q>, <q>Mama</q>, and
                <q>vermilion</q></item>
            <item>Now put the cursor between the end of the paragraph containing the word
                <q>Mama</q> and the start of the next paragraph, i.e. <emph>between </emph> the
                <code>&lt;p></code> and the <code>&lt;/p></code>. Type SHIFT-ALT-D to split the inner
              division.</item>
            <item>Now that we have separated the message out as a separate division, it's possible
              to mark up some of its internal features. The word <q>Mama</q> isn't part of the
              message -- it's a signature, for which the element <gi>signed</gi> is provided. You
              can fix this just by retyping the tags, or, if you prefer, put the cursor inside the
                <gi>p</gi> start-tag, and select <ident>Document - XML refactoring - Rename
                element</ident> (ALT-SHIFT-R). Then choose <ident>signed</ident> from the list of
              available elements and press Return. </item>

            <item>The remaining <gi>div</gi> contains three stamp descriptions and an address:
              according to our schema, its <att>type</att> value should be <code>destination</code>
              : make it so. </item>
            <item>Now tag each of the three stamp-descriptions with the <gi>stamp</gi> element (we
              leave it to you whether you do that by making a single <gi>stamp</gi> element and
              splitting it, or by selecting each description and enclosing it with CTRL-E)</item>
            <item>Lastly, let's deal with the addressee. Select the whole of the address text and
              (using CTRL-E) tag it as <gi>address</gi>. Red line reappears! That's because the
              components of an <gi>address</gi> must be distinguished : you cannot have just plain
              text inside this tag. You could markup those components of the address which are names
              (using <gi>name</gi>) and those which make up a street address (using
              <gi>street</gi>); or you could just tag each line of the address separately using
                <gi>addrLine</gi>. You could even do both (put the names etc.<hi rend="italic">
                inside</hi> the address lines, if you do)... As is often the way in the TEI, it's Up
              To You. </item>
          </list>
        </div>

        <div>
          <head>Reality check</head>
          <p>As you've already seen, Oxygen can display the hierarchic structure of the document --
            if you look in the Summary window to the left and expand some of the buttons there you
            should now see something like this : </p>
          <p><graphic height="14cm" url="card-structure.png"/>. </p>
          <p>Have we finished our markup now? </p>

          <p>Clearly there is no simple answer to this question. We've marked up the basic structure
            of the document in such a way that we can identify and display its components in various
            ways (we'll see some of those later). But we haven't marked up everything possible
            within that structure. We'll come back to this point at the end of the exercise. </p>
        </div>
        <div>
          <head>Importing from Word</head>

          <p>You've seen how to make a valid TEI document out of nothing at all, and out of a plain
            text file. In reality, many documents start life in a word processor such as Word or
            Open Office. Can we work with those too? </p>
          <p>In the <ident>Cards</ident> folder you have a small Word document called <ident>Les
              deux soeurs.docx</ident>. This contains a nicely formatted transcription of a third
            postcard. You may like to open it using Word, just to check that it is in fact a Word
            document, with nice formatting and no sign of any pointy brackets.</p>

          <p>How can we convert this document into TEI-XML?</p>
          <p>We could save it in <soCalled>plain text</soCalled> format and use that ; we could cut
            and paste the text into Oxygen. But either method would be tiresome and would also lose
            information, such as underlining or changes of font size. </p>
          <p>Since this Word file uses formatting in a consistent way, using Word styles, it's
            possible to transform it to XML more or less automatically, losing very little
            information. Oxygen can be configured to do this for you, but we will use a different
            tool for a change. </p>
          <div>
            <head>Using the Garage</head>
            <list>
              <item>Open your Internet browser (use Chrome if this is available), and visit <ref
                  target="http://www.tei-c.org/ege-webclient"
                  >http://www.tei-c.org/ege-webclient/</ref></item>
              <item>Click <ident>Text Documents</ident>. In the list of different formats proposed,
                check the radio button for <ident>Microsoft Word Document(.docx)</ident></item>
              <item>A list of target formats appears to the right. Check the radio button for
                  <ident>TEI P5 XML</ident>.</item>
              <item>At the top of the screen a <ident>Choose File</ident> button appears. Click on
                this and navigate to the file <ident>Les deux soeurs.docx</ident> in your
                  <ident>Cards</ident> folder.</item>
              <item>Click the big <ident>Convert</ident> button ... be patient </item>
              <item>The Garage will send you (after a brief delay) an archive called <ident>Les deux
                  soeurs.zip</ident>. (Note that if you are using Internet Explorer, you may have to
                reassure the software that you really do want to download this dangerous
                file)</item>
              <item>Find this zip archive in your <ident>Downloads</ident> folder, or wherever it
                is, and click on it to unpack. You should find that it contains a folder called
                  <ident>Media</ident> and a file called <ident>tei.xml</ident>. This is the XML
                version of the file.</item>
            </list>
          </div>
          <div>
            <head>Tag translating</head>
            <p>Let's see what OxGarage has made out of our Word file. At least it's a valid TEI
              document, even if it is full of lies...</p>
            <list>
              <item>Start up Oxygen, and open the file <ident>tei.xml</ident> which you just
                created.</item>
            </list>
            <p>Don't look at the TEI Header for the moment : you can complete that later. If you
              look at the summary view, or change briefly to Author mode, you will see that the
              conversion has been able to distinguish the three main components of the verso of the
              card -- the message, the stamps, and the address -- because they were formatted
              differently in the Word file. This makes our life much easier. </p>
            <p>Starting at the end, we can see that the address has been turned into a table, in
              which each row contains a single cell containing one line of the address.</p>
            <list>
              <item>In Text view, put the cursor <emph>inside</emph>any one of the <gi>cell</gi>
                elements</item>
              <item>From the <ident>Document</ident> menu choose the <ident>XML-Refactoring ->
                  Rename Element </ident> command (or type ALT-SHIFT-R).</item>
              <item><p>Oxygen displays this dialogue box </p>
                <p><graphic height="5cm" url="../../../Graphics/rename.png"/></p></item>
              <item>In the <code>New name</code> box, change <code>cell</code> to
                  <code>addrLine</code>, which is the name of the element we want, and check the box
                  <ident>Rename all elements with the same name</ident>
              </item>
              <item>Click <ident>OK</ident> and all the <gi>cell</gi> elements become
                  <gi>addrLine</gi>s. (The document is no longer valid, but we will fix that in a
                moment.)</item>
              <item>We need to remove all the <gi>row</gi> start and end-tags. You can do this by
                just selecting them with the mouse and deleting them, of course. Or, more reliably,
                try putting the cursor on a <gi>row</gi> tag, and selecting the <ident>Document ->
                  XML-Refactoring -> Delete Element Tags </ident> command. Remove the <gi>table</gi>
                tags in the same way.</item>
              <item>Finally wrap the sequence of <gi>addrLine</gi>s that remains in an
                  <gi>address</gi> and you're almost valid again.</item>

              <item>The stamp descriptions have been turned into a list, so we will need to do
                something very similar to them. Convert all the <gi>item</gi> elements to
                  <gi>stamp</gi>s using the Rename Element command again </item>
              <item>To make the document valid, you just need to wrap the stamps and the address
                inside a <gi>p</gi> element, as you did before.</item>
            </list>
            <p>We leave it to you to complete the tagging of this postcard in the same way as you
              did the others. You'll need to introduce some <gi>div</gi> elements at appropriate
              places, and also transfer some information into the Header. Use the postcards you did
              before as a model. If you get bored or finish early, try doing one of the other cards
              as well -- there are three others in the <ident>Cards</ident> folder, but you'll have
              to transcribe them yourself.</p>
            <p>If you get lost or can't finish don't worry. Our suggested version of the complete
              set is available for you to look at in the file <ident>postcard-archive.xml</ident>!
            </p>
          </div>
        </div>
      </div>

      <div>
        <head>Using the markup</head>

        <p>The markup introduced you've carefully introduced is not there for its own sake. You can
          use it to do interesting things with your digital resource. Naturally, since we love
          reading, we tend to think first of how using the markup to transform the appearance of the
          resource or parts of it, into something more legible, as a digital document. But it can
          also can be used to analyse features and structures of the document, to carry out
          intelligent searching across a large number of resources, or simply to catalogue a
          collection of documents.</p>
        <div>
          <head>Transforming for display</head>

          <p>As you've already seen, Oxygen can transform an XML file for display using Author mode.
            How about some other transformations? Why not convert the document into HTML or PDF for
            display on a website? You can try the following on any of the files you prepared
            yourself, on the file <ident>19701026_004.xml</ident>, which contains just one postcard,
            (but not sadly on the file <ident>postcard-archive.xml</ident> , for technical reasons)<list>
              <item>On the tool bar there is a button with a big red arrow. Click on it (or type
                CTRL-SHIFT-T, or select Document -> Transformation -> Apply transformation scenario
                from the menus)</item>
              <item>In Oxygen a <q>transformation scenario </q> associates a document with a
                stylesheet for processing. Some default scenarios are provided for various commonly
                used formats (notably <code>TEI P5 XHTML</code> , <code>TEI P5 EPUB</code>,
                  <code>TEI P5 PDF</code>, <code>TEI P5 DOCX</code>) and you can also define your
                own. Select a scenario that looks interesting, and see what happens when you run the
                transformation, by clicking the <ident>Transform now </ident> button. Experiment
                with the others too !</item>
              <!--              <item>Bien sur, on peut configurer ces transformations à volonté, et en créer des
                nouveaux. Pour vous en donner le goût, on va finir en vous proposant une
                transformation qui n'a rien à faire avec la visualisation.</item>
-->
            </list></p>

          <!--
          <p>La feuille de style qui controle une transformation s'écrit dans un autre langage XML,
            qui s'appelle XSLT : sujet fascinant, mais peut etre pas pour les debutants. Vous
            trouverez quelques exemplaires de feuilles de styles XSLT dans votre dossier. Pour en
            servir, il faut créer une nouvelle transformation en Oxygen <list>
              <item>Cliquez sur la flèche rouge (CTRL-MAJ-T) de nouveau</item>
              <item>Cliquez le bouton <ident>Nouveau</ident> pour ouvrir la fenetre Nouveau
                Scenario. Dans cette fenetre: <list>
                  <item>choisir un nom pour le scenario : on vous propose "texte-brut"</item>
                  <item>specifier la location du fichier XSL souhaité, en cliquant sur le petit
                    icone dossier jaune à droite du champs <ident>XSL URL</ident>. Ceci vous permets
                    de naviguer au dossier <ident>Travaux</ident> : sélectionner le fichier
                      <ident>texte-brut.xsl</ident> et cliquer <ident>Ouvrir</ident>.</item>
                  <item>sélectionnez <ident>Saxon HE 9</ident> du menu <ident>Transformateur</ident>
                  </item>
                  <item>Cliquer <ident>Accepter</ident> pour terminer, et <ident>Transformer
                      Maintenant</ident> pour voir le resultat. </item>
                </list></item>
            </list></p>
          <p>Comme vous voyez, c'est possible de transformer notre document XML ou bien dans un
            format d'affichage, ou bien dans un format d'analyse tres classique. </p>
-->
        </div>
        <div>
          <head>Searching the structure</head>
          <p>One of the key reasons for introducing markup was that it allows us to access and
            identify structural components independent of the document in which they appear. For
            example, we might want a list of just the stamps, or just the dates of posting, for our
            postcards. We don't have time to explain this in detail, but here are a couple of
            indications of what's possible, still using Oxygen.</p>
          <p>At top left of the Oxygen screen there is a little window labelled <ident>XPath
              2.0</ident>. XPath is a W3C-defined standard language for identifying parts of an XML
            structure. We won't explain it in full but show what it can do with a few simple
            examples. </p>
          <list>
            <item>Open the file <ident>postcard-archive.xml</ident> in Oxygen. This contains marked
              up versions of five postcards.</item>
            <item>Type <code>//salute</code> into the XPath box and press return. At the bottom of
              the screen, a table appears containing a row for each occurrence of a <gi>salute</gi>
              element anywhere in the document, with first a full description of where it is to be
              found, and second what it contains. The first line tells is that the text <q>Love
                Kath.</q> is inside the first salute inside the first div inside the second div of
              the first body of the first text of the first TEI inside the root TEIcorpus. </item>
            <item>Now let's try to find all the titles of our cards. Type <code>//title</code> into
              the XPath box and press Return. </item>
            <item>Hmm, not quite what we wanted. We have the title of the whole collection, the
              title of the bibliographic source, the title of the card itself... let's try to be
              more precise. Type <code>//TEI//titleStmt/title</code> instead. This says <q>find any
                  <gi>title</gi> which is directly contained by a <gi>titleStmt</gi> which is itself
                anywhere within a <gi>TEI</gi></q>... which is what we wanted. You should see just
              five lines of results.</item>
            <item>How about picking out the stamps? Type <code>//stamp</code> into the box and we
              will see all the <gi>stamp</gi> elements.</item>
            <item>XPath syntax also allows us to select according to the value of an attribute. Try
                <code>stamp[@type='postage']</code> to see just the postage stamps, as opposed to
              postmarks.</item>
            <item>Lastly, how about all the messages? </item>
          </list>
        </div>
        <div>
          <head>Next steps...</head>
          <p>Have we finished our markup <emph>now</emph>? </p>
          <p>Here are just a few ideas for you to consider if you want to continue working with this
            kind of document: <list>
              <item>Like other hand-written materials, postcards can contain errors, additions,
                corrections, strange spellings, passages which are illegible. The TEI provides
                markup for all of these. </item>
              <item>Postcards typically contain information about real persons and real places at
                specific times. We should separate out these <q>named entities</q> (as they are
                called) in our markup by marking them up as <gi>name</gi>s with an appropriate
                  <att>type</att> for example</item>
              <item> We could also add markup to explain or normalize the entities being named --
                for example, who was <q>Mrs FitzHerbert</q>, and what is the little joke being made
                here?</item>
              <item>In our markup we haven't tried to preserve the original layout or orientation of
                the writing. Maybe in a very precious or obscure postcard that would be useful
                too?</item>
              <item>There are plenty of other digital resources that reference the entities referred
                to here: catalogues of postage stamps, gazeteers and maps of placenames, historical
                biographies, lists of business and publishers, etc. We should be able to link to
                relevant items in such digital resources.</item>
              <item>The postcard itself could have much more metadata added to it : we could add
                keywords describing the picture, or the means of production, or whatever information
                we can discover about the size of the original print edition, the present value of
                the card to collectors, other collections which have copies of it, or the series to
                which it belongs, and so on... </item>
              <item>We could add markup describing the linguistic properties of the writing itself.
                Postcard messages tend to be informal, but still there are some recurrent motifs and
                formulae. We could investigate the semiotics of cartophiliac discourse. </item>
              <item>... and so on!</item>
            </list>
          </p>
          <p>Thinking about such possibilities is something we should do before designing our
            schema. The TEI provides a tool called Roma to help with that job, but that's another
            story.... </p>
        </div>
      </div>
    </body>
  </text>
</TEI>
