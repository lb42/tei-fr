<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI à la carte: travaux pratiques</title>
        <author>Lou Burnard</author>
      </titleStmt>
      <publicationStmt>
        <publisher>MEET</publisher>
        <availability>
          <p>Freely available for use and derivative works under a Creative Commons Attribution
            license.</p>
        </availability>
        <date>July 2012</date>
      </publicationStmt>
      <sourceDesc>
        <p>Expanded version of material prepared for previous workshops at Aussois, Tours, Lyon and
          elsewhere</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change when="2013-03-12">LB trad francaise trop rapide pour Lille</change>
      <change when="2012-07-03">LB finalising version for DHOXSS</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>


      <head>Avant propos.</head>

      <p>Cet exercice vous permet d'experimenter quelques un des
      outils disponibles pour la creation et le traitement des
      fichiers TEI-XML.  Nous allons faire beacoup avec oXygen, mais
      nous allons aussi regarder quelques autres. Vous aurez aussi
      besoin de quelques fichiers qui sont telechargeable en format
      zip de l'adresse <ref
      target="http://bit.ly/Nj0yce">http://bit.ly/Nj0yce</ref>.  Vous
      etes invite de telecharger cet archive et le dezipper avant de
      commencer l'exercice</p>

      <p>En deux heures ce n'est guere possible de tout faire. Mais nous esperons vous fournir
        quelques idee sur les possibilites affordes par TEI-XML dans le domaine d'un projet de
        recherche notamment : <list>
          <item>utilisation d'une personalisation TEI pour le balisage d'un fichier "plain
            text"</item>
          <item>utilisation de OxGarage pour la transformation et manipulation d'un document
            "bureatique"</item>
          <item>affichage des fichiers TEI XML en HTML, PDF, ePub etc.</item>
          <item>utilite du balisage pour des rechercher dans un fonds textuel</item>
        </list>
      </p>


      <div>
        <head>TEI a la carte : personalisation</head>
        <p>Vous l'ignorez peut-etre, mais le feu Marcel Virgolos est
        mondialement reconnu comme l'un des pionniers des etudes
        carte-postaliques.  Suite a sa regrettable disparition, nous
        sommes invites par ses executors a transdformer sa collection
        personel de 100,000 cartes postales de tous types en archive
        numerique1, pour promouvoir l'etude de ce forme d'expression
        culturelle1 peu connu.  Vous trouverez un tout tout petit
        echantillon de ce fonds patrimoniale dans votre dossier
        <ident>Cards</ident>.</p>

        <div>
          <head>Premiere carte</head>
          <p>Nous allons travailler sur une seule carte d'abord. La voici, au recto :</p>
          <p>
            <figure>
              <graphic url="Cards/19701026_0004r.jpg" width="70%"/>
            </figure>
          </p>
          <p> Et voila son verso : <figure>
              <graphic url="Cards/19701026_0004v.jpg" width="70%"/>
            </figure></p>
          <p>Nous avons deja discute de la necessite de bien choisir
          les balises qu'il nous faut, et comment se servir de Roma
          pour creer un schema qui reflet ces discussions. </p>
        </div>

        <div>
          <head>Creation de document nouveau</head>
<p>On va d'abord creer un nouveau document XML qui sera conforme a
notre schema tei_cartes.
        <list>
          <item>Démarrez oXygen.</item>
          <item>Cliquez sur l'icône Nouveau en haut à gauche (ou
          sélectionnez Nouveau du menu Fichier, ou tapez CTRL-N) pour
          ouvrir la boîte de dialogue Nouveau</item>
          <item>Choisissez <ident>Nouveau document</ident>, ensuite
          <ident>Document XML</ident></item>
        
  <item> Cliquez sur le bouton <ident>Personnaliser</ident> en bas. Le
  dialog Customize Editor s'affiche</item>

<item>Cliquez sur le petit triangle jaune a l'extreme droite du champs
<ident>URL de Schema</ident>. Un sous-menu s'affiche.</item>
<item>Selectionnez <ident>Parcourir les fichiers locaux</ident> et
naviguer jusqu'au fichier <ident>virgolos.rnc</ident> dans votre
dossier carte. Selectionnez ce fichier, et cliquer sur Ouvrir
</item>
<item>Vous revenez dans le dialog Nouveau. Cliquer sur <ident>Creer</ident> en bas.</item>
</list></p>

<p>Oxygen vous propose un gabarit a completer. Commencons avec les metadonnees :          <list>
            <item>Nous vous proposons comme titre (<gi>title</gi>)
            <q>The Bathing Beach, Brighton, 1846 : edition numerisee
            de carte 19701026_0004 du fonds Virgolos</q>. Pour le
            publication statement, une phrase comnme <q>Echantillon
            inedit cree a l'atelier TEI, Lille 2013</q> servira.
              </item>
            <item> Pour le source description, nous vous proposons
            d'inclure tous les renseignments bibliographiques du
            verso, de cette maniere :</item>
          </list>
</p>          <p><graphic url="sourcedesc.png" width="60%"/></p>

        </div>

      <div>
        <head>Ajout de texte au document</head>

        <p>Rien ne vous empêche de taper à la main toute la carte directement. Mais pour gagner du
          temps on vous propose la démarche suivante : <list>
            <item>Assurez-vous que le curseur soit toujours entre les
            deux balises <gi>body</gi> et <tag>&lt;/body&gt;</tag> de
            votre document vide</item>
            <item>Dans le menu <ident>Document</ident>, sélectionnez <ident>Fichier</ident>, et
              ensuite <ident>Insèrer un fichier</ident>
</item>
            <item>Naviguez jusqu'au fichier
            <ident>card-0004.txt</ident> dans votre dossier
            <ident>Cards</ident>, et selectionnez-le. Cliquez sur
            Open. </item>
<item> Votre document est rempli de taches rouges! Pas de
panique... on va regler ca petit a petit.</item>
          </list>
        </p>
      </div>


      <div>
        <head>Structuration du document</head>
        <p>Il est possible d'identifier dans ce document plusieurs sous-parties. En particulier, il
          contient : <list>
            <item>deux divisions physiques : a baliser  <tag>&lt;div type="recto"></tag> and
                  <tag>&lt;div type="verso"></tag> respectivement</item>
            <item>au verso (en ce cas) on peut aussi distinguer deux
            parties: l'une contenant le message, l'autre contenant des
            information relatives a l'envoi de la carte (l'addresse du
            destinataire, le timbres, l'obliteration etc.)</item>
            <item>Pour notre projet il nous semble utile de distinguer
            ces choses. Notons que nous ne tenons pas autant a encoder
            l'apparence physique de la carte: pour cela, l'image sert
            mieux. </item>
          </list> Allons-y !</p>

        <list>
          <item>Avec la souris, sélectionnez toute le texte que vous venez d'inserez, y compris la balise <gi>graphic</gi> au debut.</item>
          <item>Tapez CTRL-E (ou sélectionnez <ident> XML
          Refactoring</ident> et ensuite <ident>Entourer des
          balises</ident> dans le menu <ident>Document</ident>)</item>
          <item>oXygen vous propose toutes les balises disponibles à
          cet emplacement : sélectionnez <gi>div</gi> et cliquez
          <ident>Accepter</ident>.</item>
          <item>Il faut ajouter des attributs au <gi>div</gi>: avec le
          cursor juste avant le &gt; de sa balise ouvrante, tapez un
          blanc pour voir la liste des attributs disponible, et
          choisir <ident>type</ident> (il est en gras parce qu'il est
          obligatoire). Tapez RETOUR pour l'inserer</item>
<item>Une liste des valeurs possible pour cet attribut
s'affiche. Choissisez <code>recto</code> et tapez RETOUR pour
l'inserer.</item>
<item>Deplacez le curseur juste apres le mot <q>1846</q> and tapez
ALT-MAJ-D (ou sélectionnez <ident>XML Refactoring</ident> et ensuite
<ident>Élément de division</ident> (sic) dans le menu
<ident>Document</ident>.)  pour effectuer une division.</item>
            <item>Les mots <q>Beach view...and mats</q> fournissent une
            description de l'image ; ils ne figurent pas sur la
            carte. La balise prevue pour cela est <gi>figDesc</gi>.
            Selectionnez cet empan, et tapez CTRL-E pour l'emballer
            dans un <gi>figDesc</gi>. </item>
            <item>Les mots <q>The Bathing ... 1846</q> constituent le
            titre du graphie. La balise prevue pour cela
            est<gi>head</gi>. Selectionnez cet empan, et tapez CTRL-E
            pour l'emballer dans un <gi>head</gi>. </item>
            <item>Ces trois elements (<gi>graphic</gi>
            <gi>figDesc</gi> <gi>head</gi>) ensemble constituent un
            element <gi>figure</gi>. Selectionnez tous les trois, et
            entourez-les d'une balise <gi>figure</gi>. Plusieurs
            lignes rouges disparaissent ... on fait du progres!</item>
          </list>
          <p>Procedons au verso ... Notre but initiale est de separer
          la partie contenant le message (<tag>div type="message"</tag>)
          de la partie concernant l'envoi de la carte (<tag>div
          type="envoi"</tag>) ; nous allons nous servir des balises
          <gi>p</gi> element pour des paragraphes de texte,
          <gi>stamp</gi> pour les timbres, et <gi>address</gi> et
          <gi>addrLine</gi> pour l'adresse et ses lignes. D'autres
          balises supplementaires sont envisageables, mais nous
          commencons simple. </p>
          <p>Notons d'abord, que nous disposons de deux versions du verso: une version en mode image, et egalement une version transcrite. Nous allons nous servir d'un attribut <gi>facs</gi> pour indiquer la correspondence entre les deux. Cet attribut est disponible pour tout element dans une transcription pour le lier a sa representation numerique en mode image.  <list>
              <item>Changez la valeur <code>recto</code> a
              l'interieur de notre deuxieme <gi>div</gi> en
              <code>verso</code>. Puis tapez un blanc pour voir les
              autres attributs disponibles.</item>
              <item>Choisissez <ident>facs</ident> dans cette
              liste. Sa valeur devrait etre la chaine de caracteres
              <code>197001026_004v.jpg</code>, actuellement presente
              comme valeur de l'attribut <att>url</att> du deuxieme
              <gi>graphic </gi>. Transferez cette chaine au
              bon endroit avec copier-coller, et puis supprimez ce qui
              reste de l'element <gi>graphic</gi> ; nous n'en avons
              plus besoin.</item>
              <item> Avec la souris, sélectionnez toute le texte (i.e. de "You" jusqu'a "OXFORD") et tapez CTRL-E
                pour l'entourer d'un seul element  <gi>p</gi>. Repetez cette manipulation pour entourez ce <gi>p</gi> d'un <gi>div</gi>. </item>
              <item>Tapez un blanc a l'interieur de la balise ouvrante du <gi>div</gi>, et selectionnez <att>type</att> de la liste des attributs disponible. Cette fois ci, specifier  <code>message</code> comme valeur pour cet attribut.</item>
              <item>Presque tous les lignes rouges
              disparaissent. Est-ce que vous comprenez pourquoi ces
              eperluettes nous posent toujours une probleme? Regardez
              le message en bas. Effectivement, dans un document XML
              les caracteres &lt; et &amp; doivent etre representes
              indirectement. Vous n'avez qu'a remplacer chaque
              eperluette avec la sequence <code>&amp;amp;</code> : par
              exemple <code>Brighton &amp;amp; Hove</code>
              </item>
            <item>Le petit carré vert apparaît ! Avons-nous terminé ? Hélas non : un document peut
              être valide, tout en contenant des mensonges ! Voyez-vous des mensonges ? Cliquez sur
              le bouton Indentation (ou tapez CTRL-MAJ-P). </item>
          </list>
</p>
        <p>Parce qu'elles ne sont pas explicitées par le balisage,
        plusieurs distinctions implicites dans la mise en forme de
        l'originel ne sont plus affichées. Il faut donc les baliser.
        </p>
          <p>Nous devons d'abord separer les  paragraphes au sein du message et sa signature.
          <list>
            <item>Ré-établissez l'affichage originel en
          tapant CTRL-Z. </item>
            <item>Diviser le paragraph en plusieurs, en tapant
            ALT-MAJ-D quand le curseur est positionne apres <q>is</q>,
            <q>Fitzherbert</q>, <q>Mama</q>, et
            <q>vermilion</q></item>
            <item>Pour diviser le <gi>div</gi> il faut mettre le curseur entre la fin d'un  paragraph et le debut du paragraphe suivant, i.e.  <emph>entre</emph> le
                <code>&lt;/p></code> apres <q>Mama</q> et le <code>&lt;p></code> qui le suit. 
</item>
            <item>Le mot <q>Mama</q> n'est pas strictement une partie
            du message -- c'est une signature, pour laquelle nous
            preferons disposer de l'element <gi>signed</gi>. Vous
            pourriez retaper les balises, ou bien mettre le cursor a
            l'interieur de la balise ouvrante du <gi>p</gi>, et tapez
            ALT-MAJ-R (<ident>Document - XML refactoring - Rename
            element</ident>) pour renommer l'element.</item>

            <item>Le <gi>div</gi> que vous venez de creer contient
            trois descriptions de timbre, et une addresse. Selon notre
            schema son attribut <att>type</att> devrait avoir la
            valeur <code>envoi</code> : faites en sorte!
              </item>
	      <item>Balisez chacune des descriptions de timbre en
            utilisant l'element <gi>stamp</gi>. A vous de decider si
            vous le faites en selectionnant le texte de chaque
            description et l'entourant d'un <gi>stamp</gi> l'une apres
            l'autre, ou bien en faisant cette manip qu'une fois, et
            puis divisant l'element en trois. </item>
            <item>Il ne nous reste qu'a traiter le
            destinataire. Selectionnez le texte de l'adresse, tapez
            CTRL-E, et selectionnez <gi>address</gi>. Les lignes rouge
            retournent parce qu'il faut baliser aussi les composants d'une adresse, en se servant des balises <gi>name</gi>, <gi>street</gi> ou <gi>addrLine</gi> selon votre gout. <!--
            components of an <gi>address</gi> must be distinguished :
            you cannot have just plain text inside this tag. You could
            markup those components of the address which are names
            (using <gi>name</gi>) and those which make up a street
            address (using <gi>street</gi>); or you could just tag
            each line of the address separately using
            <gi>addrLine</gi>. You could even do both (put the names
            etc.<hi rend="italic"> inside</hi> the address lines, if
            you do)... As is often the way in the TEI, it's Up To
            You. --></item>
          </list></p>
        </div>

        <div>
          <head>Epreuve de la realite</head>
          <p>Oxygen peut afficher la structure hierarchique du document que vous etes en train de creer. Regardez dans la fenetre <ident>sommaire</ident> a gauche.  Vous devrez voir quelque chose qui resemble  a ceci  : </p>
          <p><graphic height="14cm" url="card-structure.png"/>. </p>
          <p>Avons nous fini de baliser? </p>

          <p>Malheureusement, il n'existe aucune reponse certaine a une telle question. Nopus avons balise la structure essentielle du document pour faciliter lk'affichage et la manipulation de ces composants en plusieures manieres (nous allons voir cela un peu plus tard). Mais nous n'avons pas balise <emph>tout</emph> les objets d'interet sur cette carte. Nous revenons sur ce point a la fin de l'exercice.</p>
        </div>

          <p>Since this Word file uses formatting in a consistent way, using Word styles, it's
            possible to transform it to XML more or less automatically, losing very little
            information. Oxygen can be configured to do this for you, but we will use a different
            tool for a change. </p>


        <div>
          <head>Transformation d'un fichier Word</head>
          <p>Vous savez maintenanrt comment creer un document TEI XML ex nihilo, ou a partir d'unb document <code>.txt</code>. En realite la pl;upart des documents sont crees avec un outil bureautioqaue, comme  Word ou Libre Office. Est-ce que nous pourrons travailler avec cette sorte de document aussi? 
         
          <p>Dans votre dossier <ident>Cards</ident>, vous trouverez un petit document Word document  <ident>Les
              deux soeurs.docx</ident>. Il contient une transcription jolie d'une carte postale : vous aimerez peut etre l'ouvri avec Word pour vous assurez qu'il est un document veriutabnle, bien formatte, sans aucun chevron visible. </p>
          <p>Quoi faire pour transformer ce joli fichier en XML et travailler la-dessus
            avec Oxygen? </p>
          <p>Nous pourrions l'exporter au format « plein text ». Nous pourrions aussi
            faire un copier-coller. Mais dans chaque cas, nous risquons la perte du
            formatage qui distingue (par exemple) les annotations en bas de page du
            texte annote.   </p>
          <p>Si le fichier Word est bien stylé, on peut le transformer en XML, sans perte
            d’information. L'outil OxGarage nous aidera.</p>
          <list>
            <item>Ouvrez votre Internet browser (Firefox de preference), et allez sur le site
              <ref>http://www.tei-c.org/ege-webclient/</ref></item>
            <item>Cliquez sur <ident>Text Documents</ident>. Dans la liste des formats
              de saisi proposée, cochez la case pour <ident>Microsoft Word Document(.docx)</ident>.</item>
            <item>Une liste des formats cibles proposés apparaît. Cochez la case pour
              TEI P5 XML.</item>
            <item>En haut de l'écran un bouton <ident>Browse</ident> apparaît. Cliquez
              sur ceci, et naviguez jusqu'au fichier <ident>Les
              deux soeurs.docx</ident> dans votre dossier <ident>cartes</ident>.</item>
            <item>Cliquez sur le grand bouton <ident>Convert</ident> et patientez. </item>
            <item>Le site vous renvoie (après un bref délai) un  archive nomme <ident>Les deux
                  soeurs.zip</ident></item>
              <item>Retrouver cet  archive et cliquez la dessus pour le dezipper. Il contuient un dossier 
                  <ident>Media</ident> et un fichier <ident>tei.xml</ident>. Ce dernier represente le contenu du fichbier docx transforme en TEI XML. .</item>
            </list>
</p>          </div>
          <div>
        <div>
          <head>Traduction des balises</head>
          <p>Voyons ce que le Garage aura fait de notre fichier Word. En tout cas, il est
            devenu un document TEI valide, même s'il pourrait etre amélioré. </p>
          <list>
            <item>Relancez Oxygen (si necessaire), et ouvrez le fichier  <ident>tei.xml</ident> que vous venez
              de recevoir du garage. </item>
            <item>Oxygen vous avertit que ce fichier ne contient pas de retours à la
              ligne : ce n'est pas grave. Cliquez sur "format".</item>
            </list>
            <p>Ne regardez pas le TEI Header pour l'instant. La
            conversion a pu distinguer les trois composants du verso
            de la carte (le message, les timbres, et l'addresse)
            parce qu'ils etaient formattes differement dans le
            fichier Word, en se servant des stylages word divers. Ce
            fait nous aide beaucoup. </p>
            <p>Par exemple, l'adresse a ete transforme en tableau, avec un rang contenant un seul cellule pour chaque ligne. </p>
            <list>
              <item>Mettez le curseur  a <emph>l'interieur </emph> d'un des elements <gi>cell</gi>
                </item>
              <item>Tapez ALT-MAJ-R ( <ident>Document -> XML-Refactoring ->
                  Rename Element </ident>) et changez <code>cell</code> en
                  <code>addrLine</code></item>
<item>Cochez la case 
                  <ident>Rename all elements with the same name</ident> et
     cliquez <ident>OK</ident>. </item> 
<item>Tous les  <gi>cell</gi> deviennent des
                  <gi>addrLine</gi>s. (Le document n'est plus valide, mais il devient plus honnet!)</item>
              <item>Il faut enlever tous les balises  <gi>row</gi> et <gi>table</gi>. Vous pouvez faire cela en les supprimant comme n'importe quel autre caractere. Ou, d'une maniere plus fiable, mettez le curseur sur une des balises <gi>row</gi>, et selectionnez la commande <ident>Document ->
                  XML-Refactoring -> Delete Element Tags </ident>.</item>
              <item>Pour terminer, emballer votre sequence de <gi>addrLine</gi> avec un 
                  <gi>address</gi> et votre document est de nouveau (presque) valide.</item>

              <item>Les descriptions de timbre sont convertis dans une
              liste, plutot qu'un table, mais la demarche est
              pareille. Renommer tous les elements <gi>item</gi> en
              <gi>stamp</gi>s et emballez les dans un <gi>p</gi>
              element comme auparavant.</item>
            </list>
            <p>Nous vous laissons completer le balisage de cette
            carte. N'oubliez pas d'introduire des <gi>div</gi>
            elements de bon type au bon endroit, ni de transferer des
            information dans l'entete. La carte deja faite peut vous
            servir comme modele. Si il vous reste du temps, essayez de
            transcrire d'autres cartes : vous en trouverez encore
            trois exemplaires dans le dossier
            <ident>Cards</ident>. </p>
            <p>Vous trouverez notre suggestion pour toutes les cartes dans le fichier  <ident>postcard-archive.xml</ident>!
            </p>
          </div>
        </div>
      </div>

      <div>
        <head>Using the markup</head>

        <p>The markup introduced you've carefully introduced is not there for its own sake. You can
          use it to do interesting things with your digital resource. Naturally, since we love
          reading, we tend to think first of how using the markup to transform the appearance of the
          resource or parts of it, into something more legible, as a digital document. But it can
          also can be used to analyse features and structures of the document, to carry out
          intelligent searching across a large number of resources, or simply to catalogue a
          collection of documents.</p>
        <div>
          <head>Transforming for display</head>

          <p>As you've already seen, Oxygen can transform an XML file for display using Author mode.
            How about some other transformations? Why not convert the document into HTML or PDF for
            display on a website? You can try the following on any of the files you prepared
            yourself, on the file <ident>19701026_004.xml</ident>, which contains just one postcard,
            (but not sadly on the file <ident>postcard-archive.xml</ident> , for technical reasons)<list>
              <item>On the tool bar there is a button with a big red arrow. Click on it (or type
                CTRL-SHIFT-T, or select Document -> Transformation -> Apply transformation scenario
                from the menus)</item>
              <item>In Oxygen a <q>transformation scenario </q> associates a document with a
                stylesheet for processing. Some default scenarios are provided for various commonly
                used formats (notably <code>TEI P5 XHTML</code> , <code>TEI P5 EPUB</code>,
                  <code>TEI P5 PDF</code>, <code>TEI P5 DOCX</code>) and you can also define your
                own. Select a scenario that looks interesting, and see what happens when you run the
                transformation, by clicking the <ident>Transform now </ident> button. Experiment
                with the others too !</item>
              <!--              <item>Bien sur, on peut configurer ces transformations à volonté, et en créer des
                nouveaux. Pour vous en donner le goût, on va finir en vous proposant une
                transformation qui n'a rien à faire avec la visualisation.</item>
-->
            </list></p>

          <!--
          <p>La feuille de style qui controle une transformation s'écrit dans un autre langage XML,
            qui s'appelle XSLT : sujet fascinant, mais peut etre pas pour les debutants. Vous
            trouverez quelques exemplaires de feuilles de styles XSLT dans votre dossier. Pour en
            servir, il faut créer une nouvelle transformation en Oxygen <list>
              <item>Cliquez sur la flèche rouge (CTRL-MAJ-T) de nouveau</item>
              <item>Cliquez le bouton <ident>Nouveau</ident> pour ouvrir la fenetre Nouveau
                Scenario. Dans cette fenetre: <list>
                  <item>choisir un nom pour le scenario : on vous propose "texte-brut"</item>
                  <item>specifier la location du fichier XSL souhaité, en cliquant sur le petit
                    icone dossier jaune à droite du champs <ident>XSL URL</ident>. Ceci vous permets
                    de naviguer au dossier <ident>Travaux</ident> : sélectionner le fichier
                      <ident>texte-brut.xsl</ident> et cliquer <ident>Ouvrir</ident>.</item>
                  <item>sélectionnez <ident>Saxon HE 9</ident> du menu <ident>Transformateur</ident>
                  </item>
                  <item>Cliquer <ident>Accepter</ident> pour terminer, et <ident>Transformer
                      Maintenant</ident> pour voir le resultat. </item>
                </list></item>
            </list></p>
          <p>Comme vous voyez, c'est possible de transformer notre document XML ou bien dans un
            format d'affichage, ou bien dans un format d'analyse tres classique. </p>
-->
        </div>
        <div>
          <head>Searching the structure</head>
          <p>One of the key reasons for introducing markup was that it allows us to access and
            identify structural components independent of the document in which they appear. For
            example, we might want a list of just the stamps, or just the dates of posting, for our
            postcards. We don't have time to explain this in detail, but here are a couple of
            indications of what's possible, still using Oxygen.</p>
          <p>At top left of the Oxygen screen there is a little window labelled <ident>XPath
              2.0</ident>. XPath is a W3C-defined standard language for identifying parts of an XML
            structure. We won't explain it in full but show what it can do with a few simple
            examples. </p>
          <list>
            <item>Open the file <ident>postcard-archive.xml</ident> in Oxygen. This contains marked
              up versions of five postcards.</item>
            <item>Type <code>//salute</code> into the XPath box and press return. At the bottom of
              the screen, a table appears containing a row for each occurrence of a <gi>salute</gi>
              element anywhere in the document, with first a full description of where it is to be
              found, and second what it contains. The first line tells is that the text <q>Love
                Kath.</q> is inside the first salute inside the first div inside the second div of
              the first body of the first text of the first TEI inside the root TEIcorpus. </item>
            <item>Now let's try to find all the titles of our cards. Type <code>//title</code> into
              the XPath box and press Return. </item>
            <item>Hmm, not quite what we wanted. We have the title of the whole collection, the
              title of the bibliographic source, the title of the card itself... let's try to be
              more precise. Type <code>//TEI//titleStmt/title</code> instead. This says <q>find any
                  <gi>title</gi> which is directly contained by a <gi>titleStmt</gi> which is itself
                anywhere within a <gi>TEI</gi></q>... which is what we wanted. You should see just
              five lines of results.</item>
            <item>How about picking out the stamps? Type <code>//stamp</code> into the box and we
              will see all the <gi>stamp</gi> elements.</item>
            <item>XPath syntax also allows us to select according to the value of an attribute. Try
                <code>stamp[@type='postage']</code> to see just the postage stamps, as opposed to
              postmarks.</item>
            <item>Lastly, how about all the messages? </item>
          </list>
        </div>
        <div>
          <head>Next steps...</head>
          <p>Have we finished our markup <emph>now</emph>? </p>
          <p>Here are just a few ideas for you to consider if you want to continue working with this
            kind of document: <list>
              <item>Like other hand-written materials, postcards can contain errors, additions,
                corrections, strange spellings, passages which are illegible. The TEI provides
                markup for all of these. </item>
              <item>Postcards typically contain information about real persons and real places at
                specific times. We should separate out these <q>named entities</q> (as they are
                called) in our markup by marking them up as <gi>name</gi>s with an appropriate
                  <att>type</att> for example</item>
              <item> We could also add markup to explain or normalize the entities being named --
                for example, who was <q>Mrs FitzHerbert</q>, and what is the little joke being made
                here?</item>
              <item>In our markup we haven't tried to preserve the original layout or orientation of
                the writing. Maybe in a very precious or obscure postcard that would be useful
                too?</item>
              <item>There are plenty of other digital resources that reference the entities referred
                to here: catalogues of postage stamps, gazeteers and maps of placenames, historical
                biographies, lists of business and publishers, etc. We should be able to link to
                relevant items in such digital resources.</item>
              <item>The postcard itself could have much more metadata added to it : we could add
                keywords describing the picture, or the means of production, or whatever information
                we can discover about the size of the original print edition, the present value of
                the card to collectors, other collections which have copies of it, or the series to
                which it belongs, and so on... </item>
              <item>We could add markup describing the linguistic properties of the writing itself.
                Postcard messages tend to be informal, but still there are some recurrent motifs and
                formulae. We could investigate the semiotics of cartophiliac discourse. </item>
              <item>... and so on!</item>
            </list>
          </p>
          <p>Thinking about such possibilities is something we should do before designing our
            schema. The TEI provides a tool called Roma to help with that job, but that's another
            story.... </p>
        </div>
      </div>
    </body>
  </text>
</TEI>
