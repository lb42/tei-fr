<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:lang="fr">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Comment la TEI se sert du format ODD</title>
        <author>Lou Burnard</author>
      </titleStmt>
      <publicationStmt>
        <p>Version pour la formation ODD Mutex 2014</p>
      </publicationStmt>
      <sourceDesc>
        <p>majoritairement nouveau!</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change who="#LB" when="2014-02-21">1er jet</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>
      <div>
        <head>TEI ODD sous le capot</head>
        <p>La TEI est définie avec des ODD. c'était en effet la raison principale de l'invention du
          système. </p>
        <p>La source TEI P5 (disponible à <ptr
            target="http://www.tei-c.org/release/xml/tei/odd/Source/"/>) rassemble: <list>
            <item>39 fichiers en TEI-XML, dont 25 contient un chapitre de documentation en TEI-XML,
              la plupart définissant un module, par ex <ident>PH-PrimarySources.xml</ident></item>
            <item>778 fichiers en TEI-XML, chacun définissant un élément, une classe, ou un macro <list>
                <item>29 datatypes (<code>data.xxxx</code>) par ex.
                  <ident>data.sex.xml</ident></item>
                <item>116 classes de type modèle (code>model.xxxx) par ex.
                    <ident>model.biblLike.xml</ident></item>
                <item>71 classes de type attribut (<code>att.xxxx</code>) par ex.
                    <ident>att.divLike.xml</ident></item>
                <item>8 macros (macro.xxxx) par ex. <ident>macro.phraseSeq.xml</ident></item>
                <item>555 spécifications d'élément, de <ident>ab.xml</ident> jusqu'à
                    <ident>zone.xml</ident></item>
              </list></item>
          </list>
        </p>
        <p rend="box"> Nous allons regarder ça de plus près...</p>
      </div>
      <div>
        <head>Organisation physique des Guidelines</head>
        <p>Il ne faut pas confondre l'organisation physique (en fichiers) avec l'organisation
          logique (en specifications etc.)</p>
        <list>
          <item>Le fichier <ident>guidelines-XX.xml</ident> est <soCalled>la</soCalled> source des
            Guidelines pour la langue XX.</item>
          <item>A part des preliminaires ( un TEI Header, la page à titre, etc) il contient plusieurs lignes comme ceci:
              <egXML rend="tiny" xmlns="http://www.tei-c.org/ns/Examples">&lt;include
                xmlns="http://www.w3.org/2001/XInclude" href="Guidelines/en/HD-Header.xml"/>
            </egXML></item>
          <item>Au sein de chaque chapitre on trouve des <code>xInclude</code> pareilles pour les
            objets définis par ce chapitre</item>
        </list>
</div><div><head>Organisation logique des Guidelines</head>
      <list>
            <item>A la fin de chaque chapitre (par convention) il y a un élément <gi>moduleSpec</gi>
              qui rassemble toutes les spécifications référencées par le chapitre pour définir un
              module</item>
            <item>ces spécifications sont (par convénience) organisées en <gi>specGrp</gi>, qui sont
              ensuite référencées par un <gi>specgrpRef</gi>
            </item>
            <item>Chaque <gi>specGrp</gi> regroupe des spécifications d'objet, indiqué par un
              xInclude</item>
          </list>
      </div>
      <div>
        <head>Spécification d'un datatype</head>
        <p rend="box">Ouvrez <ident>data.sex.xml</ident> avec oXygen</p>
        <list>
          <item>C'est un document XML, à valider avec oNVDL contre la version la plus récente du
            schéma complet TEI P5 </item>
          <item>Avec deux licences open source</item>
          <item>Les <gi>desc</gi> sont répétées en plusieurs langues, chacune identifiée par
              <att>xml:lang</att> et avec une <att>versionDate</att></item>
          <item>Le <gi>macroSpec</gi> est identifié (<att>ident</att>), typé (<att>type</att>), et
            appartient a un module (<att>module</att>)</item>
          <item>L'expansion du macro est fourni par l'élément <gi>content</gi>: ici, par référence à
            un autre macro <code>data.word</code></item>
          <item>Tous les datatypes (sauf 2) sont mappés sur <list>
              <item>un token/patron</item>
              <item>un type de base XSD</item>
            </list>
          </item>
          <item>Les remarques (<gi>remarks</gi>) sont plurilingues de la meme manière que les
              <gi>desc</gi>; noter que les versions françaises et japonaises n'ont pas encore été
            mises à jour</item>
        </list>
      </div>
      <div>
        <head>Spécification d'une classe modèle</head>
        <p rend="box">Ouvrez <ident>model.biblLike.xml</ident> avec oXygen</p>
        <list>
          <item>La spécification d'une classe modèle n'existe que pour été ciblée par d'autres
            spécifications, donc pas grand chose à voir ici</item>
          <item>Comme ailleurs, on se sert d'un élément <gi>listRef</gi> pour regrouper des
            pointeurs sur la partie des Guidelines où cette classe est décrite. </item>
          <item>Notez l'élément <gi>classes</gi> : cette classe est réferencée par ("member of")
            d'autres classes modèles (model.inter, etc.). Une référence à la classe model.inter donc
            implique une référence à cette classe.</item>
          <item>Pour voir l'effet de cette hiérarchie de classes, regardez la visualisation de cette
            specification <ptr
              target="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/ref-model.biblLike.html"
            /></item>
        </list>
      </div>
      <div>
        <head>Spécification d'une classe d'attribut</head>
        <p rend="box">Ouvrez <ident>att.divLike.xml</ident> avec oXygen </p>
        <list>
          <item>Vous êtes conseillé d'ouvrir la perspective Sommaire (Fenêtre->Afficher la
            vue->Sommaire) si besoin est) pour voir la structure</item>
          <item>La liste des attributs fournis par cette classe est specifiée dans un
              <gi>attList</gi>, qui contient deux <gi>attDef</gi> (<att>org</att> et
              <att>uniform</att>)</item>
          <item>Comme ailleurs, chaque <gi>attDef</gi> s'identifie avec <att>ident</att>, et se
            décrit par plusieures <gi>desc</gi> ; complétés par des <gi>gloss</gi> dans le cas où
            l'identifiant n'est pas un mot complet</item>
          <item>les valeurs disponibles pour un attribut sont spécifiés par un <gi>datatype</gi> et
            eventuellement un <gi>valList</gi>, qui rassemble chaque valeur prévue avec sa
            définition</item>
          <item>cette classe est un sous-classe de deux autres (<ident>att.metrical</ident>, et
              <ident>att.fragmentable</ident>) : si ces classes sont disponibles, les attributs
            qu'elles fournissent seront donc également disponibles </item>
        </list>
      </div>
      <div>
        <head>Spécification d'un macro</head>
        <p rend="box">Ouvrez <ident>macro.phraseSeq.xml</ident> avec oXygen</p>
        <list>
          <item>Un macro, comme un datatype, fournit une abbréviation de convenance pour des objets
            souvent utilisés; dans ce cas, un modèle de contenu </item>
          <item>Dans cette version de P5, les modèles de contenu sont exprimés en RelaXNG. Dans la
            version <ident>pureODD</ident> que nous verrons plus tard, ils sont exprimés en ODD.
          </item>
        </list>
      </div>
      <div>
        <head>Spécification d'un élément</head>
        <p rend="box">Ouvrez <ident>abstract.xml</ident> avec oXygen</p>
        <list>
          <item>C'est un élément assez récent (révisé le 2012-12-27) donc il n'y aucune traduction
            de son <gi>desc</gi> etc. Les parties essentielles d'un <gi>elementSpec</gi> sont donc
            plus evidents.</item>
          <item>L'élément <gi>moduleSpec</gi> avec ces attributs <att>module</att> et
              <att>ident</att></item>
          <item>l'élément <gi>classes</gi> qui precise les classes auxquelles cet élément
            appartient</item>
          <item>l'élément <gi>content</gi> qui precise la modele de contenu de cet élément</item>
          <item>l'élément <gi>exemplum</gi> qui contient un exemple de l'usage de l'élément </item>
          <item>facultativement: des remarques (<gi>remarks</gi> et des renvois
            (<gi>listRef</gi>)</item>
        </list>
      </div>

      <div>
        <head>Les classes TEI</head>
        <p rend="att">Sans comprendre la système de classes TEI, on comprend à peine le
          fonctionnement d'un ODD </p>
        <list>
          <item>une classe d'attribut comme <ident>att.global</ident> fournit des attributs</item>
          <item>une classe de modélisation comme <ident>model.profileDescPart</ident> regroupe des
            éléments selon leur sémantique, ou leur possibilités d'emplacement : <list>
              <item>model.xxxLike : pareille à xxx</item>
              <item>model.xxxPart : constituant un xxx</item>
            </list>
          </item>
          <item>toute classe peut hériter ses proprietes d'une autre</item>
          <item>on se sert des classes de modélisation surtout dans les définitions de contenu, ce
            qui permet de les gérer avec une couche d'indirection</item>
        </list>
      </div>
      <div>
        <head>Par exemple</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
          <classes>
            <memberOf key="att.global"/>
            <memberOf key="att.responsibility"/>
            <memberOf key="model.profileDescPart"/>
          </classes>
        </egXML>
        <list>
          <item><gi>abstract</gi> est membre de <ident>model.profileDescPart</ident></item>
          <item>le contenu de <gi>profileDesc</gi> est <egXML
              xmlns="http://www.tei-c.org/ns/Examples"
              xmlns:rng="http://relaxng.org/ns/structure/1.0">
              <rng:zeroOrMore>
                <rng:ref name="model.profileDescPart"/>
              </rng:zeroOrMore></egXML>
          </item>
          <item> en tant que membre de <ident>att.responsibility</ident> il hérite les attributs
              <att>cert</att> et <att>resp</att></item>
          <item><ident>att.responsibility</ident> lui confère également l'attribut
            <att>source</att>, parce qu'elle est <soCalled>memberOf</soCalled> de la classe
              <ident>att.source</ident></item>
        </list>
      </div>
      <div>
        <head>Définition du contenu d'un élément</head>
        <list>
          <item>Actuellement, la TEI se sert du langage RELAXNG pour définir le contenu ("content
            model") des éléments et des attributs </item>
          <item>(a l'époque c'etait du SGML DTD)</item>
          <item>Dans pureODD, on remplace cela avec des éléments ODD, comme vous avez déjà vu</item>
          <item>pureODD est compris dans les versions TEI P5 depuis 2.6.0 (dec 2013), mais on est
            toujours en phase beta test. </item>
        </list>
      </div>
      <div>
        <head>Purification d'un modèle de contenu...</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples"
          xmlns:rng="http://relaxng.org/ns/structure/1.0"
                  ><content><rng:oneOrMore><rng:choice><rng:ref name="model.pLike"/><rng:ref
                  name="model.listLike"/></rng:choice></rng:oneOrMore></content></egXML>

        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <content><alternate maxOccurs="unbounded"><classRef key="model.pLike"/><classRef
                key="model.listLike"/></alternate></content>
        </egXML>

        <p rend="box">Voir <ref target="reviewingODD.pdf">Burnard et Rahtz 2013</ref> pour les
          détails</p>
      </div>

      <div>
        <head>Exemples</head>
        <p>Un exemple vaut un million de mots... mais ce n'est pas évident comment intégrer un
          exemple XML dans un document XML : surtout si on souhaite le valider en même temps.
          Plusieurs démarches sont possibles: <list>
            <item>on représente les chevrons par des entités (&amp;lt; etc) : mais la source devient
              illisible et pas validable</item>
            <item>on englobe tout dans un CDATA marked section <code>&lt;![CDATA[&lt;p>comme
                ça&lt;/p> &#93;]></code> : la source est plus lisible mais pas validable</item>
            <item>on englobe tout dans un élément d'un autre namespace <code rend="tiny">&lt;egXML
                xmlns="http://www.tei-c.org/ns/Examples"> &lt;p>ça marche!&lt;/p></code>
            </item>
          </list></p>
        <p>Les éxpressions du namespace <code>http://www.tei-c.org/ns/Examples</code> sont validées
          par un schéma spéciale, qui permet tout élément TEI comme racine, sous controle du
          validateur onvdl.</p>
      </div>

      <div>
        <head>Contraintes des contenus</head>

        <p>Le modele de contenu est un des manieres de contraindre ce qui est permis dans un
          document. On a souvent besoin de plus que ca...</p>
        <p>Les contraintes sont exprimables de plusieurs manières : <list>
            <item>par référence à un élément <gi>valList</gi>... </item>
            <item>par reference à un élément <gi>datatype</gi> (s'applique uniquement aux attributs) </item>
            <item>par inclusion des éléments <gi>constraintSpec</gi> (expression en ISO schématron)
            </item>
          </list>
        </p>
      </div>

      <div rend="slide">
        <head>Spécification des listes de valeurs</head>
        <p>Les valeurs légales d'un attribut peuvent être specifiées par un <gi>datatype</gi> et/ou
          par <gi>valList</gi>. </p>
        <p>Un besoin assez commun est de spécifier une <term>énumération</term> (une liste --
          ouverte ou fermée -- des valeurs) <egXML xmlns="http://www.tei-c.org/ns/Examples"
            rend="tiny">
            <attDef ident="status">
              <desc>indique l'état courant du système selon un code de couleur</desc>
              <defaultVal>green</defaultVal>
              <valList type="closed">
                <valItem ident="red"><desc>fermeture complète du système</desc></valItem>
                <valItem ident="orange"><desc>fermeture imminente du système</desc></valItem>
                <valItem ident="green"><desc>état normal du système</desc></valItem>
                <valItem ident="white"><desc>état inconnu du système</desc></valItem>
              </valList>
            </attDef>
          </egXML></p>
      </div>
      <div>
        <head>Contraintes schématron</head>
        <list>
          <item>Une spécification d'élément peut aussi contenir un élément <gi>constraintSpec</gi>
            (ou plusieures), rassemblant des règles exprimées en ISO schématron</item>
          <item>le traitement de ces règles nécessite une étape additionnelle dans la validation des
            documents</item>
          <item>mais c'est prévu dans la version courante d'oXygen (si votre schéma s'exprime en
            RELAXNG et si vos contraintes s'exprime en ISO schematron </item>
        </list>
        <!-- egXML xmlns="http://www.tei-c.org/ns/Examples" rend="full">
          <![CDATA[          <elementSpec xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="div"
            module="teistructure" mode="change">
            <constraintSpec ident="cartoon" scheme="isoschematron">
              <constraint>
                <s:assert test="@type='cartoon' and .//tei:graphic"> un cartoon doit inclure une
                  graphie </s:assert>
              </constraint>
            </constraintSpec>
          </elemeRntSpec>
        ]]></egXML-->

      </div>

      <div>
        <head>Exemple de schematron</head>
        <p rend="box">Ouvrez <ident>span.xml</ident> avec oXygen</p>
        <list>
          <item>cette specification comporte plusieurs <gi>constraintSpec</gi>, chacun avec son
            @ident et son @scheme</item>
          <item>un ou plusieurs <gi>constraint</gi> sont possible</item>
          <item>la contrainte s'exprime en langue ISO schematron, donc dans une autre espace de
            noms</item>
          <item>par ex. <code>if @to is supplied on &lt;name/>, @from must be supplied as
              well</code> (NB "&lt;name/> signifie le nom de l'élément qui aurait activer cette
            regle)</item>
        </list>
      </div>


      <div>
        <head>ODD est aussi une langue de personnalisation </head>
        <p>On se sert du meme systeme pour specifier sa choix dans le grand bazar TEI et pour
          specifier le bazar lui-meme</p>
        <p>Un ODD de personnalisation est specifiée par rapport au système complet <list>
            <item>en selectionnant des modules</item>
            <item>en selectionnant parmi les objets (éléments, classes, datatypes, macros) fournis
              par ces modules</item>
            <item>en supprimant quelques un des attributs fournis par ces objets</item>
            <item>en modifiant ou remplaçant quelques parties de ces spécifications (par ex les
              valList)</item>
            <item>eventuellement en ajoutant des spécifications d'objet nouveau</item>
          </list></p>
        <p>Le traîtement d'un ODD implique la résolution de spécifications multiples pour un même
          objet</p>
      </div>

      <div>
        <head>Définition d'un schéma TEI personnalisé</head>
        <p>Comme vous avez déjà vu, une personnalisation s'effectue avec l'élément
            <gi>schemaSpec</gi>. </p>
        <list>
          <item>L'attribut <att>ident</att> (obligatoire) fournit un nom pour le schéma</item>
          <item>L'attribut <att>start</att> fournit le/s nom/s d'élément/s racine du schéma</item>
          <item>L'attribut <att>source</att> fournit un URI pour la location des spécifications à
            personnaliser (par ex, une version spécifique de TEI P5, ou une personnalisation
            existante)</item>
          <item>Les attributs <att>docLang</att> et <att>targetLang</att> permettent la séléction
            des langues souhaitées pour les descriptions d'éléments et pour leur noms
            respectivement</item>
        </list>
        <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
          <schemaSpec start="TEI" ident="testschema" source="tei:1.5.0" docLang="fr">
            <!-- declarations -->
          </schemaSpec>
</egXML>      </div>

      <div>
        <head>Choisir sélectivement (1)</head>
        <p>Vous pouvez spécifier les éléments que vous souhaitez supprimer parmi ceux qui sont
          proposés par un module: <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <schemaSpec start="TEI" ident="testschema">
              <moduleRef key="core" except="mentioned quote said"/>
              <moduleRef key="header"/>
              <moduleRef key="textstructure"/>
            </schemaSpec>
          </egXML></p>
        <p>ou egalement : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <schemaSpec start="TEI" ident="testschema">
              <moduleRef key="core"/>
              <moduleRef key="header"/>
              <moduleRef key="textstructure"/>
              <elementSpec ident="mentioned" mode="delete"/>
              <elementSpec ident="quote" mode="delete"/>
              <elementSpec ident="said" mode="delete"/>
            </schemaSpec>
          </egXML>
        </p>
        <p>(L'attribut <att>mode</att> contrôle la résolution de déclarations multiples)</p>
      </div>
      <div>
        <head>Choisir sélectivement (2)</head>
        <p>Vous pouvez également spécifier les éléments que vous souhaitez inclure parmi ceux qui
          sont proposés par un module: <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <schemaSpec start="TEI" ident="testschema">
              <moduleRef key="core"/>
              <moduleRef key="header"/>
              <moduleRef key="textstructure" include="body div"/>
            </schemaSpec>
          </egXML>
        </p>
        <p>ou également : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <schemaSpec start="TEI" ident="testschema">
              <moduleRef key="core"/>
              <moduleRef key="header"/>
              <elementRef key="div"/>
              <elementRef key="body"/>
            </schemaSpec></egXML></p>
        <p rend="box">Attention! un module peut définir d'autre choses que des éléments. Les
          attributs <att>include</att> et <att>except</att> ne s'appliquent qu'aux éléments</p>
      </div>
      <div>
        <head>Exercice </head>
        <p>Nous allons créer une personnalisation modeste de la TEI. Notre but sera d'utiliser un
          minimum d'éléments pour baliser un corpus linguistique. </p>
        <list>
          <item>Notre TEI header doit respecter le minimum requiert par la TEI</item>
          <item>Dans le <gi>body</gi> de nos <gi>text</gi> nous souhaitons des <gi>ab</gi> divisés
            en <gi>s</gi>,  composés de <gi>w</gi>
          </item>
          <item>Ouvrez le fichier <ident>feather-1.odd</ident> avec oXygen et générez un schéma
            RelaxNG.</item>
          <item>Créez un nouveau document XML se servant de ce schéma, et controllez les balises et
            les attributs qu'il rend disponibles. </item>
        </list>
      </div>

      <div>
        <head>Exercice un peu plus avancé</head>
        <p>On continue de personnaliser le schema feather... </p>
        <list>
          <item>Supprimez tous les attributs globaux sauf <att>style</att>
            <att>xml:id</att> et <att>xml:lang</att></item>
          <item>Supprimez l'élément <gi>title</gi> du body, mais non pas du Header</item>
          <item>Ajoutez l'élément <gi>span</gi> et assurez vous que ces règles schematrons sont en
            vigeur dans votre schema </item>
          <item>Ajouter un nouveau élément <gi>mw</gi> pour les séquences de mots</item>
        </list>

        <p rend="box">Ma proposition est disponible dans le fichier <ident>feather-final</ident> ...
        </p>
      </div>

      <div>
        <head>Etre conforme à la TEI veut dire quoi?</head>
        <list>
          <item><label>être honnet</label> : Les éléments XML qui se déclarent comme appartenant au
            namespace TEI doivent respecter les définitions TEI de ces éléments</item>
          <item><label>être explicite</label> : Pour valider un document TEI, un ODD est fortement
            conseillé, parce que cela mettra en évidence toutes les modifications effectuées</item>
          <item>Tout document valide TEI est valide par rapport au schéma TEI-ALL</item>
        </list>
        <p rend="box">L'objet de ces règles est de faciliter le "blind interchange" des
          documents.</p>
      </div>

      <!--   <div>
        <head>http://www.tei-c.org/Roma/</head>
        <p>On va experimenter cela... <graphic url="../Graphics/Roma-new.png" height="60%"/>
        </p>
        <list>
          <item>Build up : ajouter ce qu'il vous faut à un schéma minimale</item>
          <item>Reduce : prenez tout ce qui existe et enlever ce qui ne vous interesse pas</item>
          <item>Utilisez un template ou un schema prédéfini</item>
          <item>Retravailler une personalisation déjà faite </item>
        </list>
      </div>-->

    </body>
  </text>
</TEI>
