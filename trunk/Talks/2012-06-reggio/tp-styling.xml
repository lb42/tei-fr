<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Construction and use of an XSLT stylesheet</title>
      </titleStmt>
      <publicationStmt>
        <publisher>TEI MEET</publisher>
        <availability>
          <p>Freely available for use and derivative works under a Creative Commons Attribution
            license.</p>
        </availability>
        <date>Jun 2012</date>
      </publicationStmt>
      <sourceDesc>
        <p>Some bits may be lifted from previous talks/workshops by the TEI Community.</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>

  <text>
    <body>
      <div>
        <head>A little experiment</head>
        <p>In this little exercise we will see how to use an XSLT stylesheet with Oxygen. </p>
        <p>XSLT is not a difficult programming language for beginners to learn, but it does require some effort! There are many Internet sites and excellent textbooks available which can help. This little exercise is just to give you a taste of its possibilities.</p>
        <p>The traditional use for  XSLT is to convert a TEI document into HTML so that it can be displayed by a browser. We will start with that.</p>
      </div>

      <div>
        <head>Feeding the browser</head>
        <list>
          <item> Open Oxygen. Sélect <ident>Open</ident> from the
              <ident>File</ident> menu and open the file <ident>petrarchEd.xml</ident> which you made at the end of the previous exercise, the one you put all those  <gi>choice</gi> elements into.</item>
          <item>From the <ident>Document</ident> menu, choose <ident>Transformation</ident>, and
            then <ident>Configure transformation scénario</ident>, or type <code>ctrl-shift-C</code>, or click the button to the right of the red triangle button on the toolbar.</item>
        </list>
        <p>Click  <ident>New</ident> to open the 
            <ident>New Scenario</ident> dialog box.</p>
<!--        <p><graphic height="5cm" url="../Graphics/Oxy12/scenario-2.png"/></p>-->
        <list>
          <item>Type <code>petrarch.xsl</code> in the  <ident>XSL URL</ident> field.</item>
          <item>Click the  <code>Output</code> tab
          </item>
          <item>Type <code>output.html</code> in the  <code>Save As</code> box
          </item>
          <item>Tick the box <code>Open in a browser</code></item>
          <item>Click on <code>Enter</code></item>
        </list>
        <p>You have now created a new transformation scenario, called 
            <ident>petrarchEd</ident>.</p>
<!--        <p>
          <graphic height="5cm" url="../Graphics/Oxy12/scenario-4.png"/></p>
    -->    <list>
          <item>Click  <code>Transform now</code></item>
          <item>At the foot of the screen, the message <code>Transformation succesful</code> appears... </item>
          <item>.. and, after a short delay, your web browser should open and dsplay the file <ident>output.html</ident> which you have just created.</item>
          <item>Pretty isn't ? Well, yes, maybe there is still a bit of work to be done ... </item>
        </list>

      </div>

      <div>
        <head>An XSLT style sheet</head>
        <p>An  XSLT stylesheet is an XML  document. It can therefore be edited using  Oxygen. <list>
            <item>Use Oxygen to open the file 
                <ident>petrarch.xsl</ident> in your Work folder.</item>
            <item>This XSLT file contains just one template, which matches the <gi>TEI</gi> element, the root of our document. The template says that the tags  <gi>html</gi> and <gi>/html</gi> should go into the output, and between them whatever results from a call of
                <gi>xsl:apply-templates</gi></item>
            <item>This will look at every element in the tree, and see if there is a template  available to match it ... and if it finds none, it will simply output its textual content. Since there are no other templates given, all we see is the textual content of the document. </item>
          </list></p>

        <p>Let's get to work ! The first thing we'll do is to extract from the TEI Header a nice title for the  HTML document, and then suppress everything else in the  Header.</p>

        <list>
          <item>After <gi>html</gi>, type <code>&lt;head></code></item>
          <item>Oxygen adds the end-tag. Good. Now add 
              <code>&lt;title></code> within the  <gi>head</gi> element. To find the title of our document, we must navigate from the root of the document down to the  <gi>title</gi> element inside the  <gi>titleStmt</gi> inside the <gi>fileDesc</gi>, inside the <gi>teiHeader</gi>. Or, in other worfds, we will follow a simple  <term>Xpath</term> <code>TEI/teiHeader/fileDesc/titleStmt/title</code>.</item>
          <item>Type <gi>xsl:value-of select="teiHeader/fileDesc/titleStmt/title"/</gi>.</item>
          <item>Change the tag <gi>xsl:apply-templates</gi>. We don't want it to apply templates for the whole document, only for the subtree beginning with the <gi>text</gi> element. So we use the <att>select</att> attribute of <gi>xsl:apply-templates</gi> : add  <code>
              select="text"</code>. </item>
<item>The results will form the body of our HTML web page: so we need to enclose them within a  <gi>body</gi> element</item>
          <item>Click the  Indentation button. Your stylesheet should now look like this :</item>
        </list>
        <p><graphic height="8cm" url="../Graphics/script-1.png"/></p>
        <list>
          <item>Click on the diskette icon or type CTRL-S to save the modifications you've made to the stylesheet. </item>
          <item>Click the  <ident>petrarchEd.xml</ident> tab to return to your document
            XML.</item>
          <item>Click the red triangle icon to do the tranmsformation again (or type CTRL-SHIFT-T)</item>
          <item>Let's see what that produces : this time, we see just the  <gi>text</gi> of the document, and the title bar of the web page has the title we used in it. Progress!  </item>
        </list>

        <p>Now we need to add more templates.</p>

        <list>
          <item>Return to the stylesheet (click on the petrach.xsl tab)</item>
          <item>Add <list>
              <item>a template for <gi>l</gi>, which will output a  <gi>br/</gi> after each line of verse</item>
              <item>a template for  <gi>head</gi>, which will enclose it within an  HTML <gi>h2</gi>
              </item>
              <item>a template for <gi>lg</gi>, which will enclose it within an HTML  <gi>p</gi>, and also prefix it with a number.</item>
            </list></item>
          <item>Here are the required templates. Cut and paste them if you like, but try to understand how they work. </item>
        </list>
        <p><graphic height="8cm" url="../Graphics/script-2"/>
        </p>
      </div>

      <div>
        <head>The  XSLT advantage</head>
        <p>So far, almost everything has been about displaying the text unchanged. To understand better the power of the XSLT language, consider the  <gi>choice</gi> elements scattered through our document.
</p>
        <p>What we'd really like would be to have a stylesheet which would suppress either the 
            <gi>reg</gi> or the  <gi>orig</gi> elements, depending on the user requirements, rather than displaying both of them as it currently does. en fonction du souhait de l'usager. For the moment, to keep things simple, we'll simply add a template which will suppress all the regularisations, leaving the original form.</p>
        <p>All you need to add is a template like this : <gi>xsl:template
            match="reg"/</gi>. Try it! Do you understand why it works? If so, you are well on the way to being an XSLT-guru. Congratulations!
</p>
      </div>




    </body>
  </text>
</TEI>
