<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="file:/home/lou/Public/TEIslides/teislides.rnc" type="application/relax-ng-compact-syntax"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
 <teiHeader>
  <fileDesc>
   <titleStmt>
    <title xml:lang="fr">Personnalisation de la TEI : les principes </title>

    <author>Lou Burnard Consulting</author>
   </titleStmt>
   <publicationStmt>

    <p xml:lang="fr">Préparé pour ENC MasterPro 2015</p>
   </publicationStmt>
   <sourceDesc>
    <p>From previous talks in Tours, Paris, Barcelona, Paris, Graz...</p>
   </sourceDesc>
  </fileDesc>
  <revisionDesc>
   <change when="2021-09">Revised for Tours TEI 2</change>
   <change when="2017-02-18">Revised by emchateau for ENC</change>
   <change who="#LB" when="2014-09-23">Revised for MM14</change>
   <change who="#LB" when="2014-02-17">Revised for Mutec</change>
   <change who="#LB" when="2013-10-20">Finalised for SUFCO formation, Oct 2013</change>
  </revisionDesc>
 </teiHeader>
 <text>

  <body>
   <div type="slide">
    <figure>
     <graphic url="../media/teiTiger.jpg" width="60%"/>
     <head>Comment maîtriser le tigre TEI : an ODD
      story<!-- can't translate that I'm afraid :) --></head>
    </figure>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Adapter la TEI à ses propres besoins</head>
    <p>La customisation (Personnalisation) nous permet d'adapter l'architecture très générique et
     puissante de la TEI aux attentes plus spécifiques et plus restreintes d'un projet particulier. </p>
    <p>Les personnalisations de la TEI s'expriment, bien sûr, en TEI</p>
    <p>Elles utilisent une personnalisation particulière de la TEI qui est nommée
     ODD<!-- (One Document
          Does it all/Un document fait tout)--></p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>À quoi ça sert, un ODD ? </head>
    <p rend="box">Nous avons toujours besoin de deux choses complémentaires…</p>
    <p>Un <hi>schéma formel</hi> (utilisant un langage informatique tel que DTD, RELAX NG, W3C
     Schéma, Schematron) pour contrôler l’édition<list>
     <item>déterminer quelles sont les balises disponibles ?</item>
     <item>dans quels contextes ?</item>
     <item>avec quels attributs ?</item>
     <item>avec quelles valeurs ?</item>
     <item>en respectant quelles contraintes ?</item>
     </list> </p>
    <p>Une <hi>documentation</hi> pour expliciter aux utilisateurs/développeurs nos principes
     éditoriaux, nos principes de choix de balises, etc. :<list>
     <item>dans plusieurs langues naturelles ;</item>
     <item>dans plusieurs formats de fichier (PDF, MsWord, HTML, epub,...).</item>
     </list></p>
    <!--  <item>Mais aussi d’outils informatiques pour transformer et gérer nos données XML.</item>
-->

   </div>
   <div type="slide" xml:lang="fr">
    <head>OK, mais pourquoi ODD ?</head>
    <p>Ces attentes pourraient être satisfaites de plusieurs manières.</p>
    <p>Les avantages d’ODD : <list>
     <item>un format XML bien établi,</item>
     <item>faisant partie intégrante du système TEI,</item>
     <item>permettant un traitement fortement intégré avec d’autres systèmes TEI,</item>
     <item>pérennisation à long terme</item>
     <item>standardisation</item>
     </list></p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>L’idée essentielle de ODD</head>
    <p rend="box"><hi>O</hi>ne <hi>D</hi>ocument <hi>D</hi>oes it all</p>
    <p>Un vocabulaire TEI spécialisé pour la définition :<list>
     <item>des schémas</item>
     <item>des types d’élément XML, indépendants des schémas</item>
     <item>des regroupements de tels éléments, publics ou privés </item>
     <item>des patrons (MLE macros) et des spécifications de donnée (datatype)</item>
     <item>des classes (et sous-classes) d’éléments</item>
     <item>des références de tels objets</item>
     </list> </p>
    <p>Un <hi>schéma</hi> peut combiner :<list>
     <item>des objets identifiables (dans la liste ci-dessus)</item>
     <item>des objets appartenant à d’autres espaces de nom</item>
     </list></p>
    <p rend="box">et devrait être intégrable dans un système de balisage documentaire classique</p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>L’idée essentielle de ODD 2</head>
    <p rend="box">Un ODD peut combiner plusieurs spécifications pour un même objet <list>
     <item>une qui est <soCalled>canonique</soCalled>, référencée dans les
      <title>Guidelines</title></item>
     <item>une (ou plusieurs) supplémentaire(s), modifiée(s) en partie ou totalement</item>
     <item>ces versions partielles peuvent être explicitées dans l’ODD ou bien héritées d'un autre
      ODD</item>
     </list></p>
    <p>Les règles de combinaison sont explicites, mais un peu complexes… </p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Éléments essentiels d’un ODD</head>
    <p>Une histoire de <hi>Spec</hi> et <hi>Ref</hi>... </p>
    <list type="label">
     <label><gi>schemaSpec</gi></label>
     <item>définit et identifie un schéma</item>
     <label><gi>elementSpec</gi></label>
     <item>fournit la définition d’un élément, entièrement ou en partie</item>
     <label><gi>elementRef</gi></label>
     <item>utilise la définition d’un élément existant</item>
     <label><gi>classSpec</gi></label>
     <item>fournit la définition d’une classe</item>
     <label><gi>classRef</gi></label>
     <item>utilise une définition de classe existante</item>
     <label><gi>moduleRef</gi></label>
     <item>fournit un ensemble de spécifications d’éléments et de classes en faisant référence à un
      <soCalled>module</soCalled> </item>
    </list>
    <p> Un ODD peut combiner plusieurs spécifications pour un même objet </p>
    <p rend="box">(Nous reviendrons plus loin sur ce point, et sur les composants documentaires d’un
     ODD)</p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Un premier exemple simplisme</head>
    <p rend="box">Nous utilisons un élément <gi>book</gi>, qui contient un mélange d’éléments
     <gi>para</gi>s et <gi>image</gi>s. Nous ne connaissons rien de la TEI, et n’en avons pas envie.
     De même pour les espaces de noms.</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"><schemaSpec ns="" start="book"
     ident="bookSchema"> <elementSpec ident="book"> <desc>Élément racine d’un schéma simplisme pour
     encoder les livres</desc><desc/> <content> <alternate maxOccurs="unbounded"> <elementRef
     key="para"/> <elementRef key="image"/> </alternate> </content> </elementSpec>
     <!-- ... la suite à la prochaine diapo --> </schemaSpec> </egXML>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Un exemple simplisme (suite)</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:rng="http://relaxng.org/ns/structure/1.0"
     rend="tiny"> <schemaSpec ns="" start="stuff" ident="oddex-1">
     <!-- ... suite --> <elementSpec ident="para"> <desc>un paragraphe de texte </desc> <content>
     <textNode/> </content> </elementSpec> <elementSpec ident="image"> <desc>un élément vide qui
     pointe vers un fichier graphique</desc> <content><empty/></content> <attList> <attDef
     ident="href"> <desc>fournit l’URI de l'objet ciblé</desc> <datatype> <dataRef name="anyURI"/>
     </datatype> </attDef> </attList> </elementSpec> </schemaSpec></egXML>
   </div>

   <div type="slide" xml:lang="fr">
    <head>So what ?</head>
    <list>
     <item>On peut maintenant générer un schéma RELAX NG, W3C, ou DTD à l’aide d’une transformation
      XSLT</item>
     <item>On peut extraire les fragments documentaires, notamment les descriptions des éléments et
      des attributs</item>
    </list>
    <p>TEI fournit un élément spécialisé pour cela : <egXML xmlns="http://www.tei-c.org/ns/Examples"
     rend="tiny"><specList> <specDesc key="para"/> <specDesc key="picture"/> </specList></egXML> </p>
    <p>Ce balisage générera quelque chose comme </p>
    <list>

     <item> <label><gi>para</gi></label> : un paragraphe de texte </item>

     <item> <label><gi>picture</gi></label> : un élément vide qui pointe sur un fichier
      graphique</item>
    </list>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Essayons cela avec oXygen… </head>
    <list>
     <item>Démarrez oXygen</item>
     <!--  <item>Créez un nouveau fichier (CTRL-N)</item>
          <item>Sélectionnez <ident>TEI-P5 -&gt; ODD Customization</ident> dans le menu <ident>Cadre
              des modèles</ident> du dialog <ident>Nouveau</ident></item>
          <item>Remplacer l'élément <gi>schemaSpec</gi> proposé par le contenu du fichier
              <ident>oddex-1.xml</ident></item>-->
     <item>Ouvrez le fichier <ident>oddex-1.odd </ident> </item>
     <item>Sélectionnez les Scénarios de Transformation <ident>TEI ODD to RELAX NG Compact</ident>
      et <ident>TEI ODD to HTML</ident> pour générer un schéma et sa documentation à partir de cet
      ODD</item>
     <item>Lire la documentation</item>
     <item>Validez le fichier test <ident>oddex-1-test.xml</ident> avec le schéma
      <ident>out/oddex-1.rnc</ident> que vous venez de générer</item>
    </list>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Notions de classe (1)</head>
    <p>L’élément <gi>content</gi> sert a spécifier le contenu possible d'un élément, ou bien
     directement, ou bien en faisant référence a une (ou plusieurs) classes d’éléments. </p>
    <p>Dans le monde réel, le contenu de nos <gi>book</gi> ne se limite pas uniquement aux
     <gi>para</gi>s et aux <gi>image</gi>s. Il y a (par ex) des formules, des listes, des titres... </p>
    <p>Nous regroupons tous les éléments qui peuvent apparaître au sein d’un <ident>book</ident> et
     nous appelons ce regroupement une <term>classe</term>. Dans notre cas, nous proposons le nom
     <ident>bookPart</ident>.</p></div><div type="slide" xml:lang="fr"> <head>Notions de classe (2)</head>
      
    <p>Nous utilisons l’élément <gi>classes</gi> dans notre ODD pour indiquer l’association d’un
     élément avec sa ou ses classe/s : <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
     <elementSpec ident="para"> <classes> <memberOf key="bookPart"/> </classes>
     </elementSpec></egXML> </p>
    <p>Ajoutons par ex. un élément <gi>formule</gi>: <egXML xmlns="http://www.tei-c.org/ns/Examples"
     rend="tiny"> <elementSpec ident="formule"> <desc>contient une formule mathématique ou
     scientifique affichée en bloc</desc> <classes> <memberOf key="bookPart"/> </classes>
     <content><textNode/></content> </elementSpec></egXML> </p>
    <p>Et voici la définition de la classe <ident>bookPart</ident>.</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <classSpec ident="bookPart" type="model">
     <desc>éléments qui ont la possibilité de figurer dans un <gi>book</gi></desc> </classSpec>
    </egXML>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Usage d’une classe de modélisation</head>
    <p>Maintenant, au lieu de lister exhaustivement tous les composants possibles d’un
     <gi>book</gi>, il suffit de dire que cet élément est composé des membres de la classe
     <ident>bookPart</ident>.</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <elementSpec ident="book"> <desc>Élément racine
     d’un schéma simplissime pour encoder les livres</desc> <content> <classRef key="bookPart"
     minOccurs="1" maxOccurs="unbounded"/> </content> </elementSpec></egXML>
    <p>Les attributs <att>minOccurs</att> et <att>maxOccurs</att> limitent le nombre d'occurrences
     de chaque membre de la classe. </p>
    <p>D'autres attributs (<att>include</att> et <att>exclude</att>) permettent de contrôler plus
     finement quels membres de la classe seront utilisés </p>
   </div>

   <div xml:lang="fr" type="slide">
    <!-- traduction a relire -->
    <head>Définition d’un modèle de contenu (petit rappel)</head>
    <p>Un élément XML peut contenir....</p>
    <list>
     <item>Rien du tout : <gi>empty</gi></item>
     <item>Que du texte sans balises : <gi>textNode</gi></item>
     <item>Référence(s) à d'autres éléments : <gi>elementRef</gi></item>
     <item>Référence(s) à des classes d'éléments : <gi>classRef</gi></item>
     <item>Alternation(s) des précédents : <gi>alternate</gi></item>
     <item>Séquence(s) des précédents : <gi>séquence</gi></item>
     <item>Et tous ces composants sont répétables ... <att>minOccurs</att> et <att>maxOccurs</att>
     </item>
    </list>
    <!--      <p>Nous allons regarder cela de plus près plus tard...</p>
 -->
   </div>


   <div type="slide" xml:lang="fr">
    <head>Définition d’une classe d’attributs</head>
    <p>Dans le monde réel, il est très probable que plusieurs éléments différents comportent les
     même attributs : il sera donc très pratique de les définir en une seule fois</p>
    <p> ODD nous permet de dire que tous les éléments ayant en commun un ensemble d’attributs
     constituent une <term>classe d'attributs</term> que nous définissons ainsi <egXML
     xmlns="http://www.tei-c.org/ns/Examples"> <classSpec ident="pointing" type="atts">
     <desc>regroupe les éléments comportant l’attribut <att>href</att></desc> <attList> <attDef
     ident="href"> <desc>fournit l’URI de l’objet ciblé</desc> <datatype> <dataRef name="anyURI"/>
     </datatype> </attDef> </attList> </classSpec></egXML></p>
   </div>
   <!--
      <div type="slide" xml:lang="fr">
        <head>Testez votre compréhension</head>
        <list>
          <item>Ouvrez le fichier <ident>oddex-2.odd</ident> avec oXygen et comparez le avec
              <ident>oddex-1.odd</ident></item>
          <item>Créez une nouvelle version du schéma à partir de cet ODD</item>
          <item>Assurez vous que le fichier test <ident>oddensérez x-1-test.xml</ident> reste valide contre
            cette nouvelle version du schéma </item>
          <item>Comprenez-vous l’effet des références aux classes?</item>
        </list>
      </div>
-->
   <div type="slide" xml:lang="fr">
    <head>Contrôle des valeurs d’un attribut</head>
    <p>Les valeurs possibles d’un attribut peuvent être contrôlées de plusieurs manières : <list>
     <item>Par référence à un <term>datatype</term> (type de donnée) externe, par ex <code>anyURI
      </code> ou <code>ID</code> (ce sont des datatypes standard, définis par le W3C)</item>
     <item>En fournissant notre propre liste des valeurs avec l’élément <gi>valList</gi> et son
      attribut <att>type</att> (avec valeurs <code>closed</code>, <code>semi</code> ou
      <code>open</code>) </item>
     <item>Par référence à un <term>datatype</term> (type de donnée) interne défini par un
      <gi>dataSpec</gi> inclus par notre ODD, par ex. </item>
     </list></p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Par exemple ...</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:rng="http://relaxng.org/ns/structure/1.0"
     rend="tiny"> <classSpec ident="bookAtts" type="atts"> <desc>attributs applicables aux objets
     contenus par des <gi>book</gi></desc> <attList> <attDef ident="xml:id"> <desc>fournit un
     identifiant unique pour le composant</desc> <datatype> <dataRef name="ID"/> </datatype>
     </attDef> <attDef ident="status"> <desc>indique le statut du composant </desc> <valList
     type="closed"> <valItem ident="red"/> <valItem ident="green"/> <valItem ident="unknown"/>
     </valList> </attDef> <attDef ident="version"> <desc>indique le numéro de version du
     composant</desc> <datatype><dataRef key="teidata.versionNumber"/></datatype> </attDef>
     </attList> </classSpec> </egXML>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Utilisation d'une classe</head>
    <list>
     <item>Dans la définition d'un élément il faut spécifier les classes auxquelles il apartient
      avec l'élément <gi>classes</gi> </item>
     <item>Pareil pour les classes : une classe peut hériter ces membres d'une autre </item>
    </list>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:rng="http://relaxng.org/ns/structure/1.0"
     rend="tiny"> <elementSpec ident="para"> <desc>une paragraph de text </desc> <classes> <memberOf
     key="bookPart"/> <memberOf key="bookAtts"/> </classes> <content> <textNode/> </content>
     </elementSpec></egXML>

   </div>
   <div type="slide" xml:lang="fr">
    <head>Testez votre compréhension</head>
    <list>
     <item>Ouvrez le fichier <ident>oddex-2.odd</ident> avec oXygen et comparez le avec
      <ident>oddex-1.odd</ident></item>
     <item>Créez une nouvelle version du schéma à partir de cet ODD</item>
     <item>Assurez vous que le fichier test <ident>oddex-1-test.xml</ident> reste valide avec cette
      nouvelle version du schéma </item>
     <item>Contrôlez qu'oXygen vous propose ces nouveaux attributs, et qu’il contraint correctement
      les valeurs possibles</item>
    </list>
   </div>


   <div xml:lang="fr" type="slide">
    <head>Notion de namespace (rappel)</head>
    <list>
     <item> Un <term>namespace</term> (espace de noms/espace de nommage) fournit une manière
      d’associer et distinguer un groupe d’objets XML. </item>
     <item>Une espace de noms est défini par un URL unique, qui doit être associée avec un préfixe
      unique en utilisant l'attribut <att>xmlns</att>, disponible sur tout élément XML</item>
    </list>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:rng="http://relaxng.org/ns/structure/1.0"
     rend="tiny">
     <![CDATA[
          <book xmlns:my="http://example.com/myNamespace" >
            <!--... -->
          </book>]]></egXML>
    <list>
     <item>Jusqu’à présent, tout ce qui a été nommé dans notre schéma appartient à un namespace
      "nul" </item>
     <item>Supposons que nous souhaitions ajouter un nouvel élément <gi>para</gi> avec un modèle de
      contenu moins restreint. Ce <gi>para</gi> contiendra un mélange de texte et d'images, mais
      nous souhaitons l'appeler un <gi>para</gi> quand même. Pour le distinguer du <gi>para</gi>
      existant, il faut donc l’associer à un autre espace de noms.</item>
     <item>L'attribut <att>ns</att> est disponible sur <gi>elementSpec</gi> pour préciser son espace
      de noms. Pour des raisons techniques, il faut aussi spécifier un préfixe unique. </item>
    </list>
   </div>
   <div xml:lang="fr" type="slide">
    <head>Notion de namespace : exemple</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:rng="http://relaxng.org/ns/structure/1.0"
     rend="tiny"> <elementSpec ident="para" ns="http://myNamespace.org" prefix="extra"> <desc>un
     paragraphe contenant du texte et facultativement des images </desc> <classes><memberOf
     key="bookPart"/></classes> <content> <alternate maxOccurs="unbounded" minOccurs="0">
     <textNode/> <elementRef key="image"/> </alternate> </content> </elementSpec></egXML>
    <p>Notez bien que ce nouvel élément fait partie de la classe <ident>bookPart</ident> ; sinon il
     ne serait pas disponible dans nos documents.</p>
   </div>
   <div xml:lang="fr" type="slide">
    <head>Testez votre compréhension...</head>
    <list>
     <item>Chargez le fichier <ident>oddex-3.odd</ident> et générez un schéma comme d'habitude </item>
     <item>Est-ce que le fichier <ident>oddex-1-test.xml</ident> reste valide avec cette version du
      schéma ?</item>
     <item>Et le fichier <ident>oddex-3-test.xml</ident> il est valide avec quelles versions du
      schema ?</item>

     <!--<item>Ajoutez des traductions dans d’autres langues (allemand, russe, italien, anglais...)
            des descriptions d'éléments</item>

          <item>Modifiez l’élément <gi>my:para</gi> pour lui donner les attributs <att>xml:id</att>
            et <att>status</att></item>
          <item>Modifiez la définition de l’attribut <att>status</att> pour lui permettre de prendre
            la valeur <code>orange</code>.</item>
          <item>Ajoutez un exemple d'usage pour quelques-uns des éléments spécifiés par votre
            ODD</item>
     -->
    </list>
   </div>


   <div type="slide" xml:lang="fr">
    <head>Et (enfin) un mot de la TEI</head>
    <p>Admettons que notre <gi>para</gi> n’est pas si loin de l’élément TEI <gi>p</gi>, que notre
     <gi>image</gi> ressemble beaucoup à l’élément TEI <gi>graphic</gi>, et que notre <gi>book</gi>
     pourrait être considéré comme un élément TEI <gi>div</gi>. Comment ré-écrire cet ODD pour
     profiter des définitions TEI existantes ? </p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <schemaSpec start="div" ident="TEIbookschema"
     docLang="fr"> <elementRef key="div"/> <elementRef key="p"/> <elementRef key="graphic"/>
     <elementRef key="figure"/> <moduleRef key="tei"/> </schemaSpec></egXML>
    <p>L’élément <gi>moduleRef</gi> nous fournit un ensemble de définitions infra-structurales,
     notamment pour les classes utilisées partout dans le système TEI. À part cela, nous n’avons
     besoin que de référencer les éléments TEI souhaités avec un <gi>elementRef</gi>. </p>
    <p><!--L'attribut @source sert a indiquer quelle version de la TEI on souhaite utiliser (nota: il va falloir retrouver 
          ceci sur le reseau so nous n'utilisons pas la version integree dans Oxygen)-->
     L'attribut <att>docLang</att> nous permet de préciser la langue de documentation préférée pour
     notre schéma. L'attribut <att>start</att> précise l'élément racine des documents considérés
     valides (par défaut TEI ou teiCorpus) </p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Création d’un schéma TEI</head>
    <list>
     <item>Chargez le fichier <ident>oddex-tei.odd</ident> avec oXygen et comparez le avec les
      versions précédentes </item>
     <item>Transformez ce fichier en schéma et générez la doc, comme d’habitude. Notez que cette
      version TEI permet des structures inattendues dans notre version initiale. </item>
     <item>Notez qu’un document TEI <emph>doit</emph> utiliser l’espace de nommage TEI</item>
     <item>Notez egalement que le schéma généré retient plusieurs classes définies par la TEI mais
      pas utilisées, de meme que plusieurs exemples d'usage.</item>
     <item>Et enfin, ouvrez le fichier <ident>oddex-tei-test.xml</ident> pour controler qu'il est
      bien valide avec le schéma TEI que vous venez de générer</item>
    </list>
    <!--       <p rend="box">Plus tard, nous verrons comment la TEI se sert du système ODD…</p>
 -->
   </div>
</body>
 </text></TEI>
