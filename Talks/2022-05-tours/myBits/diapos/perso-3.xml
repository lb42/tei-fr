<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xi="http://www.w3.org/2001/XInclude">
 <teiHeader>
  <fileDesc>
   <titleStmt xml:lang="fr">
    <title>ODD : Attendez, ce n’est pas tout !</title>
   </titleStmt>
   <editionStmt>
    <edition> <date from="2015-02">février 2015</date> </edition>
   </editionStmt>
   <publicationStmt>
    <publisher>Lou Burnard Consulting</publisher>
    <availability>
     <p>Freely available for use and derivative works under a Creative Commons Attribution
      license.</p>
    </availability>
   </publicationStmt>
   <sourceDesc>
    <p>Various previous talks, TEI Guidelines, etc.</p>
   </sourceDesc>
  </fileDesc>
  <revisionDesc>
   <change when="2017-02-27">traduction par EC pour la formation de l’ENC</change>
   <change when="2017-02-25">remaniement par LB pour la formation de l’ENC</change>
  </revisionDesc>
 </teiHeader>
 <text>

  <body>

   <div type="slide" xml:lang="fr" xml:id="index">
    <head>ODD : Attendez ce n’est pas tout !</head>
    <list type="numbered">
     <item>ODD comme système de documentation : structuration des ODDs</item>
     <item>Définir des contraintes supplémentaires : utilisation de schematron</item>
     <item>Intégration des encodages non-TEI : xenoData et mathML</item>
     <item>Documenter ses intentions : le Processing Model</item>
     <item>Enchaînement et combinaison d’ODDs</item>
     <item>Qu’est-ce qu’être conforme à la TEI ?</item>
    </list>
   </div>
   <div type="slide" xml:lang="fr">
    <head>ODD comme système de documentation</head>
    <figure>
     <graphic url="../media/mundaneum.jpg"/>
    </figure>


   </div>
   <div type="slide" xml:lang="fr">
    <head>Ecrire son ODD : bonnes pratiques</head>
    <p>ODD est un langage conçu pour faciliter la documentation systématique. Il fournit donc des
     balises spécialisées pour distinguer : <list type="gloss">
     <item><gi>code</gi> : un morceau de code exprimé dans n’importe quel langage formel <egXML
      xmlns="http://www.tei-c.org/ns/Examples"> <code lang="C">count += 56;</code></egXML></item>
     <item><gi>att</gi> : un nom d’attribut <egXML xmlns="http://www.tei-c.org/ns/Examples">The <att
      scheme="TEI">target</att> attribute indicates a URI</egXML> </item>
     <item><gi>gi</gi> : un nom d’élément <egXML xmlns="http://www.tei-c.org/ns/Examples">The
      <gi>table</gi> element is for...</egXML> </item>
     <!--   </list>
        </p>
      </div>
      <div xml:lang="fr" type="slide">
        <head>ODD comme système de documentation (suite) </head>
        <list>-->
     <item><gi>ident</gi> : identifiant ou nom d’un objet en n’importe quel langage formel <egXML
      xmlns="http://www.tei-c.org/ns/Examples"> The <ident type="class">model.biblLike</ident> class
      </egXML> </item>
     <item><gi>val</gi> : valeur d’attribut <egXML xmlns="http://www.tei-c.org/ns/Examples">Cet
      attribut porte la valeur <val>unknown</val></egXML> </item>
     <item><gi>tag</gi> : balise XML <egXML xmlns="http://www.tei-c.org/ns/Examples"><tag>ptr
      target="http://www.bbc.co.uk"/</tag></egXML> </item>
     </list> </p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Structuration d’un ODD</head>
    <p>Mis à part le <gi>schemaSpec</gi> qui définit le schéma, on peut organiser un document ODD
     comme tout autre document TEI, utilisant <gi>div</gi>, <gi>list</gi>, etc. </p>
    <p>Au sein de ce document, des éléments supplémentaires sont prévus pour le regroupement des
     déclarations à l’extérieur du <gi>schemaSpec</gi> : </p>
    <list>
     <item> <gi>specGrp</gi> : un regroupement de déclarations identifiable <egXML
      xmlns="http://www.tei-c.org/ns/Examples">
      <p>Nous n’utilisons que ces éléments du module <ident>linking</ident> : <specGrp
      xml:id="linkingElts">
      <!-- quelques elementSpec etc --> </specGrp> </p></egXML> </item>
     <item><gi>specGrpRef</gi> : indique où on souhaite intégrer les déclarations précisées par un
      <gi>specGrp</gi> <egXML xmlns="http://www.tei-c.org/ns/Examples"> <specGrpRef
      target="#linkingElts"/></egXML></item>
    </list>
   </div>

   <!--
      <div type="slide" xml:lang="fr">
        <head>Un exemple très simple…</head>
        <p>Ouvrir le fichier <ident>tei_bare.odd</ident> avec oXygen</p>
        <p>Retrouvez l’élément <gi>schemaSpec</gi></p>
        <p>Examiner la structuration du fichier (utiliser la perspective
            <ident>Outline/Sommaire</ident> de oXygen)</p>
      </div>-->
   <!-- show tei_bare example -->
   <div type="slide" xml:lang="fr">
    <head>Un exemple plus ambitieux…</head>
    <figure>
     <graphic url="../media/theGuidelines.jpg" width="90%"/>
     <head>The TEI Guidelines : analog editions</head>
    </figure>
    <p>Mais depuis longtemps...</p>
    <figure>
     <graphic url="../media/tei-github.png" width="90%"/>
     <head>The TEI Guidelines : fons et origo</head>
    </figure>
   </div>

   <div type="slide">
    <head>ODD est un langage de spécification...</head>
    <p>La TEI elle-même s’exprime en langage ODD. Ce fut d’ailleurs la raison principale pour
     laquelle le langage fut inventé </p>
    <p>La source TEI P5 (disponible ici <ptr
     target="http://www.tei-c.org/release/xml/tei/odd/Source/"/>) rassemble : <list>
     <item>39 fichiers en TEI-XML, dont 25 contiennent un chapitre de documentation en XML-TEI, la
      plupart (21) définissant un module, par exemple <ident>PH-PrimarySources.xml</ident></item>
     <item>environ 800 fichiers en TEI-XML, chacun définissant un élément, une classe, un type de
      données, ou une macro; plus précisément: <list>
      <item>32 <gi>dataSpec</gi> définissant un type de données (teidata.xxxx) par ex.
       <ident>teidata.percentage</ident></item>
      <item>122 <tag>classSpec type="model"</tag> définissant une classe de type modèle
       (<code>model.xxxx</code>) par ex. <ident>model.biblLike.xml</ident></item>
      <item>77 <tag>classSpec type="att"</tag> définissant une classe de type attribut
       (<code>att.xxxx</code>) par ex. <ident>att.divLike.xml</ident></item>
      <item>6 <gi>macroSpec</gi> définissant une macro (<code>macro.xxxx</code>) par ex.
       <ident>macro.phraseSeq.xml</ident></item>
      <item>580 <gi>elementSpec</gi> définissant un élément, de <ident>ab.xml</ident> jusqu'à
       <ident>zone.xml</ident></item>
      </list></item>
     </list> </p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Par exemple</head>
    <figure>
     <graphic url="../media/abstract.xml.png" width="90%"/>
    </figure>
   </div>
   <div xml:lang="fr" type="slide">
    <head>Organisation physique des <title>Guidelines</title></head>
    <p>Il ne faut pas confondre l’organisation physique (en fichiers) avec l’organisation logique
     (en spécifications, etc.)</p>
    <list>
     <item>Le fichier <ident>guidelines-XX.xml</ident> est la source primaire des
      <title>Guidelines</title> pour la langue XX.</item>
     <item>Mis à part quelques liminaires (un en-tête TEI, la page de titre, etc.), il contient
      plusieurs lignes comme ceci : <code>&lt;include xmlns="http://www.w3.org/2001/XInclude"
      href="Guidelines/en/HD-Header.xml"/&gt; </code> </item>
     <item>Au sein de chaque chapitre, on trouve des <code>xInclude</code> similaires pour les
      objets définis par ce chapitre.</item>
    </list>
   </div>

   <div xml:lang="fr" type="slide">
    <head>Organisation logique des <title>Guidelines</title></head>
    <list>
     <item>À la fin de chaque chapitre définissant un module, il y a (par convention) un élément
      <gi>moduleSpec</gi> qui rassemble toutes les spécifications référencées par le chapitre pour
      définir un module</item>
     <item>Ces spécifications sont organisées (par commodité) en <gi>specGrp</gi>, qui sont ensuite
      référencées par un <gi>specGrpRef</gi> </item>
     <item>Chaque <gi>specGrp</gi> regroupe des spécifications d’objet, indiquées par un
      <code>xInclude</code></item>
    </list>
   </div>

  <!-- <div xml:lang="fr" type="slide">
    <head>Par exemple…</head>
    <!-\-      <desc xml:lang="zh-TW">表格、方程式與圖表</desc>
     cannot be included unless you  have chinese font -\->
    <p>Cette partie de texte des Guidelines :</p>
    <figure>
     <graphic url="../media/ft-1.png"/>
    </figure>
    <p> est générée à partir des lignes de code suivantes : <egXML
     xmlns="http://www.tei-c.org/ns/Examples" rend="teeny"> <div>
     <head>Module for Tables, Formulæ, Notated Music, and Graphics</head>
     <p>The module described in this chapter provides the following features: <moduleSpec
      xml:id="DFTFF" ident="figures"> <desc>Tables, formulæ, notated music, and figures</desc> <desc
      xml:lang="fr">Tableaux, formules et graphiques</desc>
      <!-\- ... -\-> </moduleSpec> The selection and combination of modules to form a TEI schema is
      described in <ptr target="#STIN"/>. <specGrpRef target="#DFTTAB"/> <specGrpRef
      target="#DFTFOR"/> <specGrpRef target="#DFTNTM"/> <specGrpRef target="#DFTGRA"/> </p>
     </div></egXML> </p>
   </div>

   <div xml:lang="fr" type="slide">
    <head>Les pointeurs (#DFTTAB etc.) indiquent des <term>specGrp</term>, comme ceci …</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"> <specGrp
     xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="DFTTAB" n="Tables"> &lt;include
     href="../../Specs/table.xml"/&gt; &lt;include href="../../Specs/row.xml"/&gt; &lt;include
     href="../../Specs/cell.xml"/&gt; </specGrp> </egXML>
    <p>et le xInclude apporte la specification elle-même d’un <term>objet</term>, par ex. :</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"> <elementSpec module="figures"
     ident="cell"> <gloss versionDate="2007-06-12" xml:lang="fr" type="slide">cellule</gloss> <desc
     versionDate="2005-01-14" xml:lang="en">contains one cell of à table.</desc>
     <!-\- ... -\-> </elementSpec></egXML>
   </div>
-->
   <div xml:lang="fr" type="slide">
    <head>Définir des contraintes supplémentaires  </head>
    <figure>
     <graphic url="../media/strawinsky.jpg"/>
    </figure>
   </div>
   <div xml:lang="fr" type="slide">
    <head>Utilisation de schematron</head>

    <list>
     <item>Une spécification d’élément peut proposer des contraintes supplémentaires sur son contenu
      en utilisant un ou plusieurs éléments <gi>constraintSpec</gi> </item>
     <item>Ces règles sont exprimées (typiquement) en utilisant le langage <ref
      target="http://schematron.com/">ISO Schematron </ref> dans son propre espace de noms; la règle
      est emballée dans un <gi>constraint</gi></item>
    </list>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="full"> <elementSpec
     xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="div" module="teistructure" mode="change">
     <constraintSpec ident="div" scheme="isoschematron"> <constraint> <s:assert test="@type='prose'
     and .//tei:p"> une division de prose doit contenir au moins un paragraphe</s:assert>
     </constraint> </constraintSpec> </elementSpec></egXML>
   </div>
   <div xml:lang="fr" type="slide">
    <head>L’élément <gi>constraintSpec</gi> </head>
    <p>Il définit une contrainte qui s’applique au sein de l’élément dans lequel il est déclaré (on
     peut modifier cela en utilisant l'attribut <att>s:context</att>) </p>
    <list>
     <item>L’attribut <att>ident</att> est obligatoire : il fournit un identifiant unique</item>
     <item>L’élément <gi>constraint</gi> contient (typiquement) un <gi>assert</gi> ou un
      <gi>report</gi>, éléments de l’espace de noms
      <code>http://purl.oclc.org/dsdl/schematron</code></item>
     <item>Le contenu de l’élément <gi>assert</gi> est affiché si le test est <hi>false</hi></item>
     <item>Le contenu de l’élément <gi>report</gi> est affiché si le test est <hi>true</hi></item>
     <item>Astuce : plusieurs éléments schematron sont disponibles pour enrichir le texte du message
      affiché, notamment <gi>name</gi> (contexte) et <gi>value-of</gi> (valeur) </item>
     <!--  <item>Voir <ptr target="http://www.schematron.com/"/> pour une description plus
   détaillée</item>-->
    </list>
    <p rend="box">Un schéma RNG intégrant ces règles sera auto-généré si l’on utilise le logiciel
     oXygen pour traiter son ODD </p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Applications typiques des règles Schematron</head>
    <list>
     <item>Contraintes contextuelles : <q>au sein d’un <gi>titleStmt</gi>, il faut fournir un
      <tag>title type='main'</tag></q></item>
     <item>Contraintes de concurrence : <q>si l’attribut X a la valeur A, l’élément qui le porte
      doit contenir un Y</q></item>
     <item>Contraintes textuelles : <q>Les caractères ' et “ ne sont pas permis au sein d’un
      <gi>p</gi> apparaissant dans le <gi>body</gi></q> </item>
     <item>Contraintes contextuelles : <q>les mots en français (<att>xml:lang</att>='fr') ne sont
      pas permis au sein d’un élément latin (<att>xml:lang</att>='la')</q></item>
     <item>Intégrité référentielle : <q>un pointeur exprimé sous la forme d’une URL et commençant
      par # doit correspondre à un élément ayant un <att>xml:id</att> identique quelque part dans le
      document</q> </item>
    </list>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Par exemple…</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <constraintSpec
     xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="titleConstraint"> <constraint> <s:assert
     test="tei:fileDesc/tei:titleStmt/tei:title[@type='main']"> il faut fournir un titre principal
     </s:assert> </constraint> </constraintSpec></egXML>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <elementSpec ident="figure">
     <!-- ... --> <constraintSpec xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="demo-c2">
     <constraint> <s:report test="not(tei:figDesc or tei:head)"> Votre figure ne contient ni un
     figDesc ni un head : aucun attribut <att>alt</att> n'est générable</s:report> </constraint>
     </constraintSpec> </elementSpec></egXML>
   </div>
   <div xml:lang="fr" type="slide">
    <head>Un schematron plus complexe </head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <constraintSpec ident="validtarget">
     <constraint> <rule xmlns="http://purl.oclc.org/dsdl/schematron" context="tei:*[@target]"> <let
     name="results" value="for $t in tokenize(normalize-space(@target),'\s+')        return
     starts-with($t,'#')        and not(id(substring($t,2)))"/> <report test="some $x in $results
     satisfies $x"> Erreur: Chaque pointeur dans "<value-of select="@target"/>" doit cibler un ID
     dans ce même document (<value-of select="$results"/>)</report> </rule> </constraint>
     </constraintSpec> </egXML>

    <list>
     <item><code>normalize-space(@target)</code> : supprimer les blancs non-signifiants</item>
     <item><code>tokenize(normalize-space(@target),'\s+')</code> : couper la valeur de l’attribut
      dans des tokens séparés par des blancs</item>
     <item><code> starts-with($t,'#')</code> : ne considérer que les pointeurs locaux</item>
     <item><code>not(id(substring($t,2)))</code>: y-a-t il un attribut <att>xml:id</att> dont la
      valeur correspond à la valeur indiquée en sélectionnant ce qui suit son 2<hi
      rend="superscript">ème</hi> caractère</item>
     <item><code>some $x in $results satisfies $x</code> : expression XPath permettant la validation
      d’une séquence de valeurs booléennes (vraies/fausses)</item>
    </list>
   </div>
   <!--  <div xml:lang="fr" type="slide">
        <head>Usage de schematron par la TEI</head>
        <p>Nous ajoutons de plus en plus de <gi>contraintSpec</gi> de plus en plus ambitieux dans les
          Guidelines. </p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples"
          xmlns:s="http://purl.oclc.org/dsdl/schematron">
          <constraintSpec ident="reforkeyorname" scheme="schematron">
            <constraint>
              <s:assert test="@ref or @key or @name">
                One of the attributes 'name', 'ref' or 'key'
                must be supplied</s:assert>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="activemutual" scheme="schematron">
            <constraint>
              <s:report test="@active and @mutual">
                Only one of the attributes @active and @mutual
                may be supplied</s:report>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="activepassive" scheme="schematron">
            <constraint>
              <s:report test="@passive and not(@active)">
                the attribute 'passive' may be supplied
                only if the attribute 'active' is supplied</s:report>
            </constraint>
          </constraintSpec></egXML>
        <p>L'application de ces règles nécessite un environnement de validation spécifique (par ex
          oXygen+RELAXNG), pas forcement disponible pour tous les projets. Mais le système
          Schematron fournit un contrôle très fin et bien adapté aux besoins d'un projet.</p>
      </div>
      -->

   <div type="slide">
    <head> Intégration des encodages non-TEI : xenoData et mathML</head>
    <figure>
     <graphic url="../media/voynich.jpg" width="60%"/>
    </figure>
   </div>
   <div type="slide">
    <head>Inclusion des métadonnées non-TEI</head>
    <p>Pour inclure les éléments non-TEI dans notre document, il est judicieux de les envelopper
     dans un élément explicitant leur statut. </p>
    <p>Par ex. on peut inclure des métadonnées non-TEI en utilisant <gi>xenoData</gi> <egXML
     xmlns="http://www.tei-c.org/ns/Examples"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:dc="http://purl.org/dc/elements/1.1/"> <xenoData> <rdf:RDF><rdf:Description
     rdf:about="http://www.worldcat.org/oclc/606621663"> <dc:title>The description of a new world,
     called the blazing-world</dc:title> <dc:creator>The Duchess of Newcastle</dc:creator>
     <dc:date>1667</dc:date> <dc:identifier>British Library, 8407.h.10</dc:identifier>
     <dc:subject>utopian fiction</dc:subject></rdf:Description></rdf:RDF> </xenoData> </egXML></p>
    <p rend="box">Cette approche risque evidemment de fournir des informations redondantes voire
     incohérentes... </p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Inclusion d'expressions MathML</head>
    <p> MathML est un langage XML très complet pour la représentation des expressions mathématiques.
     Comment faire pour intégrer de telles expressions dans un document TEI ? </p>
    <p>Il faut <list type="ordered">
     <item>inclure les composants du schéma MathML au schéma TEI </item>
     <item>modifier le modèle de contenu de l’élément TEI <gi>formula</gi></item>
     <item>résoudre les éventuels conflits de nommage : il y a un élément <gi>list</gi> dans TEI
      mais également dans MathML !</item>
     </list></p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>TEI + MathML : le ODD</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <schemaSpec ident="tei_math" prefix="tei_"
     start="TEI teiCorpus"> <moduleRef
     url="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/mathml2-main.rng"/> <moduleRef
     key="header"/> <moduleRef key="core"/> <moduleRef key="tei"/> <moduleRef key="textstructure"/>
     <moduleRef key="figures"/> <elementSpec module="figures" ident="formula" mode="change">
     <content> <elementRef key="mathml.math"/> </content> </elementSpec> </schemaSpec> </egXML>
    <p rend="box">L’attribut <att>prefix</att> nous permet de distinguer les identifiants ressortant
     des schémas différentes</p>
   </div>
 <div xml:lang="fr" type="slide">
    <head>TEI + MathML : le document</head>
   <!--  <p><figure>
     <graphic url="../media/vavilov.png" height="20%"/>
     </figure></p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
   <![CDATA[  <p>The relevant inequalities and distributions are <formula notation="MathML"> <math
     xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"> <mn>0</mn> <mo>.</mo> <mn>0</mn>
     <mn>1</mn> <mo>&lt;</mo> <mi>κ</mi> <mo>&lt;</mo> <mn>1</mn> <mn>0</mn> </math> </formula>,
     Vavilov distribution, and ... </p> ]]></egXML>
 -->
  
  <p><figure>
   <graphic url="../media/carre.png" height="50%"/>
  </figure></p>
  <egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[  
   <p> Voici un magnifique carré :</p>
   <formula notation="mathML">
    <math xmlns="http://www.w3.org/1998/Math/MathML">
    <mrow>
     <msup>
      <mfenced>
       <mrow>
        <mi>a</mi>
        <mo>+</mo>
        <mi>b</mi>
       </mrow>
      </mfenced>
      <mn>2</mn>
     </msup>
    </mrow> 
   </math></formula>]]>
  </egXML>
   </div>

   <div type="slide">
    <head>Documenter les intentions : le "Processing Model"</head>
    <figure>
     <graphic url="../media/mussolini.png" width="60%"/>
    </figure>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Ajout d’un <soCalled>processing model</soCalled> (modèle de traitement)</head>
    <p>Vous pouvez enrichir votre documentation ODD avec des déclarations précises sur la manière
     dont des éléments particuliers devraient être mis en forme.</p>
    <p>Cela est complémentaire aux fonctionnalités offertes avec <att>rend</att> et <att>style</att>
     qui décrivent la manière dont la source originale (non-digitale) a été formatée.</p>
   
    <p>Un élément <gi>model</gi> peut documenter le <term>behaviour</term> attendu pour le traitement d’un élément: </p>
    <p>Le concept de <ident>behaviour</ident> est introduit pour définir des concepts de formattage
     employés communément, par exemple, <q>block</q>, <q>inline</q>, <q>pointer</q>, etc.</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <elementSpec mode="change" ident="quote">
     <model predicate="ancestor::p" behaviour="inline"/> <model predicate="not(ancestor::p)"
      behaviour="block"/> <desc xml:lang="fr">Traiter un <gi>quote</gi> contenu d'un<gi>p</gi> comme "inline"; ailleur, comme "block"</desc></elementSpec></egXML>
   <p>Le fonctionnement d'un <soCalled>behaviour</soCalled> peut etre modifié selon ses paramètres</p> 
   </div>
   <div type="slide" xml:lang="fr">
    <head>Behaviours : quelques exemples</head>
    <table>
     <row role="label">
      <cell>behaviour</cell>
      <cell>parametres</cell>
      <cell>fonction</cell>
     </row>
     <row>
      <cell>alternate</cell>
      <cell> (default, alternate) </cell>
      <cell>supporte la présentation de visualisations alternatives, par exemple en rendant le
       contenu préféré, en le présentant en parallèle, ou en bien en permettant de passer de l’un à
       l’autre.</cell>
     </row>
     <row>
      <cell>graphic</cell>
      <cell> (url, width, height, scale, title)</cell>
      <cell>si url est présent, l’utiliser pour rendre l’élément graphic, sinon rendre une image
       placeholder.</cell>
     </row>
     <row>
      <cell>omit</cell>
      <cell/>
      <cell> ne rien faire, ne pas traiter les enfants</cell>
     </row>
     <row>
      <cell>inline</cell>
      <cell> (content, label</cell>
      <cell>créer un élément inline</cell>
      <cell/>
      <cell/>
     </row>
    </table>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Usage du model</head>
    <list>
     <item>on peut fournir plusieurs <gi>model</gi> dans un seul <gi>elementSpec</gi>, pour indiquer
      que plusieurs traitements sont possibles dans des situations differentes</item>
     <item>on peut specifier le/s contextes dans lesquels ce model s'applique avec l'attribut
      <att>predicate</att> 
      <egXML xmlns="http://www.tei-c.org/ns/Examples"> <elementSpec mode="change" ident="quote">
       <model predicate="ancestor::p" behaviour="inline"> <desc xml:lang="fr">si à l'intérieur d'un
        paragraphe, affichage inline</desc> </model> <model predicate="not(ancestor::p)"
         behaviour="block"> <desc xml:lang="fr">si à l'exterieur d'un paragraphe, affichage en
          bloc</desc> </model> </elementSpec> </egXML>
     </item>
    
     <item>on peut spécifier l'affichage d'un élément <list>
      <item>explicitement, avec <gi>outputRendition</gi></item>
      <item>indirectement avec <att>cssClass</att> en faisant référence à une classe CSS</item>
      <item>indirectement avec <att>useSourceRendition</att> </item>
      </list>
      <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec mode="change" ident="ident"><model behaviour="inline">
       <outputRendition>font-weight:bold</outputRendition>
      </model>
       <desc xml:lang="fr">Afficher l'element <gi>ident</gi> en gras et inline</desc>
      </elementSpec></egXML></item>
    </list>
   
    <p rend="box">Ce système est utilisé <foreign>in extenso</foreign> par l'outil <ident>TEI
     Publisher</ident>: voir <ptr target="https://teipublisher.com/exist/apps/tei-publisher/doc/documentation.xml"/>
    </p>
   </div>

   <div type="slide" xml:lang="fr">
    <head> Combien d'ODD faut-il dans un projet?</head>
    <figure>
     <graphic url="../media/chain.jpg" width="60%"/>
    </figure>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Enchaînement et combinaison d’ODDs</head>
    <p><figure>
     <graphic url="../media/eltec-chains.png" width="60%"/>
     <head>Exemple de chaînage ODD</head>
     </figure> </p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>Usage de l’attribut <att>source</att></head>
    <p>L’attribut <att>source</att> sert à spécifier la source des déclarations qu’on souhaite
     intégrer : par défaut celles de la version la plus récente de TEI P5.</p>
    <p>Ou bien… </p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <schemaSpec ident="test2" prefix="tei_"
     start="TEI" source="tei:1.5.0">
     <!-- dans la version 1.5.0 --> </schemaSpec></egXML>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <schemaSpec ident="test3" prefix="tei_"
     start="TEI" source="https://www.tei-c.org/Vault/P5/1.5.0/xml/tei/odd/p5subset.xml">
     <!-- version plus verbose du même --> </schemaSpec></egXML>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <schemaSpec ident="test4"
     source="myCompiled.odd">
     <!-- ensemble de déclarations maison --> </schemaSpec></egXML>
    <p rend="box"> <att>source</att> peut être utilisé sur <gi>classRef</gi>, <gi>elementRef</gi>,
     <gi>macroRef</gi>, et <gi>moduleRef</gi> : il doit pointer vers un <term>ODD compilé</term></p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>"Compilation" d'un ODD</head>
    <p>Rappel: un ODD peut rassembler deux types d’objet: <list>
     <item>des spécifications explicites, plus ou moins complétées</item>
     <item>des références à de telles spécifications</item>
     </list> </p>
    <p> L'attribut <att>source</att> doit pointer sur un ODD où <list>
     <item>tous les références sont résolues et remplacées par la spécification referencée </item>
     <item>toutes les déclarations partielles pour un seul objet sont résolues </item>
     </list></p>
    <p rend="box">Nous appelons cette procédure "compilation" et elle est effectuée par une feuille
     de style XSLT <ident>odd2odd</ident></p>
   </div>
   <!--
      Transformer le fichier <ident>tei_bare.odd</ident> en <q>ODD compilé</q> avec oXygen
            en utilisant la feuille de style
              <ident>${frameworks}/tei/xml/tei/stylesheet/odds/odd2odd.xsl</ident></item>
          <item>Regardez rapidement la sortie en profitant de l’affichage
              <soCalled>Outline</soCalled></item>
          <item>Tous ces <gi>classSpec</gi> et <gi>dataSpec</gi> sont fournis par le module
              <ident>tei</ident> : ils sont constitutifs de l’infrastructure TEI.</item>
          <item>Enregistrez cette version sous le nom <ident>tei_bare.compiled.odd</ident></item>
        </list>
      </div>-->

   <div type="slide" xml:lang="fr">
    <head>Usage d’un ODD compilé</head>
    <p>Supposons une version compilée du schéma TEI-bare. Nous allons réutiliser TEI-bare, mais nous
     souhaitons supprimer l’élément <gi>head</gi></p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <schemaSpec ident="Bare-minus"
     source="tei_bare.compiled.odd" start="TEI"> <moduleRef key="tei"/> <moduleRef key="header"/>
     <moduleRef key="core" except="head"/> <moduleRef key="textstructure"/> </schemaSpec></egXML>
    <!--<p>Et juste pour la complétude, voici une autre manière d’arriver au même effet : </p>
 <egXML xmlns="http://www.tei-c.org/ns/Examples">
   <schemaSpec ident="Bare-minus" source="tei_bare.compiled.odd" start="TEI">
     <moduleRef key="tei"/>
     <moduleRef key="header"/>
     <moduleRef key="core"/>
     <moduleRef key="textstructure"/>
     <elementSpec module="core" ident="head" mode="delete"/>
   </schemaSpec></egXML>-->
    <p>Notez qu’on ne peut supprimer ou modifier que les choses qui sont déjà présentes dans l’ODD
     compilé spécifié par l’attribut <att>source</att>. </p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Chaînage : super-ensemble</head>
    <p>Nous allons réutiliser TEI-bare, mais nous souhaitons ajouter le module <ident>gaiji</ident> </p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <schemaSpec ident="Bare-plus"
     source="tei_bare.compiled.odd" start="TEI"> <moduleRef key="tei"/> <moduleRef key="header"/>
     <moduleRef key="gaiji" source="http://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
     <moduleRef key="textstructure"/> </schemaSpec></egXML>
    <p>Le <gi>moduleRef</gi> qui va fournir le module <ident>gaiji</ident> utilise son propre
     attribut <att>source</att> pour spécifier où aller chercher les déclarations de ce module.</p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Rétablir un élément supprimé</head>
    <p>Nous allons ramener l'élément <gi>q</gi> qui a été effacé du schéma compilé :</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> <schemaSpec ident="Bare-plus"
     source="tei_bare.compiled.odd" start="TEI"> <moduleRef key="tei"/> <moduleRef key="header"/>
     <elementRef key="q" source="tei:3.0.0"/> <moduleRef key="textstructure"/> </schemaSpec></egXML>
   </div>

   <div type="slide">
    <head>Chaînage ODD : exercice</head>
    <list>
     <item>Supposons que vous allez créer un system de "crowdsourcing" pour faciliter la
      transcription d'une archive documentaire. Une fois transcrit, chaque document sera enrichi
      avec des métadonnées riches </item>
     <item>On aura donc besoin d'au moins deux schémas: <list>
      <item>un schéma adapté aux transcriptions</item>
      <item>un schéma adapté aux métadonnées</item>
      </list></item>
     <item>En sus, il va falloir valider les documents complets, donc un schéma adapté à tous les
      deux .. </item>
     <item>Notons d'ailleurs la présence des elementRef etc. communs aux deux schémas</item>
    </list>
    <p rend="box">Le chaînage ODD est la réponse!</p>
   </div>

   <div type="slide">
    <head>D'abord, la "mère porteuse"</head>
    <p>Dans votre dossier <ident>Work</ident> ouvrez d'abord le fichier
     <ident>motherODD.xml</ident></p>
    <list>
     <item>C'est un ODD typique, avec élément de racine <gi>TEI</gi>, défini par rapport aux
      Guidelines complètes</item>
     <item>il fournit <list>
      <item>des elementRef nécessaire pour la transcription (par ex. <gi>pb</gi>, <gi>p</gi>,
       <gi>hi</gi>) </item>
      <item>des elementRef nécessaires pour les métadonnées (par ex. <gi>sourceDesc</gi>,
       <gi>xenoData</gi>) </item>
      <item>des elementRef nécessaires pour l'enrichissement des transcriptions (par ex
       <gi>listPerson</gi>, <gi>person</gi>) </item>
      </list></item>
     <item>Le schéma ressortissant de cet ODD sera très générique, trop permissif pour nos besoins :
      nous allons donc le spécialiser. </item>
    </list>
   </div>
   <div type="slide">
    <head>Procédure - définition de transformation</head>
    <p>Nous allons d'abord "compiler" cet ODD. La feuille de style nécessaire n'est pas disponible
     par défaut dans oXygen : il faut donc créer une scénario de transformation </p>
    <list>
     <item>Cliquez CTRL-MAJ-C. Cliquez Nouveau, et sélectionnez "XML transformation avec
      XSLT".</item>
     <item>Nommez la transformation <ident>ODDcompile</ident></item>

     <item>Laisser XML URL tel quel. Changer XSL URL pour pointer vers
      <ident>${frameworks}/tei/xml/tei/stylesheet/odds/odd2odd.xsl</ident>
      <!--pour le trouver--> (oui, il y a bien deux <ident>tei</ident> dans ce chemin). Cliquer sur
      l'onglet "Sortie".</item>
     <item>Dans la boîte <ident>Enregistrer sous</ident> taper <ident>${cfn}_compiled.xml</ident>
      comme nom du fichier de sortie. Cliquer OK pour revenir. </item>
     <item>Le scénario <ident>ODDcompile</ident> est maintenant associé avec notre ODD. Cliquer
      "<code>Appliquer le/les scénario(s) associé(s)</code>" pour le mettre en marche. </item>
     <item>Si tout va bien, vous allez trouver un nouveau fichier
      <ident>motherODD_compiled.xml</ident> dans votre dossier de travail </item>
    </list>
   </div>

   <div type="slide">
    <head>Procédure - création des spécialisations</head>
    <p>Regardez maintenant les deux fichiers <ident>justTranscript.odd</ident> et
     <ident>justMetadata.odd</ident>. Notez bien que chacun de ces fichiers ODD fait référence au
     <ident>motherODD_compiled.xml</ident> dans son attribut <att>source</att>. Notez également que
     les deux précisent des valeurs différentes pour leur attribut <att>start</att>. Pourquoi? </p>
    <list>
     <item>Transformez justTranscripts.odd en utilisant les scénarios <code>TEI ODD XHTML </code>et
      <code>TEI ODD to RELAX NG (compact syntax)</code> qui sont intégrés dans oXygen</item>
     <item>Créez un nouveau fichier XML (CTRL-N)</item>
     <item>Spécifiez que ce fichier se valide avec le schéma
      <ident>out/justTranscription.rnc</ident> en utilisant le bouton <ident>Personnaliser</ident> </item>
     <item>Vérifiez l'effet des contraintes du schéma</item>
     <item>Ouvrez le fichier <ident>transcription.xml</ident> et validez-le avec le schéma
      out/justTranscription.rnc</item>

     <item>Ensuite, faire pareil pour les fichiers <ident>justMetadata.odd</ident> et
      <ident>metadata.xml </ident></item>
    </list>
   </div>
   <div type="slide">
    <head>Validation du document complet</head>
    <p>Notre projet va créer des centaines de petit document, un par transcription. Nous disposons
     maintenant d'une méthode pour les valider un à la fois. Comment faire pour valider un ensemble
     de ces petits fichier ? Il y a plusieurs réponses possibles. Nous en proposons une très simple
     : l'usage du standard XInclude</p>
    <list>
     <item>D'abord il faut un troisième schéma, qui combine les deux autres. Rouvrez donc le fichier
      <ident>motherODD.xml</ident> et transformez-le en un schéma générique.</item>
     <item>Ouvrez maintenant le fichier <ident>driver.tei</ident> et validez-le avec votre schéma
      motherODD.rnc </item>
     <item>Ce driver nous a permis de combiner dans un seul élément <gi>TEI</gi> une transcription
      seule avec ses propres métadonnées. Comment combiner plusieurs documents ? Pour cela, nous
      aurons besoin de l’élément <gi>teiCorpus</gi> qui rassemble plusieurs <gi>TEI</gi>.</item>
     <item>Ouvrez donc le fichier <ident>corpusDriver.tei</ident>. Vous devez utiliser votre
      imagination et votre créativité pour compléter l'exemple en ajoutant d'autre transcriptions !
      En faisant cela, notez bien la nécessité d’éviter les doublons dans les métadonnées, et en
      conséquence de faire une espèce de factorisation des métadonnées... </item>
    </list>
   </div>

   <div type="slide">
    <head>Qu’est-ce qu’être conforme à la TEI ?</head>
    <figure>
     <graphic url="../media/conformity.jpg" width="60%"/>
    </figure>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Variétés de l'ODD</head>
    <p> <figure>
     <graphic url="../media/oddFlavours.png" height="40%"/>
     </figure></p>
    <list>
     <item>Chacune de ces formes représente : <list>
      <item>un ODD</item>
      <item>le schéma généré à partir de cet ODD</item>
      <item>l'ensemble de documents considérés comme valides selon ce schéma</item>
      </list></item>

     <item>un <q>TEI subset</q> fournit un sous-ensemble des composants constituant TEI All </item>
     <item>un <q>customised subset</q> est également un sous-ensemble avec des personnalisations
      supplémentaires</item>
     <item>un <q>extended subset</q> contient des composants qui ne font pas partie de TEI All
     </item>
    </list>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Le plus simple</head>
    <list>
     <item>Vos modifications génèrent un schéma réduit, plus précis, plus adapté à votre projet et
      une documentation plus exacte et correcte pour votre communauté d'utilisateurs</item>
     <item>Mais vos documents restent toujours valides par rapport à TEI All et vous respectez
      toujours le modèle sémantique de la TEI.</item>
     <item>Les extensions éventuelles sont signalées clairement, en utilisant une autre espace de
      nommage, et sont d’ailleurs expliquées dans votre ODD </item>
    </list>
   </div>


   <div type="slide" xml:lang="fr">
    <head>Qu’est-ce signifie « être conforme à la TEI » ?</head>
    <list>
     <item><hi>être honnête</hi> : Les éléments XML qui sont déclarés comme appartenant au namespace
      TEI doivent respecter les définitions TEI de ces éléments</item>
     <item><hi>être explicite</hi> : Pour valider un document TEI, un ODD est fortement conseillé,
      parce que cela mettra en évidence toutes les modifications effectuées.</item>
    </list>
    <p>Plus formellement, pour un document TEI conforme :<list>
     <item>il doit être un document XML bien-formé</item>
     <item>si la construction de son schéma ne prend en compte que les éléments appartenant à
      l’espace de nommage TEI, l'ensemble de documents considéré comme valide par ce schéma devrait
      être un sous-ensemble de l'ensemble de documents considéré valide par le schéma
      TEI-ALL.</item>
     <item>Tout autre élément présent doit appartenir à un autre namespace</item>
     </list></p>
    <p rend="box">L’objet de ces règles est de simplifier le <q>blind interchange</q> des
     documents ; elles ne le garantissent pas.</p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Les limites de la personnalisation</head>
    <list>
     <item>Est-ce que l’on peut supprimer n’importe quoi ? par ex. <gi>title</gi> ?</item>
     <item>À quoi servent les classes vides ?</item>
     <item>Est-ce qu’on peut ajouter n’importe quoi ? quelles limitations ?</item>
    </list>
    <p>L’enjeu c’est de permettre à une autre personne/système de comprendre votre encodage, non pas
     forcément de la contraindre à vous suivre aveuglement !</p>
    <p rend="box">Voir <title>What is TEI Conformance, and Why Should You Care?</title> ( <ref
     target=" https://doi.org/10.4000/jtei.1777">https://doi.org/10.4000/jtei.1777</ref>)</p>
   </div>
   <!-- <div type="slide" xml:lang="fr">
        <head>...</head>
        <list>
          <item>https://lb42.github.io/W/howtoChain.html </item>
          <item>https://lb42.github.io/W/conformance.html
            What is TEI Conformance, and Why Should You Care?
            Lou Burnard
            https://doi.org/10.4000/jtei.1777
            https://journals.openedition.org/jtei/1777
          </item>
        </list>
      </div>
    </body>
    <back>
      <div type="slide">
        <p>Les principaux langages de schéma - (W3C) XML Schema (xs ou xsd), dont un des avantages
          est de permettre un typage très fin des données ; - Relax NG (REgular LAnguage for Xml
          Next Generation) en syntaxe compacte (rnc) ou en syntaxe XML (rng) ; plus simple, souple
          et très largement utilisé (TEI, Docbook, OpenDocumentFormat, EAD3) – la TEI lui est
          historiquement liée. - ISO Schematron, permet de définir des tests et contraintes de
          contenu absentes des autres langages. Voir l'article du Wikipedia anglophone : « XML
          Schema Language comparison »
          https://en.wikipedia.org/wiki/XML_Schema_Language_comparison</p>
      </div>-->

   <div type="slide">
    <head>Ressources</head>
    <list>
     <label>Information faisant autorité</label>
     <item><list>
      <item>« 22 : Documentation » in <title>TEI Guidelines</title>. <ref
       target="https://tei-c.org/release/doc/tei-p5-doc/en/html/TD.html">
       https://tei-c.org/release/doc/tei-p5-doc/en/html/TD.html </ref></item>
      <item>« 23 : Using the TEI » in <title>TEI Guidelines</title>. <ref
       target="https://tei-c.org/release/doc/tei-p5-doc/en/html/USE.html">
       https://tei-c.org/release/doc/tei-p5-doc/en/html/USE.html </ref></item>
      </list></item>
     <label>Matériaux pédagogiques</label>

     <item><list>
      <item>« Module 8: Customizing TEI » in <title>TEI By Example</title> <ref
       target="https://teibyexample.org/tutorials/TBED08v00.htm"
       >https://teibyexample.org/tutorials/TBED08v00.htm</ref> </item>
      <item>« Personnaliser la TEI » <title>Qu’est-ce que la Text Encoding Initiative ?</title>,
       <ref target="http://books.openedition.org/oep/1304"
       >http://books.openedition.org/oep/1304</ref>.</item>
      <item> « One Document Does-it-all (ODD) » in <title>Balisage Symposium on Markup Vocabulary
       Customization</title> <ref
       target="http://www.balisage.net/Proceedings/vol24/html/Viglianti01/BalisageVol24-Viglianti01.html"
       >
       http://www.balisage.net/Proceedings/vol24/html/Viglianti01/BalisageVol24-Viglianti01.html</ref></item>
      <item>« TEI Customization Primer » (Women Writers Project) <ref
       target="https://www.wwp.neu.edu/outreach/resources/customization.html"
       >https://www.wwp.neu.edu/outreach/resources/customization.html</ref></item>
      </list></item>
     <label>Lectures supplémentaires</label>
     <item><list>
      <item> « RELAX NG with son of ODD » (eXtreme Programming Languages, 2004) <ref
       target="https://ora.ox.ac.uk/objects/uuid:b337cb6d-9e7b-4bbc-aa71-f0b9d12bb8de">
       https://ora.ox.ac.uk/objects/uuid:b337cb6d-9e7b-4bbc-aa71-f0b9d12bb8de</ref></item>
      <item> « Reviewing the TEI ODD System » (ACM DocEng, 2013) <ref
       target="http://dx.doi.org/10.1145/2494266.2494321"
       >http://dx.doi.org/10.1145/2494266.2494321</ref></item>
      </list></item>
    </list>
   </div>
  </body>
 </text>
</TEI>
