<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../teitalks.nvdl" type="application/xml" schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
 <teiHeader>
  <fileDesc>
   <titleStmt>
    <title>An introduction to ODD and ODD Chaining</title>
    <author>Lou Burnard</author>
   </titleStmt>
   <publicationStmt>
    <p>For presentation at CLS Infra Workshop, 29th September 2021, 13:00 – 17:00 CET</p>
   </publicationStmt>
   <sourceDesc>
    <p>From previous talks in Tours, Paris, Barcelona, Paris, Graz...</p>
   </sourceDesc>
  </fileDesc>
  <revisionDesc>
   <change who="#LB" when="2014-09-23">Revised for MM14</change>
   <change who="#LB" when="2014-02-17">Revised for Mutec</change>
   <change who="#LB" when="2013-10-20">Finalised for SUFCO formation, Oct 2013</change>
  </revisionDesc>
 </teiHeader>
 <text>
  <body>
   <div type="slide">
    <figure>
     <graphic url="../Graphics/teiTiger.jpg" width="60%"/>
     <head>Taming the TEI Tiger: an ODD story</head>
    </figure>
    <!--  </div>
     
     <div type="slide" xml:lang="fr">-->
    <!--    <head>Customizing the TEI </head>
  -->
    <p rend="box">Customising the TEI is a way of adapting its powerful general purpose architecture
     to the more constrained and limited objectives of a specific project. </p>
    <list>
     <item> TEI customizations are expressed (of course) in TEI ... </item>
     <item> ... using a special TEI customization which we call <term>ODD</term></item>
    </list>
    <!-- (One Document
          Does it all/Un document fait tout)-->
   </div>

   <div type="slide">
    <head>Why might you need an ODD?</head>
    <list>
     <item>You are planning to produce valid XML resources ... </item>
     <item>so you will need to define an XML schema to describe them</item>
     <item>You need to provide documentation about <list> <item>the semantics of your XML
      schema</item> <item>constraints, usage notes, examples</item> </list></item>
     <item>You need to keep the two in step</item>
     <item>You want to share the results <list> <item>with others</item> <item>with yourself, long
      term</item> </list></item>
     <item>you don't want to reinvent the wheel</item>
    </list>
    <p rend="block">This applies whether or not you are using the TEI!</p>
   </div>

   <div type="slide">
    <head>ODD : the basic notion</head>
    <p rend="box"><hi>O</hi>ne <hi>D</hi>ocument <hi>D</hi>oes it all</p>
    <p>A special XML vocabulary (defined by the TEI) for specifying.... <list> <item>schemas</item>
     <item>XML element types independent of a particular schema language</item> <item>public or
     private groupings of such elements </item> <item>patterns (macros) </item> <item>classes (and
     subclasses) of element</item> <item>data constraints</item> </list> </p>
    <p>And also for specifying references which can pull into a schema <list> <item>named components
     from the above list</item> <item>objects from other namespaces</item> </list></p>
    <p rend="box">All closely integrated with a set of traditional document markup elements</p>
   </div>

   <div type="slide">
    <head>Basic ODD components for schema definition</head>
    <list type="gloss">
     <label>
      <gi>schemaSpec</gi>
     </label>
     <item>Defines and identifies a schema</item>
     <label>
      <gi>elementSpec</gi>
     </label>
     <item>Provides some or all of an element specification, new or existing</item>
     <label>
      <gi>elementRef</gi>
     </label>
     <item>References an existing element specification</item>
     <label><gi>classSpec</gi>, <gi>classRef</gi></label>
     <item>Likewise, for classes</item>
     <label><gi>attDef</gi>, <gi>attRef</gi></label>
     <item>Likewise, for attributes</item>
     <label>
      <gi>moduleRef</gi>
     </label>
     <item>References an existing <soCalled>module</soCalled> i.e. a group of predefined elements
      and attributes, entirely or partially</item>
    </list>
   </div>

   <div type="slide">
    <head>A simple example</head>
    <p rend="box">Our markup uses a <gi>book</gi> element, which contains a mixture of
     <gi>para</gi>s and <gi>picture</gi>s. We have never heard of the TEI and we don't want to use
     it. </p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
     <schemaSpec ns="" start="book" ident="bookSchema">
      <elementSpec ident="book">
       <desc>Root element for a very simple schema</desc>
       <content>
        <alternate maxOccurs="unbounded">
         <elementRef key="para"/>
         <elementRef key="picture"/>
        </alternate>
       </content>
      </elementSpec>
      <!-- ... continues on next slide -->
     </schemaSpec>
    </egXML>
   </div>
   <div type="slide">
    <head>A simple example, contd.</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
     <!-- ... contd -->
     <elementSpec ident="para">
      <desc>paragraph of running text</desc>
      <content>
       <textNode/>
      </content>
     </elementSpec>
     <elementSpec ident="picture">
      <desc>empty element pointing to a graphic file</desc>
      <content>
       <empty/>
      </content>
      <attList>
       <attDef ident="href">
        <desc>supplies the URI of the object pointed at</desc>
        <datatype>
         <rng:data xmlns:rng="http://relaxng.org/ns/structure/1.0" type="anyURI"/>
        </datatype>
       </attDef>
      </attList>
     </elementSpec>
    </egXML>
   </div>

   <div type="slide">
    <head>So what?</head>
    <list>
     <item>We have all the information needed to build a schema in RELAX NG, W3C schema, or DTD
      language by a simple XSLT transformation</item>
     <item>We can also extract documentary fragments (e.g. the descriptions of elements and
      attributes)</item>
    </list>
    <p>TEI provides a special element for the latter purpose: <egXML
     xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"><specList><specDesc key="para"/><specDesc
     key="picture"/></specList></egXML> which would generate something like <list type="gloss">
     <label><gi>para</gi></label> <item>textual element in a very simple schema (may have pictures
     in it) </item> <label><gi>picture</gi></label> <item>Empty element to point at a picture</item>
     </list> inside our running text</p>
   </div>
   <div type="tp">
    <head>Let's try this out ... </head>
    <list>
     <item>Start oXygen</item>
     <item>Make a new document (CTRL-N) using the <ident>TEI-P5 -> ODD Customization</ident>
      Framework Templates</item>
     <item>Replace the proposed <gi>schemaSpec</gi> with the content of the file
      <ident>oddex-1.xml</ident>; add the content of the file <ident>oddex-1-doc.xml</ident> before
      it; save the result as <ident>oddex-1.odd</ident> </item>
     <item>Use built-in Transformation Scenarios <ident>TEI ODD to RELAX NG XML</ident> and
      <ident>TEI ODD to HTML</ident> to generate a schema and its documentation </item>
     <item>Save the generated schema file as <ident>oddex-1.rng</ident> ; view the displayed
      documentation </item>
     <item>Open the test file <ident>oddex-1-test.xml</ident> and associate it with the generated
      schema; validate the file. </item>
    </list>
   </div>
   <div type="slide">
    <head>Defining a model class</head>
    <p>In the real world, the elements that can appear inside a <gi>book</gi> are likely to be many
     and various. It's convenient therefore to have a way of talking about all of them: in ODD, we
     say that all such elements are members of a <term>model class</term>. </p>
    <p>We use the <gi>classes</gi> element to record an element's membership in a class: <egXML
     xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"> <elementSpec ident="para">
     <!-- ... --> <classes> <memberOf key="bookPart"/> </classes>
     <!-- ... --> </elementSpec> </egXML> </p>
    <p>And for completeness, here's a definition for the <ident>bookPart</ident> class.</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
     <classSpec ident="bookPart" type="model">
      <desc>the elements of this class all represent top-level parts of a book</desc>
     </classSpec>
    </egXML>
   </div>
   <div type="slide">
    <head>Using a model class</head>
    <p>Rather than say that a <gi>book</gi> contains <gi>para</gi> elements (and other things), we
     can now say that it contains members of the <ident>bookPart</ident> class.</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <elementSpec ident="book">
      <desc>Root element for a very simple schema</desc>
      <content>
       <classRef key="bookPart" minOccurs="1" maxOccurs="unbounded"/>
      </content>
     </elementSpec>
    </egXML>
    <p>(When we realise that books can also contain <gi>list</gi>s this will save time!)</p>
   </div>
   <div type="slide">
    <head>Defining an attribute class</head>
    <p>In the real world, it's also likely that several elements will have the same attributes. It's
     convenient therefore to define them once only: in ODD we say all elements with some attributes
     in common are members of an <term>attribute class</term>, which we define like this: <egXML
     xmlns="http://www.tei-c.org/ns/Examples"> <classSpec ident="pointing" type="atts">
     <desc>elements of this class all have an href attribute</desc> <attList> <attDef ident="href">
     <desc>supplies a URI for the object pointed at</desc> <datatype> <rng:data
     xmlns:rng="http://relaxng.org/ns/structure/1.0" type="anyURI"/> </datatype> </attDef>
     </attList></classSpec> </egXML></p>
   </div>
   <div type="tp">
    <head>Test your understanding</head>
    <list>
     <item>Open the file <ident>oddex-2.odd</ident> with oXygen and compare it with
      <ident>oddex-1.odd</ident></item>
     <item>Generate a schema from it and make sure that the test file
      <ident>oddex-1-test.xml</ident> is still valid</item>
     <item>Check that you understand how the class references are being used.</item>
    </list>
   </div>
   <div type="slide">
    <head>Controlling attribute values</head>
    <list>
     <item>The value of an attribute can be specified just by referring to an externally defined
      datatype such as <code>anyURI </code> or <code>ID</code> (these are W3C defined standards) </item>
     <item>We can also supply and document our own list of required or recommended values using the
      <gi>valList</gi> element</item>
    </list>
    <p>For example... <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"
     xmlns:rng="http://relaxng.org/ns/structure/1.0"> <classSpec ident="bookAtts" type="atts">
     <desc>this class defines the attributes that can appear on any element inside a book</desc>
     <attList> <attDef ident="xml:id"> <desc>provides a unique identifier for an element</desc>
     <datatype> <data xmlns="http://relaxng.org/ns/structure/1.0" type="ID"/> </datatype> </attDef>
     <attDef ident="status"> <desc>indicates the correction status of this element </desc> <valList>
     <valItem ident="red"/> <valItem ident="green"/> <valItem ident="unknown"/> </valList> </attDef>
     </attList> </classSpec> </egXML></p>
   </div>
   <!--<div type="slide">
        <head>Notions de classe d'attributs</head>
        <p><ident>stuffPart</ident> est une classe de type <code>model</code>. Il existe aussi des
          classes de type <code>att</code>, qui regroupent tous les éléments ayant en commun un
          ensemble spécifique d'attributs.</p>
        <p>
          <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"
            xmlns:rng="http://relaxng.org/ns/structure/1.0">
            <classSpec ident="stuffAtts" type="atts">
              <desc>attributs communs aux éléments qui ont la possibilité de figurer dans un
                stuff</desc>
              <attList>
                <attDef ident="n">
                  <desc>fournit un numéro ou autre label</desc>
                  <datatype><rng:string/></datatype>
                </attDef>
                <attDef ident="status">
                  <desc>indique un statut de correction </desc>
                  <valList>
                    <valItem ident="rouge"/>
                    <valItem ident="vert"/>
                    <valItem ident="incertain"/>
                  </valList>
                </attDef>
              </attList>
            </classSpec></egXML></p>
      </div>-->
   <!-- <div type="slide">
        <head>Test your understanding</head>
        <list>
          <item>The preceding attribute class definition is available in your file
              <ident>oddex-3.xml</ident>. Add it into your <ident>oddex-2.odd</ident> file</item>
          <item>Provide appropriate <gi>memberOf</gi> elements for the elements <gi>para</gi> and
              <gi>pointer</gi> to make them both members of the <ident>bookAtts</ident> class</item>
          <item>Generate a schema and check that the <ident>oddex-1-test.xml</ident> file is
              <emph>still</emph> valid against this version of the schema.</item>
          <item>Check that oXygen now permits the attributes <att>xml:id</att> and
            <att>status</att>. What values can be used for them?</item>
        </list>
      </div>-->
   <!--  <p>Tester votre compréhension...</p>
        <list>
          <item>Insérez dans votre fichier <ident>oddex-2.odd</ident>la définition d'une classe
            d'attribut (il y en a une dans le fichier <ident>oddex-3.xml</ident>)</item>
          <item>Ajoutez un <gi>memberOf</gi> pour les éléments qui vont participer à cette
            classe</item>
          <item>Générez un schéma et assurez-vous que le fichier <ident>odd-test-1.xml</ident> reste
            valide avec cette version du schéma.</item>
          <item>Contrôlez que oXygen vous propose ces nouveaux attributs, et qu'il contraint les
            valeurs possibles</item>
        </list>
      </div>-->
   <div type="slide">
    <head>What else might you want to say about your elements?</head>
    <list>
     <item>Additional glosses and descriptions, perhaps in different languages</item>
     <item>Usage examples</item>
     <item>More sophisticated constraints <list> <item>complex content models</item>
      <item>contextual dependencies</item> </list></item>
    </list>
    <p rend="box">Plus other documentary features : versioning, cross references, ontological
     mappings ...</p>
   </div>
   <div type="slide">
    <head>Alternative descriptions and glosses</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <elementSpec ident="para">
      <gloss>paragraph</gloss>
      <desc>marks paragraphs in prose.</desc>
      <desc xml:lang="zh-tw">標記散文的段落。</desc>
      <desc xml:lang="ja"> 散文の段落を示す． </desc>
      <desc xml:lang="fr">marque les paragraphes dans un texte en prose.</desc>
      <desc xml:lang="es">marca párrafos en prosa.</desc>
      <desc xml:lang="it">indica i paragrafi in prosa</desc>
      <!-- ... -->
     </elementSpec>
    </egXML>
   </div>
   <div type="slide">
    <head>Usage examples</head>
    <p>Documenting an XML schema requires the inclusion of examples in XML. If your documentation is
     also in XML, you need to be a little devious. There are three possible approaches: <list>
     <item>hide everything within a CDATA marked section</item> <item>Escape everything using entity
     references</item> <item>Use a different name space</item> </list> </p>
    <p rend="box">The last has the great advantage that you can validate your examples against an
     XML schema</p>
   </div>
   <div type="slide">
    <head>Examples</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <eg>&lt;![CDATA[&lt;p>A paragraph&lt;/p> &#93;]></eg>
    </egXML>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <eg>
      <code lang="XML">&amp;lt;p>A paragraph&amp;lt;/p></code>
     </eg>
    </egXML>
    <egXML xmlns="http://www.tei-c.org/ns/Examples"> &lt;egXML
     xmlns="http://www.tei-c.org/ns/Examples">
     <p>A paragraph</p> &lt;/egXML></egXML>
   </div>
   <!--<div type="slide">
        <head>More sophisticated constraints</head>
        <list>
          <item>We can define the legal content of an element using <soCalled>pure ODD</soCalled>
            constructs</item>
          <item>Alternatively we can use RELAX NG directly </item>
          <item>Content can be further constrained by means of a <gi>valList</gi> element ... </item>
          <item>... or by means of a <gi>datatype</gi> element (which uses RELAX NG) </item>
          <item>Contextual dependencies can be expressed by means of <gi>constraint</gi> elements
            (which use e.g. ISO Schematron) </item>
        </list>
        <p rend="box">We will introduce these possibilities gradually !</p>
      </div>-->
   <div type="slide">
    <head>Defining a content model </head>
    <p> The <gi>content</gi> element can contain</p>
    <list>
     <item>Nothing at all <gi>empty/</gi></item>
     <item>References to other elements <gi>elementRef</gi></item>
     <item>References to classes of element <gi>classRef</gi></item>
     <item>Alternations of the foregoing <gi>alternate</gi></item>
     <item>Sequences of the foregoing <gi>sequence</gi></item>
     <!--<item>Interleaved instances of the foregoing
	  <gi>interleave</gi> (<hi rend="bold">Warning: this is not
	  yet implemented</hi>)</item>-->
    </list>
    <p>Attributes <att>minOccurs</att> and <att>maxOccurs</att> can be used to control
     repetition</p>
    <p>For example: <egXML xmlns="http://www.tei-c.org/ns/Examples"> <content> <alternate>
     <elementRef key="para" minOccurs="2" maxOccurs="unbounded"/> <elementRef key="bob"
     maxOccurs="unbounded"/> </alternate> </content></egXML></p>
   </div>

   <div type="slide">
    <head>Is your journey really necessary ?</head>
    <p rend="box">The TEI defines elements very like yours. Why not use the TEI?</p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <schemaSpec source="http://www.tei-c.org/release/xml/tei/odd/p5subset.xml" start="div"
      ident="teiBook">
      <elementRef key="div"/>
      <elementRef key="p"/>
      <elementRef key="graphic"/>
      <elementRef key="figure"/>
      <moduleRef key="tei"/>
     </schemaSpec>
    </egXML>
    <p>The <gi>moduleRef</gi> here provides definitions for the TEI infrastructure, notably the
     classes and datatypes used throughout every TEI schema. Apart from that we just need to specify
     the TEI elements we want to use, by means of an <gi>elementRef</gi>. </p>
    <p>The <att>source</att> attribute indicates where the referenced specifications are to be found
    </p>
   </div>
   <div type="tp">
    <head>Constructing a TEI ODD</head>
    <list>
     <item>Open the file <ident>oddex-3.odd</ident> and compare it with the previous versions</item>
     <item>Compile it as before, and use it to validate the TEI file
      <ident>oddex-3-test.xml</ident></item>
     <item>Note that a TEI document must use the TEI namespace</item>
     <item>Note also that TEI concepts don't always overlap exactly with our initial model (e.g. a
      <gi>graphic</gi> cannot appear between <gi>p</gi> elements)</item>
    </list>
    <p rend="box">We'll look at the TEI use of ODD in more detail this afternoon</p>
   </div>

  <!-- <div type="slide">
    <head>The TEI uses ODD in two ways ...</head>
    <list>
     <item>To specify itself</item>
     <item>To specify your customization of it</item>
    </list>
    <p>La TEI elle-même s’exprime en langage ODD. Ce fut d’ailleurs la raison principale pour
     laquelle le langage fut inventé </p>
    <p>La source TEI P5 (disponible ici <ptr
     target="http://www.tei-c.org/release/xml/tei/odd/Source/"/>) rassemble : <list> <item>39
     fichiers en TEI-XML, dont 25 contiennent un chapitre de documentation en XML-TEI, la plupart
     (21) définissant un module, par exemple <ident>PH-PrimarySources.xml</ident></item>
     <item>environ 800 fichiers en TEI-XML, chacun définissant un élément, une classe, un type de
     données, ou une macro; plus précisément: <list> <item>32 <gi>dataSpec</gi> définissant un type
     de données (teidata.xxxx) par ex. <ident>teidata.percentage</ident></item> <item>122
     <tag>classSpec type="model"</tag> définissant une classe de type modèle
     (<code>model.xxxx</code>) par ex. <ident>model.biblLike.xml</ident></item> <item>77
     <tag>classSpec type="att"</tag> définissant une classe de type attribut (<code>att.xxxx</code>)
     par ex. <ident>att.divLike.xml</ident></item> <item>6 <gi>macroSpec</gi> définissant une macro
     (<code>macro.xxxx</code>) par ex. <ident>macro.phraseSeq.xml</ident></item> <item>580
     <gi>elementSpec</gi> définissant un élément, de <ident>ab.xml</ident> jusqu'à
     <ident>zone.xml</ident></item> </list></item> </list> </p>
   </div>
   <div type="slide" xml:lang="fr">
    <head>Par exemple</head>
    <figure>
     <graphic url="../media/abstract.xml.png" width="90%"/>
    </figure>
   </div>

-->
   <div type="slide">
    <head>Schematron constraints</head>
    <list>
     <item>An element spec may also include one or more <gi>constraintSpec</gi> elements, which
      contain additional constraints of any kind, expressed in the ISO Schematron language</item>
     <item>In TEI we use these to express additional semantic or co-occurrence constraints that
      cannot be expressed in any schema language</item>
     <item>Not all XML processing systems take notice of these (but oXygen does).</item>
     <item>They are also useful when implementing Pure ODD constructs that cannot be expressed in
      the target schema language</item>
    </list>
 
 <!--
   <div xml:lang="fr" type="slide">
    <head>Utilisation de schematron</head>

    <list>
     <item>Une spécification d’élément peut proposer des contraintes supplémentaires sur son contenu
      en utilisant un ou plusieurs éléments <gi>constraintSpec</gi> </item>
     <item>Ces règles sont exprimées (typiquement) en utilisant le langage <ref
      target="http://schematron.com/">ISO Schematron </ref> dans son propre espace de noms; la règle
      est emballée dans un <gi>constraint</gi></item>
    </list>-->
    <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="full">
     <elementSpec xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="div" module="teistructure"
      mode="change">
      <constraintSpec ident="div" scheme="isoschematron">
       <constraint>
        <s:assert test="@type='prose' and .//tei:p"> a prose div should contain at least one
         paragraph</s:assert>
       </constraint>
      </constraintSpec>
     </elementSpec>
    </egXML>
   </div>

   <!--<div type="slide">
        <head>Notions de namespace 1</head>
        <list>
          <item> Un <term>namespace</term> (espace de noms) fournit une manière d'associer et
            distinguer un groupe de termes, typiquement d'éléments XML. </item>
          <item>Jusqu'à présent, tout ce qui a été nommé dans notre schéma appartient à un namespace
            "nul". </item>
          <item>Supposons que nous souhaitions ajouter un nouvel élément <gi>bit</gi> avec un modèle
            de contenu plus restreint. Ce <gi>bit</gi> ne contiendrait que de texte, mais nous
            souhaitons l'appeler un <gi>bit</gi> quand même. Pour le distinguer du <gi>bit</gi>
            existant, il faut l'associer à un autre espace de noms.</item>
          <item>L'attribut <att>ns</att> est disponible sur <gi>elementSpec</gi> pour préciser un
            espace de noms. Pour des raisons techniques, il faut aussi spécifier un prefixe unique.
          </item>
        </list>
      </div>
      <div type="slide">
        <head>Notions de namespace 2</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny"
          xmlns:rng="http://relaxng.org/ns/structure/1.0">
          <elementSpec ident="bit" ns="http://myNamespace.org" prefix="extra">
            <desc>élément textuel du schéma simplissime (sans bob) </desc>
            <content allowText="true"/>
            <classes><memberOf key="stuffPart"/></classes>
          </elementSpec>
        </egXML>
        <p>Notez bien que ce nouvel élément fait partie de la classe <ident>stuffPart</ident> ;
          sinon il ne serait pas disponible dans nos documents.</p>
      </div>
      <div type="slide">
        <head>Tester votre compréhension...</head>
        <list>
          <item>Ajoutez des traductions dans d'autres langues (allemand, russe, italien, anglais...)
            des descriptions d'éléments</item>
          <item>Créez un nouvel élément <gi>truc</gi> qui devrait pouvoir apparaître dans un
              <gi>stuff</gi>
          </item>
          <item>Modifiez l'élément <gi>truc</gi> pour lui donner les attributs <att>n</att> et
              <att>status</att></item>
          <item>Modifiez la définition de l'attribut <att>status</att> pour lui permettre de prendre
            la valeur <code>orange</code>.</item>
        </list>
      </div>
      <div type="slide">
        <head>Et enfin, un mot de la TEI</head>
        <p>Admettons enfin que notre <gi>bit</gi> n'est pas si loin de l'élément TEI <gi>p</gi>, que
          notre <gi>bob</gi> ressemble beaucoup à l'élément TEI <gi>ptr</gi>, et que notre
            <gi>stuff</gi> pourrait être considéré comme un élément TEI <gi>div</gi>. Comment
          ré-écrire ce schéma pour profiter des définitions TEI existantes ? </p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <schemaSpec start="div" ident="testSchema-2" source="tei:1.6.0">
            <elementRef key="div"/>
            <elementRef key="p"/>
            <elementRef key="ptr"/>
            <moduleRef key="tei"/>
          </schemaSpec></egXML>
        <p>L'élément <gi>moduleRef</gi> nous fournit un ensemble de définitions infrastructurales
          pour les éléments TEI de la version courante. Après cela, nous n'avons besoin que de
          référencer les éléments TEI souhaités avec un <gi>elementRef</gi>. </p>
      </div>
      <div type="slide">
        <head>Création d'un schéma TEI</head>
        <list>
          <item>Créez un nouveau fichier TEI ODD avec oXygen et insérez le <gi>schemaSpec</gi> que
            vous trouverez dans le fichier <ident>oddex-5.xml</ident></item>
          <item>Transformez ce fichier en schéma, comme d'habitude.</item>
          <item>Le fichier <ident>odd-test-2.xml</ident> contient une version TEI de notre test file
            initial : validez-le avec le schéma que vous venez de créer.</item>
        </list>
        <p>Demain, nous verrons comment la TEI se sert du système ODD...</p>
      </div>-->

 <!--  <div xml:lang="fr" type="slide">
    <head>L’élément <gi>constraintSpec</gi> </head>
    <p>Il définit une contrainte qui s’applique au sein de l’élément dans lequel il est déclaré (on
     peut modifier cela en utilisant l'attribut <att>s:context</att>) </p>
    <list>
     <item>L’attribut <att>ident</att> est obligatoire : il fournit un identifiant unique</item>
     <item>L’élément <gi>constraint</gi> contient (typiquement) un <gi>assert</gi> ou un
      <gi>report</gi>, éléments de l’espace de noms
      <code>http://purl.oclc.org/dsdl/schematron</code></item>
     <item>Le contenu de l’élément <gi>assert</gi> est affiché si le test est <hi>false</hi></item>
     <item>Le contenu de l’élément <gi>report</gi> est affiché si le test est <hi>true</hi></item>
     <item>Astuce : plusieurs éléments schematron sont disponibles pour enrichir le texte du message
      affiché, notamment <gi>name</gi> (contexte) et <gi>value-of</gi> (valeur) </item>
     <!-\-  <item>Voir <ptr target="http://www.schematron.com/"/> pour une description plus
   détaillée</item>-\->
    </list>
    <p rend="box">Un schéma RNG intégrant ces règles sera auto-généré si l’on utilise le logiciel
     oXygen pour traiter son ODD </p>
   </div>

   <div type="slide" xml:lang="fr">
    <head>TEI + MathML : le ODD</head>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <schemaSpec ident="tei_math" prefix="tei_" start="TEI teiCorpus">
      <moduleRef url="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/mathml2-main.rng"/>
      <moduleRef key="header"/>
      <moduleRef key="core"/>
      <moduleRef key="tei"/>
      <moduleRef key="textstructure"/>
      <moduleRef key="figures"/>
      <elementSpec module="figures" ident="formula" mode="change">
       <content>
        <elementRef key="mathml.math"/>
       </content>
      </elementSpec>
     </schemaSpec>
    </egXML>
    <p rend="box">L’attribut <att>prefix</att> nous permet de distinguer les identifiants ressortant
     des schémas différentes</p>
   </div>
   <div xml:lang="fr" type="slide">
    <head>TEI + MathML : le document</head>
    <p>
     <figure>
      <graphic url="../media/newVavilov.png" height="20%"/>
     </figure>
    </p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <p>The relevant inequalities and distributions are <formula notation="MathML"> <math
      xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"> <mn>0</mn> <mo>.</mo> <mn>0</mn>
      <mn>1</mn> <mo>&lt;</mo> <mi>κ</mi> <mo>&lt;</mo> <mn>1</mn> <mn>0</mn> </math> </formula>,
      Vavilov distribution, and ... </p>
    </egXML>
    <p rend="box">Voir egalement l'application de MEI (Music Encoding Initiative)</p>

   </div>
-->

<!--
   <div type="slide" xml:lang="fr">
    <head>Usage de l’attribut <att>source</att></head>
    <p>L’attribut <att>source</att> sert à spécifier la source des déclarations qu’on souhaite
     intégrer : par défaut celles de la version la plus récente de TEI P5.</p>
    <p>Ou bien… </p>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <schemaSpec ident="test2" prefix="tei_" start="TEI" source="tei:1.5.0">
      <!-\- dans la version 1.5.0 -\-> </schemaSpec>
    </egXML>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <schemaSpec ident="test3" prefix="tei_" start="TEI"
      source="https://www.tei-c.org/Vault/P5/1.5.0/xml/tei/odd/p5subset.xml">
      <!-\- version plus verbose du même -\-> </schemaSpec>
    </egXML>
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
     <schemaSpec ident="test4" source="myCompiled.odd">
      <!-\- ensemble de déclarations maison -\-> </schemaSpec>
    </egXML>
    <p rend="box"> <att>source</att> peut être utilisé sur <gi>classRef</gi>, <gi>elementRef</gi>,
     <gi>macroRef</gi>, et <gi>moduleRef</gi> : il doit pointer vers un <term>ODD compilé</term></p>
   </div>-->
   <!--
      <div type="slide" xml:lang="fr">
       <head>"Compilation" d'un ODD</head>
       <p>Rappel: un ODD peut rassembler deux types d’objet: <list>
        <item>des spécifications explicites, plus ou moins complétées</item>
        <item>des références à de telles spécifications</item>
       </list>
       </p>
       <p> L'attribut <att>source</att> doit pointer sur un ODD où <list>
        <item>tous les références sont résolues et remplacées par la spécification referencée </item>
        <item>toutes les déclarations partielles pour un seul objet sont résolues </item>
       </list></p>
       <p rend="box">Nous appelons cette procédure "compilation" et elle est effectuée par une
        feuille de style XSLT <ident>odd2od</ident></p>
      </div>
     -->

   <div type="slide" xml:lang="fr">
    <head>ODD Compilation</head>
    <p>A single ODD may contain two types of object: <list> <item>an explicit specification (e.g. an
     <gi>elementDecl</gi>), partial or complete</item> <item>a reference to such a
     specification</item> </list> </p>
    <p>Note also that a single ODD may combine two or more partial specifications for a given
     object. </p>
    <p> The <att>source</att> attribute indicates an ODD in which <list> <item>all references have
     been resolved, and replaced by the declarations concerned</item> <item>all partiel declarations
     for the same object have been resolved </item> </list></p>
    <p rend="box">We call this process "compilation" and it is carried out by the XSLT stylesheet
     <ident>odd2odd</ident></p>
   </div>


   <div type="slide" xml:lang="fr">
    <head>Using a compiled ODD</head>
    <p>A compiled ODD can serve as the basis for further modifications. In this example, we start
     from a compiled version of the TEI-bare schema.</p>
    <p>
     <p>In this example, we suppress the <gi>head</gi> element: </p>
     <egXML xmlns="http://www.tei-c.org/ns/Examples">
      <schemaSpec ident="Bare-minus" source="tei_bare.compiled.odd" start="TEI">
       <moduleRef key="tei"/>
       <moduleRef key="header"/>
       <moduleRef key="core" except="head"/>
       <moduleRef key="textstructure"/>
      </schemaSpec>
     </egXML>
     <p>And in this one, we add the contents of the module <ident>gaiji</ident></p>
     <egXML xmlns="http://www.tei-c.org/ns/Examples">
      <schemaSpec ident="Bare-plus" source="tei_bare.compiled.odd" start="TEI">
       <moduleRef key="tei"/>
       <moduleRef key="header"/>
       <moduleRef key="gaiji" source="http://www.tei-c.org/release/xml/tei/odd/p5subset.xml"/>
       <moduleRef key="textstructure"/>
      </schemaSpec>
     </egXML>
    </p>
    <p rend="box">Note that we can only suppress or obtain items already supplied by the compiled
     ODD specified in the <att>source</att> attribute </p>
   </div>

   <div>
    <head>ODD Chaining use case</head>
    <p>For the ELTeC we need to maintain two or three different schemas: <list><item>A very
     constrained version of the TEI Header, common to each level</item><item>Basic markup at level
     0, and nothing else</item><item>Markup at level 1, which is a superset of level
     0</item><item>Markup at level 2, which is also (currently) a superset of level 1</item></list> </p>
    <p rend="box">ODD chaining is the answer</p>
   </div>
   <div type="slide">
    <head>ODD chaining</head>
    <!--<p>Rather than maintain three independent but overlapping 
                    schemas we use the facility known as ODD chaining...
                  </p>-->
    <figure>
     <graphic height="70%" url="../Graphics/eltec-chains.png"/>
    </figure>
    <cb/>
    <list>
     <item>we define a base ELTeC ODD which declares everything required for the union of each 
      of the three schemas, and supplies some general constraints</item>
     <item>we compile this base ODD to create a TEI library, analogous to the 
      "p5subset" supplied with TEI P5</item>
     <item>each ELTeC level is then defined by a separate ODD,
      which selects a subset from that
      library</item>
    </list>
    <p>Source at <ptr target="https://github.com/COST-ELTeC/Schemas/tree/master/ODD"/> 
   </p>
   </div>
   <div type="slide">
    <head>Types of ODD (1)</head>
    <p>
     <figure>
      <graphic url="../Graphics/oddFlavours.png" height="50%"/>
     </figure></p>
    <p>each box here represents : </p>
    <list>
     <item>an ODD</item>
     <item>the schema derived from that ODD</item>
     <item>the set of documents considered valid by that schema</item>
    </list>
    <p>TEI All contains every element (etc) defined by the TEI.</p>
   </div>
   <div type="slide">
    <head>Types of ODD (2)</head>
    <p>
     <figure>
      <graphic url="../Graphics/oddFlavours.png" height="50%"/>
     </figure></p>
    <cb/>
    <list>
     <item>a <q>TEI subset</q> provides only a (possibly restricted) subset of TEI All </item>
     <!-- <item>un <q>customised subset</q> est également un sous-ensemble avec des
            personnalisations supplémentaires</item>-->
     <item>a <q>TEI extension</q> provides some components which do not appear in TEI All
     </item>
    </list>
    <p rend="box">The $1000k question: is my TEI extension conformant?</p>
   </div>
   <div type="slide">
    <head>The short answer</head>
    <p>Yes, provided that... <list>
     <item>(in the case of a subset) : your modifications generate a more focussed schema,
      better adapted to your project, and documentation more meaningful to your envisaged
      community;</item>
     <item>your documents are also still valid according to TEI All and respect the semantics
      defined by the TEI conceptual model;</item>
     <item>(for an extension) : non-TEI components are explicitly signalled, for example by
      use of a different namespace, and documented in your ODD, for example by using TEI
      classes, the <gi>equiv</gi> element etc. </item>
    </list></p>
   </div>
   <div type="slide">
    <head>So what does it mean to be <soCalled>TEI conformant</soCalled> ?</head>
    <list>
     <item><hi>be honest</hi> : XML elements declared within the TEI namespace must respect the
      existing TEI definitions for those elements (e.g. <gi>l</gi>) </item>
     <item><hi>be explicit</hi> : an ODD is a very good way of keeping you honest. Producing
      one requires you to document and make evident all the changes you have made.</item>
    </list>
    <p>Validity of a document with respect to a TEI schema (TEI All, subset, or extension) is a
     good sign -- but it does not guarantee conformance </p>
    <p>The requirement to <q>respect the TEI-defined semantics TEI</q> implies a test that
     cannot be readily automated.</p>
    
   </div>
   <div type="slide">
    <head>The limits of modification</head>
    <list>
     <item>Can you delete everything? you may not want <gi>title</gi> in your text, but it is
      mandatory in the header </item>
     <item>Can you add anything ? it may be convenient to add (e.g.) elements from the Dublin
      Core to your header, even though their semantics overlap with existing TEI
      elements</item>
    </list>
    <p rend="box"><list>
     <item>The purpose of these conformance rules is to make <q>blind interchange</q>
      simpler; but they don't guarantee it.</item>
     <item>Their goal is to allow a user to understand your encoding, but not necessarily to
      force them to follow your practice blindly</item>
    </list></p>
    <p rend="box">See also <title>What is TEI Conformance?</title> (<ptr target="https://journals.openedition.org/jtei/1777"/>)</p>
   </div>

   <div type="slide">
    <head>Useful links : Reference documentation</head>
    <list>
  <item>« 22 : Documentation » in <title>TEI Guidelines</title>. <ref
        target="https://tei-c.org/release/doc/tei-p5-doc/en/html/TD.html">
        https://tei-c.org/release/doc/tei-p5-doc/en/html/TD.html </ref></item>
       <item>« 23 : Using the TEI » in <title>TEI Guidelines</title>. <ref
        target="https://tei-c.org/release/doc/tei-p5-doc/en/html/USE.html">
        https://tei-c.org/release/doc/tei-p5-doc/en/html/USE.html </ref></item>
    </list>
      </div>
   
   <div type="slide"><head>Useful links : Tutorial materials</head>
        <list>
       <item>« Module 8: Customizing TEI » in <title>TEI By Example</title> <ref
        target="https://teibyexample.org/tutorials/TBED08v00.htm"
        >https://teibyexample.org/tutorials/TBED08v00.htm</ref> </item>
       <item>«Customizing the TEI » <title>What is the Text Encoding Initiative ?</title>,
        <ref target="http://books.openedition.org/oep/692"
        >http://books.openedition.org/oep/692</ref>.</item>
      
       <item> « One Document Does-it-all (ODD) » in <title>Balisage Symposium on Markup Vocabulary
        Customization</title> <ref
        target="http://www.balisage.net/Proceedings/vol24/html/Viglianti01/BalisageVol24-Viglianti01.html"
        >
        http://www.balisage.net/Proceedings/vol24/html/Viglianti01/BalisageVol24-Viglianti01.html</ref></item>
       <item>« TEI Customization Primer » (Women Writers Project) <ref
        target="https://www.wwp.neu.edu/outreach/resources/customization.html"
        >https://www.wwp.neu.edu/outreach/resources/customization.html</ref></item>
        <item> « ODD Chaining for Beginners » <ref target="https://teic.github.io/TCW/howtoChain.html">https://teic.github.io/TCW/howtoChain.html</ref></item>
      <!-- <item><ref target="http://teic.github.io/TCW/howtoGenerate.html">short tutorial on
        auto-generating an ODD</ref></item>-->
     </list></div><div type="slide"> 
     <head>Useful links: Background reading</head>
    
      <list>
       <item> « RELAX NG with son of ODD » (eXtreme Programming Languages, 2004) <ref
        target="https://ora.ox.ac.uk/objects/uuid:b337cb6d-9e7b-4bbc-aa71-f0b9d12bb8de">
        https://ora.ox.ac.uk/objects/uuid:b337cb6d-9e7b-4bbc-aa71-f0b9d12bb8de</ref></item>
       <item> « Reviewing the TEI ODD System » (ACM DocEng, 2013) <ref
        target="http://dx.doi.org/10.1145/2494266.2494321"
        >http://dx.doi.org/10.1145/2494266.2494321</ref></item>
    
    </list>
   </div>
  </body>
 </text>
</TEI>
