<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../teiSlides.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Comment maîtriser le tigre TEI </title>
        <title xml:lang="en">An ODD Initiation</title>
        <author>Lou Burnard Consulting</author>
      </titleStmt>
      <publicationStmt>
        <p xml:lang="en">As presented at TEI MM 2014</p>
        <p>Préparé pour ENC MasterPro 2015</p>
      </publicationStmt>
      <sourceDesc>
        <p>From previous talks in Tours, Paris, Barcelona, Paris, Graz...</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change when="2018-06-03">Revised for montpellier</change>
      <change when="2017-02-18">Revised by emchateau for ENC</change>
      <change who="#LB" when="2014-09-23">Revised for MM14</change>
      <change who="#LB" when="2014-02-17">Revised for Mutec</change>
      <change who="#LB" when="2013-10-20">Finalised for SUFCO formation, Oct 2013</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body xml:lang="fr">
      <div xml:lang="en" type="slide">
        <head>À quoi ça sert, un ODD ? </head>
        <list>
          <item>ODD est le langage de définition et de maintenance du système TEI</item>
          <item>Il permet le maintenance du code et de sa documentation d'une manière intégrée, à
            partir d'une seule source XML </item>
          <item>Il s'applique également à la définition d'un système de balisage non-TEI, mais il
            est d'habitude utilisé pour la définition des personnalisations ou des modifications de
            la TEI. </item>
          <item>Dans les deux cas, ODD fournit une manière efficace d'assurer la perennité de vos
            données, en vous obligeant de documenter leur usage d'une manière standardisée</item>
        </list>
        <p rend="block">ODD sert aussi à explorer les richesses de la TEI ...</p>
      </div>
      <!--  <div xml:lang="en" type="slide">
        <head>ODD : what is it good for ?</head>
        <list>
          <item>ODD is the language in which the TEI is itself defined and maintained both as a
            formal markup system and as documentation</item>
          <item>You can use it in the same way to define a completely new (non TEI) markup system,
            or more usually, to select from and modify the untamed complexities of the TEI</item>
          <item>In either case, ODD provides a mechanism for long term interoperability of your data
            by requiring you to document it in a standardized way</item>
        </list>
        <p rend="block">ODD is also a handy way to explore what is in the TEI ...</p>
      </div>-->
      <div type="slide">
        <head>Les deux côtés d'un ODD  </head>
        <p rend="box">Nous avons besoin de deux choses complémentaires…</p>
        <p>Un <hi>schéma formel</hi> (utilisant un langage informatique tel que DTD, RELAX NG, W3C
          Schema, Schematron) pour contrôler l’édition<list>
            <item>déterminer quelles sont les balises disponibles ?</item>
            <item>dans quels contextes ?</item>
            <item>avec quels attributs ?</item>
            <item>avec quelles valeurs ?</item>
            <item>en respectant quelles contraintes ?</item>
          </list>
        </p>
        <p>Une <hi>documentation</hi> pour expliciter aux utilisateurs/développeurs nos principes
          éditoriaux, nos principes de choix de balises, etc. :<list>
            <item>dans plusieurs langues naturelles ;</item>
            <item>dans plusieurs formats de fichier (PDF, MsWord, HTML, epub,...).</item>
          </list></p>
      </div>
      <div type="slide">
        <head>OK, mais pourquoi ODD ?</head>
        <p>Ces attentes pourraient être satisfaites de plusieurs manières.</p>
        <p>Les avantages d’ODD : <list>
            <item>un format XML bien établi,</item>
            <item>faisant partie intégrante du système TEI,</item>
            <item>permettant un traitement fortement intégré avec d’autres systèmes TEI,</item>
            <item>pérennisation à long terme</item>
            <item>standardisation</item>
          </list></p>
      </div>
      <div type="slide">
        <head>L’idée essentielle de ODD (1) </head>
        <p rend="box"><hi>O</hi>ne <hi>D</hi>ocument <hi>D</hi>oes it all</p>
        <p>Un vocabulaire spécialisé pour la déclaration et la documentation :<list>
            <item>des types d’élément XML, indépendants des schémas</item>
            <item>des patrons (macros)</item>
            <item>des types de donnée (datatype)</item>
            <item>des classes (et sous-classes) d’éléments</item>
            <item>des regroupements de telles déclarations (specGrp)</item>
            <item>et des schémas</item>
          </list>
        </p>
        <p>Un <hi>schéma</hi> peut intégrer :<list>
            <item>des objets choisies dans la liste ci-dessus</item>
            <item>des références à un de ces objets</item>
            <item>des références a un regroupement prédéfini de tels objets (un <gi>moduleRef</gi>)
            </item>
          </list></p>
      </div>
      <div type="slide">
        <head>L’idée essentielle de ODD (2)</head>
        <p rend="box">Un ODD peut combiner plusieurs spécifications pour un même objet <list>
            <item>une qui est <soCalled>canonique</soCalled>, référencée dans les
                <title>Guidelines</title></item>
            <item>une (ou plusieurs) supplémentaires, modifiées en partie ou totalement</item>
            <item>ces versions partielles peuvent être explicitées dans l’ODD ou bien héritées d'un
              autre ODD</item>
            <item>le statut de chaque spécification supplémentaire est explicité par son attribut
                <att>mode</att>, par defaut <code>add</code></item>
          </list></p>
      </div>
      <!-- 
      <div type="slide" >
        <head>Spec et Ref</head>
        <p rend="bo">Éléments fournissant une specification</p>
        <list>
          <item><gi>elementSpec</gi> fournit la définition d’un élément</item>
          <item><gi>classSpec</gi> fournit la définition d’une classe d’éléments</item>
          <item><gi>macroSpec</gi> fournit la définition d’un patron</item>
          <item><gi>dataSpec</gi> fournit la définition d’un type de données</item>
          <item><gi>specGrp</gi> regroupe plusieurs declarations</item>
          <item><gi>schemaSpec</gi> définit et identifie un schéma</item>
        </list>
        <cb/>
        <p rend="bo">Éléments faisant reference a une specification existante</p>
        <list>
          <item><gi>elementRef</gi> réutilise la définition d’un élément existant</item>
          <item><gi>classRef</gi> réutilise la définition d’une classe existante</item>
          <item><gi>macroRef</gi> réutilise la définition d’un patron existant</item>
          <item><gi>dataRef</gi> réutilise la définition d’un type de données existant</item>
          <item><gi>specGrpRef</gi>utilise un regroupement de définitions existant</item>
          <item><gi>moduleRef</gi>utilise un regroupement de définitions existant </item>
        </list>
      </div>
    -->
      <!--<div type="slide" >
        <head><soCalled>Modes</soCalled> d'une spécification</head>
        <p rend="box">L'attribut <att>mode</att> controle l'effet d'une specification
          supplementaire. Ces règles s'appliquent aux elements dits <term>identifiable</term>, portant tous  un attribut
          <att>ident</att></p>
        <table>
          <row role="label">
            <cell>valeur</cell>
            <cell>effet</cell>
          </row>
          <row>
            <cell>delete</cell>
            <cell>toute declaration pour cet identifiant est supprimee</cell>
          </row>
          
          <row>
            <cell>add</cell>
            <cell>cette declaration est ajoutée entièrement; qu'une seule n’est permise pour un meme
              identifiant</cell>
          </row>
          <row>
            <cell>replace</cell>
            <cell>cette declaration remplace entièrement toute autre declaration pour le meme
              identifiant</cell>
          </row>
          
          <row>
            <cell>change</cell>
            <cell>cette declaration est a fusionner avec toute autre declaration pour le meme
              identifiant; les sous-parties qu'elle specifie remplaceront toute autre, et celles
              non-specifiees resteront sans modification. 
            </cell>
          </row>
        </table>
      </div>-->
      <!-- <div type="slide">
        <head>ODD est donc un langage de declaration</head>
        <p>Il est utilise par la TEI pour declarar les elements, leurs attributs, les classes, les
          types de donnees, et les patrons utilisables par tout systeme d'encodage TEI.</p>
        <p>par exemple
          <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <elementSpec ident="machin" module="nouveau-module">
              <desc >partie fait-tout d'un paragraphe</desc>
              <desc xml:lang="en">all purpose paragraph component</desc>
              <classes>
                <memberOf key="model.pPart"/>
                <memberOf key="att.global"/>
              </classes>            
            </elementSpec>
          </egXML>
        </p>
      </div>-->
      <div type="slide">
        <head>ODD est surtout un langage de specification...</head>
        <p>La TEI s’exprime en langage ODD. Ce fut d’ailleurs la raison principale pour laquelle le
          langage fut inventé </p>
        <p>La source TEI P5 (disponible ici <ptr
            target="http://www.tei-c.org/release/xml/tei/odd/Source/"/>) rassemble : <list>
            <item>39 fichiers en TEI-XML, dont 25 contiennent un chapitre de documentation en
              XML-TEI, la plupart définissant un module, par exemple
                <ident>PH-PrimarySources.xml</ident></item>
            <item>832 fichiers en TEI-XML, chacun définissant un élément, une classe, un type de
              donnée, ou une macro <list>
                <item>33 types de donnees (teidata.xxxx) par ex.
                  <ident>teidata.percentage</ident></item>
                <item>118 classes de type modèle (code>model.xxxx) par ex.
                    <ident>model.biblLike.xml</ident></item>
                <item>73 classes de type attribut (<code>att.xxxx</code>) par ex.
                    <ident>att.divLike.xml</ident></item>
                <item>36 macros (macro.xxxx) par ex. <ident>macro.phraseSeq.xml</ident></item>
                <item>567 spécifications d’éléments, de <ident>ab.xml</ident> jusqu'à
                    <ident>zone.xml</ident></item>
              </list></item>
          </list>
        </p>
      </div>
      <div type="slide">
        <head>... mais ODD est aussi un langage de personnalisation </head>
        <p>On se sert du même système pour spécifier ses choix dans le grand bazar de la TEI et pour
          spécifier le bazar lui-même.</p>
        <p>Un ODD de personnalisation est spécifié par rapport à un autre ODD ; typiquement mais pas
          forcément celui qui définit la version actuelle des <title>Guidelines</title><list>
            <item>en sélectionnant des modules</item>
            <item>en sélectionnant parmi les objets (éléments, classes, datatypes, macros) fournis
              par ces modules</item>
            <item>en supprimant ou modifiant quelques uns des attributs fournis par ces
              objets</item>
            <item>en modifiant ou remplaçant quelques parties de ces spécifications (par ex. les
              valList)</item>
            <item>éventuellement en ajoutant des spécifications d’objets nouveaux</item>
          </list></p>
      </div>
      <div type="slide">
        <head>Comment créer un ODD</head>
        <p>Un ODD, vous le savez déjà, c’est un document TEI comme les autres. Vous pouvez le
          construire et modifier avec oXygen ou n’importe quel autre éditeur XML </p>
        <p>Il existe des outils pour faciliter une construction initiale :</p>
        <list>
          <item><ref target="http://www.tei-c.org/Roma">http://www.tei-c.org/Roma</ref>; voir aussi
              <ref target="http://teibyexample.org/modules/TBED08v00.htm">tutoriel introductif (en
              anglais)</ref>
          </item>

          <item><ref target="http://teic.github.io/TCW/howtoGenerate-fr.html">ODD By
            Example</ref></item>
        </list>
      </div>
      <div type="slide">
        <head>L’élément <gi>schemaSpec</gi></head>
        <p>On utilise l’élément <gi>schemaSpec</gi> pour spécifier un schéma </p>
        <list>
          <item>L’attribut <att>ident</att> obligatoire fournit un nom pour le schéma</item>
          <item>L’attribut <att>start</att> indique le ou les noms des élément(s) racine(s) du
            schéma </item>
          <item>L’attribut <att>source</att> indique l’emplacement des déclarations référencées par
            le schéma (par ex une version spécifique de TEI P5) </item>
          <item>Les attributs <att>docLang</att> et <att>targetLang</att> permettent la sélection
            des langues à utiliser pour les descriptions d’éléments et pour les noms d’élément
            respectivement, en supposant la présence dans cette source des traductions
            requises</item>
        </list>
        <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
          <schemaSpec start="TEI" ident="testschema" source="tei:1.5.0" docLang="fr">
            <!-- declarations -->
          </schemaSpec>
        </egXML>
      </div>
      <div type="slide">
        <head>Astuces</head>
        <list>
          <item>Un seul document peut rassembler plusieurs <gi>schemaSpec</gi> qui partagent (par
            ex) un ensemble commun de <gi>specGrp</gi></item>
          <item>Un ODD peut servir comme base pour un autre
            (<soCalled>oddChaining</soCalled>)</item>
        </list>
        <figure>
          <graphic url="../Graphics/eltec-chains.png" height="70%"/>
        </figure>
      </div>
      <div type="slide">
        <head>Usage de l’attribut <att>source</att></head>
        <p>L’attribut <att>source</att> sert à spécifier la source des déclarations qu’on souhaite
          intégrer : par défaut dans la version la plus récente de TEI P5.</p>
        <p>Ou bien… </p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <schemaSpec ident="test2" prefix="tei_" start="TEI" source="tei:1.5.0">
            <!-- dans la version 1.5.0 -->
          </schemaSpec></egXML>
        <!--<egXML xmlns="http://www.tei-c.org/ns/Examples">
          <schemaSpec ident="test3" prefix="tei_" start="TEI"
            source="http://www.tei-c.org/Vault/P5/1.5.0/xml/tei/odd/p5subset.xml">
            <!-\- version plus verbose du même -\->
          </schemaSpec></egXML>-->
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <schemaSpec ident="test4" source="myCompiled.odd">
            <!-- ensemble de déclarations maison -->
          </schemaSpec></egXML>
        <p rend="box">
          <att>source</att> peut aussi être utilisé sur <gi>classRef</gi>, <gi>elementRef</gi>,
            <gi>macroRef</gi>, et <gi>moduleRef</gi> : il doit pointer vers un ODD compilé</p>
      </div>
      <div type="slide">
        <head>Composants d’un <gi>schemaSpec</gi></head>
        <list>
          <item><gi>elementSpec</gi>, <gi>classSpec</gi>, <gi>dataSpec</gi>, <gi>macroSpec</gi>
            (etc.) : des objets nouveaux </item>
          <item><gi>elementRef</gi>, <gi>classRef</gi>, <gi>dataRef</gi>, <gi>macroRef</gi>(etc.) :
            des objets déjà existants quelque part</item>
          <item><gi>moduleRef</gi> : un ensemble d’objets fournis par un module TEI</item>
        </list>
        <p>L'element moduleRef permet la sélection d'un ensemble d'objets TEI; par défaut dans son
          entièreté</p>
        <p>La location des objets référenciés est specifiée par un attribut <att>source</att> : par
          défaut il s’agit de la version la plus récente de TEI P5</p>
      </div>
      <div type="slide">
        <head>moduleRef: sélection par exclusion</head>
        <p> Vous pouvez spécifier les éléments que vous souhaitez supprimer parmi ceux proposés par
          un module : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <schemaSpec start="TEI" ident="testschema">
              <moduleRef key="core" except="mentioned said"/>
              <!-- ... -->
            </schemaSpec>
          </egXML>
        </p>
        <p>ou également : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <schemaSpec start="TEI" ident="testschema">
              <moduleRef key="core"/>
              <elementSpec ident="mentioned" mode="delete"/>
              <elementSpec ident="said" mode="delete"/>
              <!-- ... -->
            </schemaSpec>
          </egXML>
        </p>
        <p>(L’attribut <att>mode</att> contrôle la résolution de déclarations multiples)</p>
      </div>
      <div type="slide">
        <head>moduleRef : sélection par inclusion</head>
        <p>Vous pouvez spécifier les éléments que vous souhaitez inclure parmi ceux qui sont
          proposés par un module : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <schemaSpec start="TEI" ident="testschema">
              <moduleRef key="textstructure" include="body div"/>
              <!-- ... -->
            </schemaSpec>
          </egXML>
        </p>
        <p>ou également : <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <schemaSpec start="TEI" ident="testschema" source="tei:5.1.2">
              <elementRef key="div"/>
              <elementRef key="body"/>
              <!-- ... -->
            </schemaSpec></egXML>
        </p>
        <p rend="box">Attention ! un module peut définir d’autres choses que des éléments. Les
          attributs <att>include</att> et <att>except</att> ne s’appliquent qu’aux éléments</p>
      </div>
      <div type="slide">
        <head>Usage des module</head>
        <list>
          <item>Vous n’êtes pas obligé de préciser son module si vous souhaitez préciser l’inclusion
            d'un élément !</item>
          <item>Un <gi>elementRef</gi> suffit – pourvu que l’élément concerné soit déclaré par la
            source invoquée</item>
          <item>Mais il faut préciser son module si vous souhaitez inclure/utiliser une classe de
            modèle ou une classe d’attribut. </item>
          <item>La plupart des classes TEI étant définies par le module <ident>tei</ident>, ce
            dernier est à peu près essentiel pour tout ODD TEI.</item>
        </list>
      </div>
      <div type="slide">
        <head>Spécifications multiples</head>
        <p>Le traitement d’un ODD implique la résolution de spécifications multiples pour un même
          objet</p>
        <p>Supposons deux <gi>elementSpec</gi> pour un même élément, la résolution est déterminée
          par la valeur de l’attribut <att>mode</att></p>
        <list>
          <item><code>mode='add'</code> (défaut) : effectuer une nouvelle déclaration </item>
          <item><code>mode='delete'</code> : aucune déclaration n'est valide, l’élément est
            supprimé</item>
          <item><code>mode='replace'</code> : cette déclaration remplace entièrement toute autre
            déclaration</item>
          <item><code>mode='change'</code> : les parties de cette déclaration remplacent les parties
            correspondantes dans une autre déclaration ; le reste ne change pas. </item>
        </list>
      </div>
      <div type="slide">
        <head>Par exemple</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples"><schemaSpec start="TEI" ident="testschema">
            <moduleRef key="core" include="p hi"/>
            <elementSpec key="p" mode="delete"/>
          </schemaSpec>
        </egXML>
        <p>L’élément <gi>p</gi> est supprimé</p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples"><schemaSpec start="TEI" ident="testschema">
            <moduleRef key="core" include="p hi"/>
            <elementSpec key="p" mode="change">
              <desc>Cet élément ne contient que de texte</desc>
              <content><textNode/></content>
            </elementSpec>
          </schemaSpec></egXML>
        <p>Le contenu et la description de l’élément <gi>p</gi> sont changés ; ses autres propriétés
          (par ex, ses attributs) ne changent pas</p>
      </div>
      <div type="slide">
        <head>Traitement d’un ODD</head>
        <list>
          <item>Toutes les déclarations (*Spec et *Ref) sont d’abord réunies et
            canonicalisées</item>
          <item>Les déclarations multiples sont résolues</item>
          <item>La sortie de cette procédure est ensuite transformée en schéma, et/ou en
            documentation</item>
        </list>
        <p>La feuille de style <ident>odd2odd</ident> nous permet d’effectuer les deux étapes
          initiales et d’en conserver le résultat : nous appelons cela un <term>compiled
          ODD</term></p>
        <p>Un tel fichier est réutilisable comme la <att>source</att> d’un autre ODD</p>
      </div>
      <div type="slide">
        <head>Regardons un exemple </head>
        <p>
          <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
            <body>
              <head>Une personalisation TEI pour la transcription collaborative</head>
              <p>Cette personalisation propose un schéma minimal pour la transcription collaborative
                des documents archivals. </p>
              <schemaSpec ident="transMin" start="TEI text div" docLang="fr">
                <moduleRef key="tei"/>
                <moduleRef key="header"
                  include="teiHeader fileDesc titleStmt 
                  publicationStmt sourceDesc"/>
                <moduleRef key="textstructure" include="TEI text body div"/>
                <elementRef key="ab"/>
                <elementRef key="pb"/>
                <elementRef key="unclear"/>
                <elementRef key="hi"/>
                <elementRef key="name"/>
                <elementRef key="title"/>
                <classRef key="att.global.rendition" except="rendition style"/>
                <classSpec type="atts" ident="att.declaring" mode="delete"/>
                <classSpec type="atts" ident="att.edition" mode="delete"/>
                <classSpec type="atts" ident="att.editLike" mode="delete"/>
              </schemaSpec>
            </body>
          </egXML>
        </p>
        <cb/>
        <p>Cette personalisation rassemble : </p>
        <list>
          <item>un peu de documentation</item>
          <item>un <gi>schemaSpec</gi> identifiable, précisant une langue de documentation et des
            éléments racine</item>
          <item>une séléction d'éléments a inclure</item>
          <item>la suppression de plusieurs attributs</item>
        </list>
      </div>
      <div type="slide">
        <head>Exemple cont </head>
        <p>
          <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
            <body>
              <head>Une personalisation TEI pour la transcription collaborative</head>
              <p>Cette personalisation propose un schéma minimal pour la transcription collaborative
                des documents archivals. </p>
              <schemaSpec ident="transMin" start="TEI text div" docLang="fr">
                <!-- ... -->
                <elementSpec ident="botName" ns="http://monexcellentprojet.com">
                  <desc>nom botanique</desc>
                  <desc xml:lang="en">botanical name</desc>
                  <classes>
                    <memberOf key="model.phrase"/>
                    <memberOf key="att.global"/>
                  </classes>
                  <content>
                    <macroRef key="macro.paraContent"/>
                  </content>
                </elementSpec>
                <!-- ... -->
              </schemaSpec>
            </body>
          </egXML>
        </p>
        <cb/>
        <list>
          <item>nous ajoutons une spécification pour un élément non-TEI, appartenant à une autre
            espace de nommage </item>
          <item>cette spécification comporte <list>
              <item>une description</item>
              <item>une indication des classes TEI auxquelles l'élément appartiendrait</item>
              <item>une indication de son contenu possible</item>
            </list>
          </item>
        </list>
      </div>
      <div type="slide">
        <head>Exemple cont </head>
        <p>
          <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="tiny">
            <body>
              <head>Une personalisation TEI pour la transcription collaborative</head>
              <p>Cette personalisation propose un schéma minimal pour la transcription collaborative
                des documents archivals. </p>
              <schemaSpec ident="transMin" start="TEI text div" docLang="fr">
                <!-- ... -->
                <elementSpec ident="hi" mode="change">
                  <attList>
                    <attDef ident="rend" mode="replace">
                      <datatype>
                        <dataRef key="teidata.enumerated"/>
                      </datatype>
                      <valList type="closed">
                        <valItem ident="underline"/>
                        <valItem ident="superscript"/>
                      </valList>
                    </attDef>
                  </attList>
                </elementSpec>
                <!-- ... -->
              </schemaSpec>
            </body>
          </egXML>
        </p>
        <cb/>
        <list>
          <item>la spécification existante pour <gi>hi</gi> est modifiée</item>
          <item>la spécification de son attribut <att>rend</att> est remplacée: <list>
              <item>son type de données devient une énumération</item>
              <item>les valeurs possibles sont explicités</item>
            </list></item>
        </list>
      </div>
      <div type="slide">
        <head>Structuration d’un ODD</head>
        <p>Mis à part le <gi>schemaSpec</gi> qui définit le schéma, on peut organiser le document
          comme tout autre document TEI, utilisant <gi>div</gi>, <gi>list</gi>, etc. </p>
        <p>Au sein de ce document, des éléments supplémentaires sont prévus pour le regroupement des
          déclarations à l’extérieur du <gi>schemaSpec</gi> : </p>
        <list>
          <item>
            <gi>specGrp</gi> : un regroupement de déclarations identifiable <egXML
              xmlns="http://www.tei-c.org/ns/Examples">
              <p>Nous n’utilisons que ces éléments du module <ident>linking</ident> : <specGrp
                  xml:id="linkingElts">
                  <!-- quelques elementSpec etc -->
                </specGrp>
              </p></egXML>
          </item>
          <item><gi>specGrpRef</gi> : indique où on souhaite intégrer les déclarations précisées par
            un <gi>specGrp</gi>   <egXML xmlns="http://www.tei-c.org/ns/Examples">
              <specGrpRef target="#linkingElts"/></egXML>
          </item>
        </list>
      </div>
      <!-- here -->
      <div type="slide">
        <head>Contraintes de données avec Schematron </head>
        <list>
          <item>Une spécification d’élément peut proposer des contraintes supplémentaires sur son
            contenu en utilisant un ou plusieurs éléments <gi>constraintSpec</gi>
          </item>
          <item>Ces règles sont exprimées en utilisant le langage <ref
              target="http://schematron.com/">ISO Schematron </ref></item>
        </list>
        <egXML xmlns="http://www.tei-c.org/ns/Examples" rend="full">
          <elementSpec xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="div"
            module="teistructure" mode="change">
            <constraintSpec ident="div">
              <constraint>
                <s:assert test=".//tei:p">une division doit contenir au moins un
                  paragraphe</s:assert>
              </constraint>
            </constraintSpec>
          </elementSpec></egXML>
      </div>
      <div type="slide">
        <head>Trois sujets avances</head>
        <list>
          <item><gi>constraintSpec</gi> et <gi>dataSpec</gi>: contraintes sur le contenu plus
            complexes</item>
          <item><gi>model</gi> : specification de traitement par defaut</item>
          <item>Addition des composants d’une schéma non-TEI</item>
        </list>
      </div>
      <div type="slide">
        <head>L’élément <gi>dataSpec</gi></head>
        <p>Definit un <term>type de donnees</term> applicable habituellement a un ou plusieurs
          attribut. </p>
        <list>
          <item>la TEI ne reinvente pas les types de donnees (datatypes) deja fournis par le
            W3C</item>
          <item> mais elle permet l'ajout de quelques modifications, notamment <list>
              <item>des <term>facets</term> (par ex <q>valeur integral entre 4 et 42</q>) </item>
              <item>des <term>patterns</term> (par ex <q>chaine de caracters conforme a ce
                  regexp</q></item>
              <item>et une surcouche semantique (par ex, <code>teidata.sex</code> vs
                  <code>teidata.enumerated</code>)</item>
            </list>
          </item>
        </list>
      </div>
      <div type="slide">
        <head>L’élément <gi>constraintSpec</gi>
        </head>
        <p>Il définit une contrainte qui s’applique au sein de l’élément dans lequel il est
          déclaré</p>
        <list>
          <item>L’attribut <att>ident</att> est obligatoire : il fournit un identifiant
            unique</item>
          <item>Il rassemble un ou plusieurs <gi>constraint</gi></item>
          <item>L’élément <gi>constraint</gi> contient (typiquement) un <gi>assert</gi> ou un
              <gi>report</gi>, éléments de l’espace de nommage
              <code>http://purl.oclc.org/dsdl/schematron</code></item>
        </list>
      </div>
      <div type="slide">
        <head>Fonctionnement des règles Schematron </head>
        <list>
          <item>Le contenu de l’élément <gi>assert</gi> est affiché si le test est
            <hi>false</hi></item>
          <item>Le contenu de l’élément <gi>report</gi> est affiché si le test est
            <hi>true</hi></item>
          <item>Astuce : plusieurs éléments schematron sont disponibles pour enrichir le texte du
            message affiché, notamment <gi>name</gi> (context) et <gi>value-of</gi> (valeur) </item>
          <!--  <item>Voir <ptr target="http://www.schematron.com/"/> pour une description plus
   détaillée</item>-->
        </list>
        <p rend="box">Un schéma RNG intégrant ces règles sera auto-généré si l’on utilise le
          logiciel oXygen pour traiter son ODD </p>
      </div>
      <div type="slide">
        <head>Applications typiques des règles Schematron</head>
        <list>
          <item>Contraintes de co-occurrence : <q>si l’attribut X a la valeur A, l’élément qui le
              porte doit contenir un Y</q></item>
          <item>Contraintes arithmétique contextuelles : <q>au sein d’un <gi>titleStmt</gi>, on ne
              permet qu’un seul <gi>title</gi></q></item>
          <item>Contraintes textuelles : <q>Les caractères ' et “ ne sont pas permis au sein d’un
                <gi>p</gi> apparaissant dans le <gi>body</gi></q>
          </item>
          <item>Contraintes contextuelles : <q>mots en français (<att>xml:lang</att>='fr') ne sont
              pas permis au sein d’un élément latin (<att>xml:lang</att>='la')</q></item>
          <item>Intégrité référentielle : <q>un pointer exprimé sous la forme d’une URL et
              commençant par # doit correspondre à un élément ayant un <att>xml:id</att> identique
              quelque part dans le document</q>
          </item>
        </list>
      </div>
      <div type="slide">
        <head>Par exemple…</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <constraintSpec xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="isoconstraint">
            <constraint>
              <s:assert test="tei:fileDesc/tei:titleStmt/tei:title[@type='main']"> il faut fournir
                un titre principal </s:assert>
            </constraint>
          </constraintSpec></egXML>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <elementSpec ident="figure">
            <!-- ... -->
            <constraintSpec xmlns:s="http://purl.oclc.org/dsdl/schematron" ident="demo-c2">
              <constraint>
                <s:report test="not(tei:figDesc or tei:head)"> Votre figure ne contient ni un
                  figDesc ni un head : aucun attribut <att>alt</att> n'est générable</s:report>
              </constraint>
            </constraintSpec>
          </elementSpec></egXML>
      </div>
      <div type="slide">
        <head>Ajout d’un <soCalled>processing model</soCalled> (modèle de traitement)</head>
        <p>Vous pouvez également enrichir votre documentation avec des déclarations plus précises
          sur la manière dont des éléments particuliers devraient être mis en forme.</p>
        <p>Cela est complémentaire aux fonctionnalités offertes avec <att>rend</att> et
            <att>style</att> qui décrivent la manière dont la source originale (non-digitale) a été
          formattée.</p>
        <!--  <p>Les nouveaux éléments <gi>model</gi>, <gi>modelGrp</gi>, <gi>param</gi>,
            <gi>outputRendition</gi></p>
        <p>Le concept de <ident>behaviour</ident> est introduit pour définir des concepts de
          formattage employés communément, par exemple, <q>block</q>, <q>inline</q>, <q>pointer</q>,
          etc.</p>-->
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <elementSpec mode="change" ident="quote">
            <model predicate="ancestor::p" behaviour="inline"/>
            <model predicate="not(ancestor::p)" behaviour="block"/>
          </elementSpec></egXML>
        <q>Process a <gi>quote</gi> inside a <gi>p</gi> as an inline; elsewhere as a block</q>
      </div>
      <div type="slide">
        <head>Un <gi>model</gi> precise le/s <soCalled>behaviour/s</soCalled> attendu/s </head>
        <list>
          <item>Un <ident>behaviour</ident> peut correspondre à un des concepts de formattage
            employés communément, par exemple, <q>block</q>, <q>inline</q>, <q>pointer</q></item>
          <item> ou à une traîtement de niveau plus haut, par exemple, <q>alternate</q></item>
        </list>
        <table>
          <row role="label">
            <cell>behaviour</cell>
            <cell>params</cell>
            <cell>function</cell>
          </row>
          <row>
            <cell>alternate</cell>
            <cell>(default, alternate)</cell>
            <cell>Supporte la présentation de visualisations alternatives, par exemple en rendant le
              contenu préféré, en le présentant en parallèle, ou en bien en permettant de passer de
              l’un à l’autre.</cell>
          </row>
          <row>
            <cell>graphic</cell>
            <cell>(url, width, height, scale, title)</cell>
            <cell>si url est présent, l’utiliser pour rendre l’élément graphic, sinon rendre une
              image placeholder.</cell>
          </row>
          <row>
            <cell>omit</cell>
            <cell/>
            <cell>ne rien faire, ne pas traiter les enfants</cell>
          </row>
          <row>
            <cell>inline</cell>
            <cell>(content, label</cell>
            <cell>créer un élément inline</cell>
            <cell/>
            <cell/>
          </row>
        </table>
        <p rend="box">Voir implementation plus ou moins complète : <ref target="teipublisher.com"
            >TEI Publisher</ref></p>
      </div>
      <!-- <div type="slide" >
        <head>Chaining and combining ODDs</head>
        <p><figure>
          <graphic url="../../Graphics/oddity.png"/>
        </figure>
        </p>
      </div>-->
      <div type="slide">
        <head>Addition des composants d’une schéma nonTEI</head>
        <p>On souhaite utiliser l’élément TEI <gi>formula</gi> et y insérer du contenu exprimé en
          MathML</p>
        <p>Il nous faut donc :<list type="ordered">
            <item>inclure les composants du schéma MathML </item>
            <item>modifier le modèle de contenu de l’élément <gi>formula</gi></item>
            <item>générer un schéma qui résout les conflits de nommage </item>
          </list>
        </p>
        <p rend="block"> ATTENTION : il y a un élément <gi>list</gi> dans TEI mais également dans
          MathML !</p>
      </div>
      <div type="slide">
        <head>TEI + MathML : le ODD</head>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <schemaSpec ident="tei_math" prefix="tei_" start="TEI teiCorpus">
            <moduleRef
              url="http://www.tei-c.org/release/xml/tei/
              custom/schema/relaxng/mathml2-main.rng"/>
            <moduleRef key="header"/>
            <moduleRef key="core"/>
            <moduleRef key="tei"/>
            <moduleRef key="textstructure"/>
            <moduleRef key="figures"/>
            <elementSpec module="figures" ident="formula" mode="change">
              <content>
                <elementRef key="mathml.math"/>
              </content>
            </elementSpec>
          </schemaSpec>
        </egXML>
        <p rend="box">L’attribut <att>prefix</att> nous permet de désambiguïser les identifiants
          ressortant des schémas différentes</p>
      </div>
      <!--  <div  type="slide">
        <head>TEI + MathML : le document</head>
        <p><figure>
          <graphic url="../../Graphics/vavilov.png"/>
        </figure></p>
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          <p>The relevant inequalities and distributions are <formula notation="MathML">
            <math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll">
              <mn>0</mn>
              <mo>.</mo>
              <mn>0</mn>
              <mn>1</mn>
              <mo>&lt;</mo>
              <mi>κ</mi>
              <mo>&lt;</mo>
              <mn>1</mn>
              <mn>0</mn>
            </math>
          </formula>, Vavilov distribution, and ... </p>
        </egXML>
      </div>-->
      <div type="slide">
        <head>Variétés de ODD</head>
        <p>
          <figure>
            <graphic url="../Graphics/oddFlavours.png" height="50%"/>
          </figure></p>
        <p>Chacune de ces formes représente : </p>
        <list>
          <item>un ODD</item>
          <item>le schéma généré à partir de cet ODD</item>
          <item>l'ensemble de documents considérés comme valide par ce schéma</item>
        </list>
      </div>
      <div type="slide">
        <head>Variétés de ODD</head>
        <p>
          <figure>
            <graphic url="../Graphics/oddFlavours.png"/>
          </figure></p>
        <cb/>
        <list>
          <item>un <q>TEI subset</q> fournit un sous-ensemble des composants constituant TEI All </item>
          <!-- <item>un <q>customised subset</q> est également un sous-ensemble avec des
            personnalisations supplémentaires</item>-->
          <item>un <q>TEI extension</q> contient des composants qui ne font pas partie de TEI All
          </item>
        </list>
        <p rend="box">La question $1000k : comment savoir si votre extension serait conforme à la
          TEI ?</p>
      </div>
      <div type="slide">
        <head>Le plus simple</head>
        <list>
          <item>Pour un TEI subset : vos modifications génèrent un schéma réduit plus précis, plus
            adapté à votre projet et une documentation plus exacte et correcte pour votre communauté
            d'utilisateurs</item>
          <item>Vos documents restent toujours valides par rapport à TEI All et vous respectez
            toujours le modèle sémantique de la TEI.</item>
          <item>Pour un TEI extension : les extensions éventuelles sont signalées clairement, en
            utilisant une autre espace de nommage, et sont d’ailleurs expliquées dans votre ODD, par
            exemple en employant les classes TEI, l'element <gi>equiv</gi>, la documentation, etc.
          </item>
        </list>
      </div>
      <div type="slide">
        <head>Qu’est-ce signifie « être conforme à la TEI » ?</head>
        <list>
          <item><hi>être honnête</hi> : Les éléments XML qui sont déclarés comme appartenant au
            namespace TEI doivent respecter les définitions TEI de ces éléments</item>
          <item><hi>être explicite</hi> : Pour valider un document TEI, un ODD est fortement
            conseillé, parce que cela mettra en évidence toutes les modifications effectuées.</item>
        </list>
        <p>Validation d'un document par rapport à un schéma TEI (TEI All, subset, ou extension) est
          un bon signe, mais ne garantit pas son conformance</p>
        <p>Le <q>respect des definitions TEI</q> implique un control semantique pas automisable</p>
        <!-- <p>Plus formellement, pour un document TEI conforme :<list>
            <item>il doit être un document XML bien-formé</item>
            <item>si la construction de son schéma ne prend en compte que les éléments appartenant à
              l’espace de nommage TEI, l'ensemble de documents considéré comme valide par ce schéma
              devrait être un sous-ensemble de l'ensemble de documents considéré valide par le
              schéma TEI-ALL.</item>
            <item>Tout autre élément présent doit appartenir à un autre namespace</item>
          </list></p>-->
      </div>
      <div type="slide">
        <head>Les limites de la modification</head>
        <list>
          <item>Est-ce que l’on peut supprimer n’importe quoi ? par ex. <gi>title</gi> ?</item>
          <item>A quoi servent les classes vides ?</item>
          <item>Est-ce qu’on peut ajouter n’importe quoi ? par ex. elements du Dublin Core</item>
        </list>
        <p rend="box"><list>
            <item>L’objet des règles de conformité est de simplifier le <q>blind interchange</q> des
              documents ; mais elles ne le garantissent pas.</item>
            <item>L’enjeu est de permettre à un utilisateur de comprendre votre encodage, non pas
              forcement de le contraindre à vous suivre aveuglement</item>
          </list></p>
      </div>
      <!--  <div type="slide" >
        <head>Comment faire mûrir une théorie ?</head>
        <p>Dans son TEI ODD, on peut : <list>
            <item>limiter les valeurs possibles d’un attribut plus ou moins strictement</item>
            <item>proposer des règles Schematron sur le contenu (p.e. co-dependency)</item>
            <item>enlever quelques éléments facultatifs</item>
            <item>ajouter de nouveaux éléments, labellisés dans votre propre espace de
              nommage</item>
          </list></p>
        <p rend="box">Donc on peut évoluer et tester une théorie précoce, en restant toujours
          TEI-conforme. </p>
      </div>
      <div  type="slide">
        <head>Not Invented Here?</head>
        <list>
          <item>TEI P5 a des possibilités très extensives pour l'I18N...</item>
          <item>TEI héberge volontairement d’autres espaces de noms</item>
          <item>Donc on peut se servir des autres schémas existants : <list>
              <item>SVG pour les graphiques</item>
              <item>MathML pour les maths</item>
              <item>DCMI pour les metadonnées</item>
              <item>…</item>
            </list></item>
          <item>La définition d’un élément TEI peut inclure (s’il y en a) son mapping avec d’autres
            ontologies, formalisé par un élément <gi>equiv</gi> (équivalent)</item>
        </list>
        <p rend="box">Mais, au fond, le modèle textuel proposé par la TEI reste proche à un modèle
          très répandu: très intuitif</p>
      </div>
    
     -->
    </body>
  </text>
</TEI>
